[{"body":"","link":"https://gitorko.github.io/","section":"","tags":null,"title":""},{"body":"","link":"https://gitorko.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://gitorko.github.io/categories/distributed-system/","section":"categories","tags":null,"title":"Distributed-System"},{"body":"","link":"https://gitorko.github.io/tags/failure/","section":"tags","tags":null,"title":"failure"},{"body":"We will look at the different points at which an application can fail in a distributed system and how to address failures. We will deliberately fail the application at these points to determine what the error looks like and how to handle it. To know how to build a good distributed system you need to understand where it can fail.\nHTTP Connections Problem A hacker is establishing tcp connections that dont do anything, valid users are getting Denial-of-Service. What do you do?\nYour server is receiving a lot of bad TCP connections. To test this make the thread count to 1 and change the connection timeout to 10 milli seconds. Now issue a telnet command to connect to the running port, It will connect but since no data is sent the TCP connection is closed in 10 milli seconds.\n1server.tomcat.threads.max=1 2server.tomcat.connection-timeout=10 3 4telnet localhost 31000 The connection timeout means - If the client is not sending data after establishing the TCP handshake for 'N' seconds then close the connection.\n1server.tomcat.connection-timeout=5000 Note Most will assume that this connection timeout actually closes the connection when a long running task takes more than 'N' seconds. This is not true. It only closes connection if the client doesnt send anything for 'N' seconds.\nTimeLimiter Problem A new team member has updated a function and introduced a bug and the function is very slow or never returns a response. What do you do?\nIf a function takes too long to complete it will block the tomcat thread which will further degrade the system performance. Use Resilience4j to explicitly timeout long running jobs, this way runaway functions cant impact your entire system.\nSpring also provides spring.mvc.async.request-timeout that you can explore to accomplish the same.\nNote Always assume the functions within your service will take forever and may never complete, design accordingly.\nRequest Thread Pool \u0026amp; Connections Problem Users are reporting slow connection / timeout when connecting to your server? How many concurrent requests can your server handle?\nThere 2 types of protocol a tomcat server can be configured for\nBIO - Blocking IO, In the case of BIO the threads are not free till the response is sent back. NIO - Non-Blocking IO, In the case of NIO the threads are free to serve other requests the incoming request is waiting for IO to complete. The number of threads determine how many thread can handle the incoming requests. This means default of 200 threads are ready to serve the requests\n1# Applies for NIO \u0026amp; BIO 2server.tomcat.threads.max=200 Max number of connections the server can accept and process, for BIO (Blocking IO) tomcat the server.tomcat.threads.max = server.tomcat.max-connections You cant have more connections than the threads.\nFor NIO tomcat, the number of threads can be less and the max-connections can be more. Since the threads not blocked while waiting for IO to complete then can open up more connections and server other requests.\n1# Applies only for NIO 2server.tomcat.max-connections: 500 Note The number of tomcat threads and the server hardware determine how many requests can be served in a given time interval. If you have 200 threads (BIO) and all request response on average take 1 second to complete then your server can handle 200 requests per second.\nKeep-Alive Problem Network admin calls you to tell that many TCP connections are being created to the same clients. What do you do?\nTCP connections take time to be established, keep-alive keeps the connection alive for some more time incase the client want to send more data again in the new future.\nmax-keep-alive-requests - Max number of HTTP requests that can be pipelined before connection is closed. keep-alive-timeout - Keeps the TCP connection for sometime to avoid doing a handshake again if request from same client is sent.\n1server.tomcat.max-keep-alive-requests = 100 2server.tomcat.keep-alive-timeout = 10 Rest Client Connection Timeout Problem You are invoking rest calls to an external service which has degraded and has become very slow there by causing your service to slow down. What do you do?\nIf the server makes external calls ensure to set the read and connection timeout on the restTemplate. If you dont set this then your server which is a client will wait forever to get the response.\n1# If unable to connect the external server then give up after 5 seconds. 2setConnectTimeout(5_000); 3 4# If unable to read data from external api call then give up after 5 seconds. 5setReadTimeout(5_000); Note Always assume that all external API calls never return and design accordingly.\nDatabase Connection Pool Problem Users are reporting slowness in api that fetch relatively small data. What do you do?\nSpring boot provides Hikari connection pool by default. If there are run away SQL connections then service can quickly run out of connection in the pool and slow down the entire system.\nTo test this we restrict the pool size to 1 to make the error simulation easy.\n1spring.hikari.maximumPoolSize: 1 By setting the connectionTimeout we ensure that when the connection pool is full then we timeout after 1 second instead of waiting forever to get a new connection.\n1spring.hikari.connectionTimeout=1000 Now when you trigger the api, You will see an error, only the first query succeeds and rest will fail. Fail-Fast is always preferred than slowing down the entire service.\n1Caused by: java.sql.SQLTransientConnectionException: HikariPool-1 - Connection is not available, request timed out after 253ms. Note Always assume that you will run out of database connections due to a run away or storm of requests and design accordingly.\nSlow Query Problem Users are reporting slowness in a db fetch api that fetches data from multiple tables via join. Your DBA also confirms that query is too slow. What do you do?\nSlow queries often slow down the entire system. To test this we explicitly slow down a query with pg_sleep function.\nWe set timeout on the transaction to ensure that slow query doesn't impact the entire system, after 5 seconds if the query doesnt return result an exception is thrown.\n1@Transactional(timeout = 5) Note Always assume that all DB calls never return or are very slow and design accordingly.\nYou can further look at optimizing the query with help of indexes however here we design the backend system such that the service doesnt fail as a whole due to slow queries.\nMemory Leak \u0026amp; CPU Spike Problem You have developed your service on your laptop, you tested with a big heap memory setting. However your kubernetes admin calls you to inform that kubernetes is a shared resource and you can't consume so much memory. What do you do?\nMemory leaks are always hard to debug, a badly written method can cause spike in memory usage causing other services to struggle with heap memory and in turn causing lot of GC (garbage collection) which are stop of the world events.\nWith kubernetes you can define resource limits that kill the pod if tries to use more resources than allocated.\n1resources: 2 requests: 3 cpu: \u0026#34;250m\u0026#34; 4 memory: \u0026#34;250Mi\u0026#34; 5 limits: 6 cpu: \u0026#34;2\u0026#34; 7 memory: \u0026#34;380Mi\u0026#34; Now when you invoke the api that causes a memory spike, the pod will be killed (OOMKilled) and a new pod brought up.\nNote An OutOfMemoryError side the pod doesnt necessarily kill the pod unless some health check is configured. Pod will still remain in running state despite the OOM error. Only the resource limits defined determine when the pod gets killed.\n1Exception in thread \u0026#34;http-nio-31000-exec-1\u0026#34; java.lang.OutOfMemoryError: Java heap space Other Failures Once you expand the distributed system there can be various other points of failure\nPrimary DB failure Secondary DB replication failure Queue failures Network failures External System can go down Service nodes can go down Cache invalidation/eviction failure Load Balancer failures Datacenter failure for one region Code 1package com.demo.project57; 2 3import com.demo.project57.domain.Customer; 4import com.demo.project57.repository.CustomerRepository; 5import org.springframework.boot.CommandLineRunner; 6import org.springframework.boot.SpringApplication; 7import org.springframework.boot.autoconfigure.SpringBootApplication; 8import org.springframework.context.annotation.Bean; 9import org.springframework.http.client.SimpleClientHttpRequestFactory; 10import org.springframework.web.client.RestTemplate; 11 12@SpringBootApplication 13public class Main { 14 public static void main(String[] args) { 15 SpringApplication.run(Main.class, args); 16 } 17 18 @Bean 19 public RestTemplate getRestTemplate() { 20 return new RestTemplate(getClientHttpRequestFactory()); 21 } 22 23 //Override timeouts in request factory 24 private SimpleClientHttpRequestFactory getClientHttpRequestFactory() { 25 SimpleClientHttpRequestFactory clientHttpRequestFactory 26 = new SimpleClientHttpRequestFactory(); 27 //Connect timeout 28 clientHttpRequestFactory.setConnectTimeout(5_000); 29 30 //Read timeout 31 clientHttpRequestFactory.setReadTimeout(5_000); 32 return clientHttpRequestFactory; 33 } 34 35 @Bean 36 public CommandLineRunner seedData(CustomerRepository customerRepository) { 37 return args -\u0026gt; { 38 for (int i = 0; i \u0026lt; 99; i++) { 39 customerRepository.save(Customer.builder().name(\u0026#34;customer_\u0026#34; + i).phone(\u0026#34;phone_\u0026#34; + i).build()); 40 } 41 }; 42 } 43} 1package com.demo.project57.controller; 2 3import java.time.LocalDateTime; 4import java.util.ArrayList; 5import java.util.List; 6import java.util.Random; 7import java.util.concurrent.CompletableFuture; 8import java.util.concurrent.TimeUnit; 9 10import com.demo.project57.service.CustomerService; 11import io.github.resilience4j.timelimiter.annotation.TimeLimiter; 12import lombok.RequiredArgsConstructor; 13import lombok.SneakyThrows; 14import lombok.extern.slf4j.Slf4j; 15import org.springframework.http.HttpMethod; 16import org.springframework.http.ResponseEntity; 17import org.springframework.web.bind.annotation.GetMapping; 18import org.springframework.web.bind.annotation.PathVariable; 19import org.springframework.web.bind.annotation.RestController; 20import org.springframework.web.client.RestTemplate; 21 22@RestController 23@RequiredArgsConstructor 24@Slf4j 25public class HomeController { 26 27 private final RestTemplate restTemplate; 28 private final CustomerService customerService; 29 30 List\u0026lt;String\u0026gt; names = new ArrayList\u0026lt;\u0026gt;(); 31 32 @GetMapping(\u0026#34;/api/time\u0026#34;) 33 public String getServerTime() { 34 log.info(\u0026#34;Getting server time!\u0026#34;); 35 String podName = System.getenv(\u0026#34;HOSTNAME\u0026#34;); 36 return \u0026#34;Pod: \u0026#34; + podName + \u0026#34; : \u0026#34; + LocalDateTime.now(); 37 } 38 39 /** 40 * Will block the tomcat threads and hence no other requests can be processed 41 */ 42 @GetMapping(\u0026#34;/api/echo1/{name}\u0026#34;) 43 public String echo1(@PathVariable String name) { 44 log.info(\u0026#34;echo1 received echo request: {}\u0026#34;, name); 45 longRunningJob(true); 46 return \u0026#34;Hello \u0026#34; + name; 47 } 48 49 /** 50 * Will time out after 1 second so other requests can be processed. 51 */ 52 @GetMapping(\u0026#34;/api/echo2/{name}\u0026#34;) 53 @TimeLimiter(name = \u0026#34;service1-tl\u0026#34;) 54 public CompletableFuture\u0026lt;String\u0026gt; echo2(@PathVariable String name) { 55 return CompletableFuture.supplyAsync(() -\u0026gt; { 56 log.info(\u0026#34;echo2 received echo request: {}\u0026#34;, name); 57 longRunningJob(false); 58 return \u0026#34;Hello \u0026#34; + name; 59 }); 60 } 61 62 /** 63 * API calling an external API that is not responding 64 * Since we don\u0026#39;t have an external API we are using the echo1 api 65 * 66 * Here timeout on the rest template is configured 67 */ 68 @GetMapping(\u0026#34;/api/echo3/{name}\u0026#34;) 69 public String echo3(@PathVariable String name) { 70 log.info(\u0026#34;echo3 received echo request: {}\u0026#34;, name); 71 String response = restTemplate.exchange(\u0026#34;http://localhost:31000/api/echo2/john\u0026#34;, HttpMethod.GET, null, String.class) 72 .getBody(); 73 log.info(\u0026#34;Got response: {}\u0026#34;, response); 74 return response; 75 } 76 77 /** 78 * Over user of db connection by run-away method 79 */ 80 @GetMapping(\u0026#34;/api/many-db-call\u0026#34;) 81 public int manyDbCall() { 82 log.info(\u0026#34;manyDbCall invoked!\u0026#34;); 83 return customerService.invokeAyncDbCall(); 84 } 85 86 /** 87 * Slow query without timeout 88 * Explicit delay of 10 seconds introduced in DB query 89 */ 90 @GetMapping(\u0026#34;/api/count1\u0026#34;) 91 public int getCount1() { 92 log.info(\u0026#34;dbCall invoked!\u0026#34;); 93 return customerService.getCustomerCount1(); 94 } 95 96 /** 97 * Slow query with timeout 98 * Explicit delay of 10 seconds introduced in DB query 99 */ 100 @GetMapping(\u0026#34;/api/count2\u0026#34;) 101 public int getCount2() { 102 log.info(\u0026#34;dbCall invoked!\u0026#34;); 103 return customerService.getCustomerCount2(); 104 } 105 106 /** 107 * Create spike in memory 108 * List keeps growing on each call and eventually causes OOM error 109 */ 110 @GetMapping(\u0026#34;/api/memory-leak\u0026#34;) 111 public ResponseEntity\u0026lt;?\u0026gt; memoryLeak() { 112 log.info(\u0026#34;Inserting customers to memory\u0026#34;); 113 for (int i = 0; i \u0026lt; 999999; i++) { 114 names.add(\u0026#34;customer_\u0026#34; + i); 115 } 116 return ResponseEntity.ok(\u0026#34;DONE\u0026#34;); 117 } 118 119 @SneakyThrows 120 private void longRunningJob(Boolean fixedDelay) { 121 if (fixedDelay) { 122 TimeUnit.MINUTES.sleep(1); 123 } else { 124 //Randomly fixedDelay the job 125 Random rd = new Random(); 126 if (rd.nextBoolean()) { 127 TimeUnit.MINUTES.sleep(1); 128 } 129 } 130 } 131} 1package com.demo.project57.service; 2 3import com.demo.project57.repository.CustomerRepository; 4import lombok.RequiredArgsConstructor; 5import lombok.extern.slf4j.Slf4j; 6import org.springframework.scheduling.annotation.EnableAsync; 7import org.springframework.stereotype.Service; 8import org.springframework.transaction.annotation.Transactional; 9 10@Service 11@RequiredArgsConstructor 12@Slf4j 13@EnableAsync 14public class CustomerService { 15 private final CustomerRepository customerRepository; 16 private final CustomerAsyncService customerAsyncService; 17 18 public int getCustomerCount1() { 19 return customerRepository.getCustomerCount(); 20 } 21 22 @Transactional(timeout = 5) 23 public int getCustomerCount2() { 24 return customerRepository.getCustomerCount(); 25 } 26 27 public int invokeAyncDbCall() { 28 for (int i = 0; i \u0026lt; 5; i++) { 29 //Query the DB 5 times 30 customerAsyncService.getCustomerCount(); 31 } 32 //Return value doesn\u0026#39;t matter, we are invoking parallel requests to ensure connection pool if full. 33 return 0; 34 } 35 36} 1package com.demo.project57.service; 2 3import com.demo.project57.repository.CustomerRepository; 4import lombok.RequiredArgsConstructor; 5import lombok.extern.slf4j.Slf4j; 6import org.springframework.scheduling.annotation.Async; 7import org.springframework.scheduling.annotation.EnableAsync; 8import org.springframework.stereotype.Service; 9import org.springframework.transaction.annotation.Propagation; 10import org.springframework.transaction.annotation.Transactional; 11 12@Service 13@EnableAsync 14@RequiredArgsConstructor 15@Slf4j 16public class CustomerAsyncService { 17 private final CustomerRepository customerRepository; 18 19 /** 20 * Each method run in parallel causing connection pool to become full. 21 * Explicitly creating many connections so we run out of connections 22 */ 23 @Transactional(propagation = Propagation.REQUIRES_NEW) 24 @Async 25 public void getCustomerCount() { 26 log.info(\u0026#34;getCustomerLike invoked!\u0026#34;); 27 int count = customerRepository.getCustomerCount(); 28 log.info(\u0026#34;getCustomerLike count: {}\u0026#34;, count); 29 } 30 31} 1spring: 2 main: 3 banner-mode: \u0026#34;off\u0026#34; 4 datasource: 5 driver-class-name: org.postgresql.Driver 6 host: localhost 7 url: jdbc:postgresql://${POSTGRES_HOST}:5432/${POSTGRES_DB} 8 username: ${POSTGRES_USER} 9 password: ${POSTGRES_PASSWORD} 10 hikari: 11 maximumPoolSize: 1 12 connectionTimeout: 1000 13 idleTimeout: 60 14 maxLifetime: 180 15 jpa: 16 show-sql: false 17 hibernate.ddl-auto: create-drop 18 database-platform: org.hibernate.dialect.PostgreSQLDialect 19 defer-datasource-initialization: true 20 21server: 22 port: 31000 23 tomcat: 24 connection-timeout: 10 25 threads: 26 max: 2 27 max-keep-alive-requests: 10 28 keep-alive-timeout: 10 29 max-connections: 5 30 31resilience4j.timelimiter: 32 instances: 33 service1-tl: 34 timeoutDuration: 1s 35 cancelRunningFuture: true Postman Collection https://raw.githubusercontent.com/gitorko/project57/main/postman/Project57.postman_collection.json\nJMeter https://raw.githubusercontent.com/gitorko/project57/main/jmeter/LoadTest.jmx\nSetup Project 57 Point of Failures in System\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the backend in dev mode.\n1./gradlew clean build 2./gradlew bootRun Kubernetes 1docker stop pg-container 2 3./gradlew clean build 4docker build -f k8s/Dockerfile --force-rm -t project57:1.0.0 . 5kubectl apply -f k8s/Postgres.yaml 6kubectl apply -f k8s/Deployment.yaml 7kubectl get pods -w 8 9kubectl logs -f service/project57-service 10 11kubectl delete -f k8s/Postgres.yaml 12kubectl delete -f k8s/Deployment.yaml References https://resilience4j.readme.io/docs\n","link":"https://gitorko.github.io/post/points-of-failure/","section":"post","tags":["failure","resilience4j"],"title":"Points Of Failure in Distributed System"},{"body":"","link":"https://gitorko.github.io/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"","link":"https://gitorko.github.io/tags/resilience4j/","section":"tags","tags":null,"title":"resilience4j"},{"body":"","link":"https://gitorko.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://gitorko.github.io/tags/order-matching/","section":"tags","tags":null,"title":"order-matching"},{"body":"","link":"https://gitorko.github.io/tags/price-time-algorithm/","section":"tags","tags":null,"title":"price-time-algorithm"},{"body":"A Stock Exchange system developed with Spring Boot, Spring JPA and Angular (Clarity) frontend. Implements the price-time-priority algorithm\nGithub: https://github.com/gitorko/project100\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project100 2cd project100 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nRequirements Design a stock exchange system for various tickers, user can place buy and sell orders.\nFunctional Requirements Buy \u0026amp; Sell orders must be processed based on priority of time when they were placed. Priority must be given to clear order placed first. FIFO (First-In-First-Out) Order buy/sell will be whole quantity. Order can be split but buy/sell has to be complete. Can't have partial buy/sell in a single order. Case 1 : Order match in sequential time order (FIFO) Event Time Type Price Qty Status 10:00 AM SELL 10.0 100 COMPLETED 10:01 AM SELL 10.0 200 COMPLETED 10:02 AM SELL 10.0 300 SUBMIT 10:03 AM BUY 10.0 300 COMPLETED Case 2 : Order match in sequential time order but preference to order fulfillment Event Time Type Price Qty Status 10:00 AM SELL 10.0 100 COMPLETED 10:01 AM SELL 10.0 200 10:02 AM SELL 10.0 300 COMPLETED SUBMIT 10:03 AM BUY 10.0 400 COMPLETED Case 3 : First sell order too small, will never fulfill blocking others, so will be skipped Event Time Type Price Qty Status 10:00 AM SELL 10.0 100 10:01 AM SELL 10.0 200 COMPLETED 10:02 AM SELL 10.0 300 COMPLETED SUBMIT 10:03 AM BUY 10.0 500 Case 4 : First sell order too big, will never fulfill blocking others, so will be skipped Event Time Type Price Qty Status 10:00 AM SELL 10.0 1000 10:01 AM SELL 10.0 200 COMPLETED 10:02 AM SELL 10.0 300 COMPLETED SUBMIT 10:03 AM BUY 10.0 500 COMPLETED Case 5 : Middle sell order too big, will never fulfill blocking others, so will be skipped Event Time Type Price Qty Status 10:00 AM SELL 10.0 100 COMPLETED 10:01 AM SELL 10.0 2000 10:02 AM SELL 10.0 300 COMPLETED SUBMIT 10:03 AM BUY 10.0 400 COMPLETED Case 6 : Order match when price is different One seller wanted to sell at 9$ but we can fulfill order at 10$ as there is a buyer. So all sellers gets 10$ It's ok for seller to get above asking price but not go below the asking price.\nEvent Time Type Price Qty Status 10:00 AM SELL 10.0 100 COMPLETED 10:01 AM SELL 10.0 200 10:02 AM SELL 9.0 300 COMPLETED SUBMIT 10:03 AM BUY 10.0 400 COMPLETED Case 7 : Order match when price is different Two sellers wanted to sell at 9$ \u0026amp; 8$ but we can fulfill order at 10$ as there is a buyer. So all sellers gets 10$ It's ok for seller to get above asking price but not go below the asking price.\nEvent Time Type Price Qty Status 10:00 AM SELL 10.0 100 COMPLETED 10:01 AM SELL 9.0 200 10:02 AM SELL 8.0 300 COMPLETED SUBMIT 10:03 AM BUY 10.0 400 COMPLETED Case 8 : Order match when price is different There is a cheaper sell order of 8$ however due to time preference (FIFO) we complete the order with the 10$ \u0026amp; 9$\nEvent Time Type Price Qty Status 10:00 AM SELL 10.0 100 COMPLETED 10:01 AM SELL 9.0 200 COMPLETED 10:02 AM SELL 8.0 300 SUBMIT 10:03 AM BUY 10.0 300 COMPLETED Case 9 : Order can't be fulfilled Event Time Type Price Qty Status 10:00 AM SELL 10.0 100 10:01 AM SELL 10.0 200 10:02 AM SELL 10.0 300 SUBMIT 10:03 AM BUY 10.0 50 Case 10 : Sell orders at the same time \u0026amp; same price Event Time Type Price Qty Status 10:00 AM SELL 10.0 200 COMPLETED 10:00 AM SELL 10.0 100 10:00 AM SELL 10.0 200 COMPLETED SUBMIT 10:01 AM BUY 10.0 400 COMPLETED Case 11 : Sell orders at the same time \u0026amp; different price Event Time Type Price Qty Status 10:00 AM SELL 10.0 200 COMPLETED 10:00 AM SELL 9.0 100 10:00 AM SELL 8.0 200 COMPLETED SUBMIT 10:01 AM BUY 10.0 400 COMPLETED Cases for Buy order is similar/inverse of the above cases.\nCase 12 : No fractional order fulfillment Event Time Type Price Qty Status 10:00 AM SELL 10.0 200 SUBMIT 10:00 AM BUY 10.0 100 If fractional order could be fulfilled then you could look at implementing the algorithm with a Priority Queue (Min Heap \u0026amp; Max Heap). Where heap is sorted by price and then by time. In such a case the algorithm becomes simple and just insertion and deletion to heap can be done in constant time. If heaps are implemented then in the above case, if there are only 2 transactions in the entire day. Then the seller will only be able to sell 100 items out of 200. Since there cant be fractional buy/sell we will not use Priority Queue (Heaps).\nNon-Functional Requirements Latency should be low. System should be highly available \u0026amp; survive restarts System should scale well when number of orders increases. Should be able to distribute the service with sticky affinity for one type of ticker. Design Real world trading algorithms are more complex, involve more memory \u0026amp; cpu optimized data structures, and can handle huge volumes. Most trading systems are written in C/C++.\nThe order matching algorithm uses backtracking which is limited by the recursive stack depth. If the CombinationSum backtracking job can be further split and scheduled across different worker nodes the throughput will increase further.\nIt uses single thread per ticker and is limited by the thread pool size to support more tickers. No synchronization is required as its a single thread model per ticker\nSystem is able to match \u0026amp; process 5,000 unique orders per ticker in 2 mins that roughly 40+ matching transactions per second per ticker on a Mac Laptop\nCode 1package com.demo.project100.service; 2 3import java.time.LocalDate; 4import java.time.LocalDateTime; 5import java.util.HashMap; 6import java.util.Random; 7 8import com.demo.project100.config.MyConfig; 9import com.demo.project100.domain.OpenOrder; 10import com.demo.project100.domain.SellType; 11import com.demo.project100.domain.SettledOrder; 12import com.demo.project100.repo.OpenOrderRepository; 13import com.demo.project100.repo.SettledOrderRepository; 14import com.demo.project100.repo.SettlementSummaryRepository; 15import lombok.RequiredArgsConstructor; 16import lombok.extern.slf4j.Slf4j; 17import org.springframework.data.domain.Page; 18import org.springframework.data.domain.Pageable; 19import org.springframework.stereotype.Service; 20 21@Service 22@RequiredArgsConstructor 23@Slf4j 24public class OrderService { 25 26 private final SettledOrderRepository settledOrderRepository; 27 private final SettlementSummaryRepository settlementSummaryRepository; 28 private final OpenOrderRepository openOrderRepository; 29 private final EventProcessor eventProcessor; 30 private final MyConfig myConfig; 31 32 /** 33 * Save the order to db. 34 * Then queue the order for settlement i.e find a matching order to complete it. 35 */ 36 public OpenOrder placeOrder(OpenOrder orderItem, Boolean settle) { 37 orderItem.setOrderDate(LocalDateTime.now()); 38 OpenOrder savedOrder = openOrderRepository.save(orderItem); 39 if (settle) { 40 orderItem.setSettle(true); 41 } 42 eventProcessor.queueOrder(savedOrder); 43 return savedOrder; 44 } 45 46 /** 47 * Get all the active orders from the db, to load them to in-memory data structure. 48 * This can happen when system crashes and needs to restart 49 */ 50 public Page\u0026lt;OpenOrder\u0026gt; findOpenOrdersForDay(Pageable pageable) { 51 return openOrderRepository.findAllByOrderDateBetween(LocalDate.now().atStartOfDay(), LocalDate.now().plusDays(1).atStartOfDay(), pageable); 52 } 53 54 public Page\u0026lt;SettledOrder\u0026gt; findSettledOrdersForDay(Pageable pageable) { 55 return settledOrderRepository.findAllByOrderDateBetween(LocalDate.now().atStartOfDay(), LocalDate.now().plusDays(1).atStartOfDay(), pageable); 56 } 57 58 public void reset() { 59 log.info(\u0026#34;Resetting!\u0026#34;); 60 settledOrderRepository.deleteAll(); 61 openOrderRepository.deleteAll(); 62 settlementSummaryRepository.deleteAll(); 63 myConfig.setCache(new HashMap\u0026lt;\u0026gt;()); 64 } 65 66 /** 67 * Different number of buy and sell orders 68 */ 69 public void simulationRandom(int records) { 70 log.info(\u0026#34;Random Simulation for: {}!\u0026#34;, records); 71 Random random = new Random(); 72 for (int i = 0; i \u0026lt; records; i++) { 73 boolean sell = random.nextBoolean(); 74 if (sell) { 75 eventProcessor.simulationRandom(this, SellType.SELL); 76 } else { 77 eventProcessor.simulationRandom(this, SellType.BUY); 78 } 79 } 80 } 81 82 /** 83 * Simulate orders 84 */ 85 public void simulate(int records, SellType sellType) { 86 log.info(\u0026#34;Simulate for: {}!\u0026#34;, records); 87 for (int i = 0; i \u0026lt; records; i++) { 88 eventProcessor.simulate(this, sellType); 89 } 90 } 91} 1package com.demo.project100.service; 2 3import java.time.LocalDateTime; 4import java.util.ArrayList; 5import java.util.List; 6import java.util.Map; 7import java.util.concurrent.BlockingQueue; 8import java.util.concurrent.LinkedBlockingDeque; 9import javax.transaction.Transactional; 10 11import com.demo.project100.domain.OpenOrder; 12import com.demo.project100.domain.SellType; 13import com.demo.project100.domain.SettledOrder; 14import com.demo.project100.domain.SettlementSummary; 15import com.demo.project100.domain.Status; 16import com.demo.project100.pojo.OrderChain; 17import com.demo.project100.pojo.OrderMap; 18import com.demo.project100.repo.OpenOrderRepository; 19import com.demo.project100.repo.SettledOrderRepository; 20import com.demo.project100.repo.SettlementSummaryRepository; 21import lombok.Data; 22import lombok.SneakyThrows; 23import lombok.extern.slf4j.Slf4j; 24import org.springframework.beans.factory.annotation.Autowired; 25 26/** 27 * No need of spring bean annotation, this is injected as a prototype spring bean 28 */ 29@Slf4j 30@Data 31public class ProcessEngine { 32 33 //Unbounded blocking queue, will take as many orders as permitted by memory. 34 private BlockingQueue\u0026lt;OpenOrder\u0026gt; orderQueue = new LinkedBlockingDeque\u0026lt;\u0026gt;(); 35 private volatile boolean running; 36 37 private String ticker; 38 private OrderMap sellMap; 39 private OrderMap buyMap; 40 41 @Autowired 42 private SettledOrderRepository settledOrderRepository; 43 44 @Autowired 45 private SettlementSummaryRepository settlementSummaryRepository; 46 47 @Autowired 48 private OpenOrderRepository openOrderRepository; 49 50 @SneakyThrows 51 public void startProcessing() { 52 //Double check locking to avoid running thread more than once. 53 if (!running) { 54 synchronized (this) { 55 if (!running) { 56 running = true; 57 while (true) { 58 OpenOrder orderItem = orderQueue.take(); 59 log.info(\u0026#34;Processing order {}\u0026#34;, orderItem); 60 build(orderItem); 61 if (orderItem.isSettle()) { 62 //Triggers the matching process to find the relevant match order 63 boolean status = process(orderItem); 64 log.info(\u0026#34;Status of order: {}, {}\u0026#34;, orderItem.getId(), status); 65 } 66 } 67 } 68 } 69 } 70 } 71 72 public ProcessEngine(String ticker) { 73 this.ticker = ticker; 74 sellMap = new OrderMap(true); 75 buyMap = new OrderMap(); 76 } 77 78 public synchronized void reset() { 79 sellMap = new OrderMap(true); 80 buyMap = new OrderMap(); 81 } 82 83 /** 84 * Method is not synchronized as its a single thread execution model. 85 * If its multi-thread then there will be data structure corruption 86 * Single thread of execution per stock ticker to ensure order fulfillment is accurate. 87 */ 88 public void build(OpenOrder orderItem) { 89 Double key = orderItem.getPrice(); 90 if (orderItem.getType().equals(SellType.SELL)) { 91 OrderChain newNode; 92 if (sellMap.getPriceMap().containsKey(key)) { 93 //already exists 94 OrderChain currNode = sellMap.getLastNodeMap().get(key); 95 newNode = new OrderChain(orderItem, currNode, null); 96 currNode.setNext(newNode); 97 sellMap.getLastNodeMap().put(key, newNode); 98 } else { 99 //New node 100 newNode = new OrderChain(orderItem, null, null); 101 sellMap.getLastNodeMap().put(key, newNode); 102 sellMap.getPriceMap().put(key, newNode); 103 } 104 } else { 105 OrderChain newNode; 106 if (buyMap.getPriceMap().containsKey(key)) { 107 //already exists 108 OrderChain currNode = buyMap.getLastNodeMap().get(key); 109 newNode = new OrderChain(orderItem, currNode, null); 110 currNode.setNext(newNode); 111 buyMap.getLastNodeMap().put(key, newNode); 112 } else { 113 //New node 114 newNode = new OrderChain(orderItem, null, null); 115 buyMap.getLastNodeMap().put(key, newNode); 116 buyMap.getPriceMap().put(key, newNode); 117 } 118 } 119 } 120 121 /** 122 * Method is not synchronized as its a single thread execution model. 123 * If its multi-thread then there will be data structure corruption 124 * Single thread of execution per stock ticker to ensure order fulfillment is accurate. 125 */ 126 public boolean process(OpenOrder orderItem) { 127 if (orderItem.getType().equals(SellType.BUY)) { 128 return processOrder(orderItem, sellMap, buyMap, SellType.BUY); 129 } else { 130 return processOrder(orderItem, buyMap, sellMap, SellType.SELL); 131 } 132 } 133 134 private boolean processOrder(OpenOrder orderItem, OrderMap orderMap1, OrderMap orderMap2, SellType sellType) { 135 List\u0026lt;OrderChain\u0026gt; resultOrderChains = new ArrayList\u0026lt;\u0026gt;(); 136 if (orderMap1.getPriceMap().size() \u0026gt; 0) { 137 //Short circuit and link all nodes in one long continuous chain. 138 List\u0026lt;OrderChain\u0026gt; revertList = new ArrayList\u0026lt;\u0026gt;(); 139 140 OrderChain previous = null; 141 for (Map.Entry\u0026lt;Double, OrderChain\u0026gt; entry : orderMap1.getPriceMap().entrySet()) { 142 if (previous != null) { 143 revertList.add(previous); 144 previous.setNext(orderMap1.getPriceMap().get(entry.getKey())); 145 } 146 if (entry.getKey() \u0026lt;= orderItem.getPrice()) { 147 previous = orderMap1.getLastNodeMap().get(entry.getKey()); 148 } 149 } 150 151 //Find if order can be fulfilled 152 resultOrderChains = new CombinationSum().combinationSum(orderMap1.getPriceMap().get(orderItem.getPrice()), orderItem.getQuantity()); 153 154 //Reset the short circuiting. 155 for (OrderChain revertItem : revertList) { 156 revertItem.setNext(null); 157 } 158 } 159 160 if (resultOrderChains.size() \u0026gt; 0) { 161 162 //Clean the Map2 163 OrderChain orderItemNode = orderMap2.getPriceMap().get(orderItem.getPrice()); 164 if (orderItemNode != null) { 165 if (orderItemNode.getPrevious() == null \u0026amp;\u0026amp; orderItemNode.getNext() == null) { 166 //If its the only node then delete the map key 167 orderMap2.getPriceMap().remove(orderItemNode.getItem().getPrice()); 168 orderMap2.getLastNodeMap().remove(orderItemNode.getItem().getPrice()); 169 } else if (orderItemNode.getPrevious() == null \u0026amp;\u0026amp; orderItemNode.getNext() != null) { 170 //If its the first node then point head to next node. 171 OrderChain newHead = orderItemNode.getNext(); 172 newHead.setPrevious(null); 173 orderItemNode.setNext(null); 174 orderMap2.getPriceMap().put(newHead.getItem().getPrice(), newHead); 175 //Set the currNode 176 orderMap2.getLastNodeMap().put(newHead.getItem().getPrice(), newHead); 177 } else if (orderItemNode.getPrevious() != null \u0026amp;\u0026amp; orderItemNode.getNext() != null) { 178 //If node in middle, break both links 179 OrderChain newNext = orderItemNode.getNext(); 180 OrderChain newPrevious = orderItemNode.getPrevious(); 181 newPrevious.setNext(newNext); 182 newNext.setPrevious(newPrevious); 183 orderItemNode.setPrevious(null); 184 orderItemNode.setNext(null); 185 } else if (orderItemNode.getPrevious() != null \u0026amp;\u0026amp; orderItemNode.getNext() == null) { 186 //Last node 187 OrderChain previousNode = orderItemNode.getPrevious(); 188 previousNode.setNext(null); 189 orderItemNode.setPrevious(null); 190 //Set the currNode 191 orderMap2.getLastNodeMap().put(previousNode.getItem().getPrice(), previousNode); 192 } 193 } 194 195 //Break the links \u0026amp; clean Map1 196 for (OrderChain orderChain : resultOrderChains) { 197 if (orderChain.getPrevious() == null \u0026amp;\u0026amp; orderChain.getNext() == null) { 198 //If its the only node then delete the map key 199 orderMap1.getPriceMap().remove(orderChain.getItem().getPrice()); 200 orderMap1.getLastNodeMap().remove(orderChain.getItem().getPrice()); 201 } else if (orderChain.getPrevious() == null \u0026amp;\u0026amp; orderChain.getNext() != null) { 202 //If its the first node then point head to next node. 203 OrderChain newHead = orderChain.getNext(); 204 newHead.setPrevious(null); 205 orderChain.setNext(null); 206 orderMap1.getPriceMap().put(newHead.getItem().getPrice(), newHead); 207 //Set the currNode 208 orderMap1.getLastNodeMap().put(newHead.getItem().getPrice(), newHead); 209 } else if (orderChain.getPrevious() != null \u0026amp;\u0026amp; orderChain.getNext() != null) { 210 //If node in middle, break both links 211 OrderChain newNext = orderChain.getNext(); 212 OrderChain newPrevious = orderChain.getPrevious(); 213 newPrevious.setNext(newNext); 214 newNext.setPrevious(newPrevious); 215 orderChain.setPrevious(null); 216 orderChain.setNext(null); 217 } else if (orderChain.getPrevious() != null \u0026amp;\u0026amp; orderChain.getNext() == null) { 218 //Last node 219 OrderChain previousNode = orderChain.getPrevious(); 220 previousNode.setNext(null); 221 orderChain.setPrevious(null); 222 //Set the currNode 223 orderMap1.getLastNodeMap().put(previousNode.getItem().getPrice(), previousNode); 224 } 225 } 226 227 List\u0026lt;OpenOrder\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); 228 for (OrderChain orderChain : resultOrderChains) { 229 result.add(orderChain.getItem()); 230 } 231 completeOrder(orderItem, result, sellType); 232 return true; 233 } 234 return false; 235 } 236 237 @Transactional 238 public void completeOrder(OpenOrder openOrder, List\u0026lt;OpenOrder\u0026gt; resultOrders, SellType sellType) { 239 List\u0026lt;SettledOrder\u0026gt; completeItems = new ArrayList\u0026lt;\u0026gt;(); 240 List\u0026lt;SettlementSummary\u0026gt; settlementSummaries = new ArrayList\u0026lt;\u0026gt;(); 241 List\u0026lt;Long\u0026gt; deleteOrderIds = new ArrayList\u0026lt;\u0026gt;(); 242 deleteOrderIds.add(openOrder.getId()); 243 244 SettledOrder settledOrder = SettledOrder.builder() 245 .id(openOrder.getId()) 246 .ticker(openOrder.getTicker()) 247 .price(openOrder.getPrice()) 248 .type(openOrder.getType()) 249 .quantity(openOrder.getQuantity()) 250 .orderDate(openOrder.getOrderDate()) 251 .executedDate(LocalDateTime.now()) 252 .status(Status.COMPLETED) 253 .build(); 254 completeItems.add(settledOrder); 255 256 for (OpenOrder item : resultOrders) { 257 deleteOrderIds.add(item.getId()); 258 SettledOrder localOrderItem = SettledOrder.builder() 259 .id(item.getId()) 260 .ticker(item.getTicker()) 261 .price(item.getPrice()) 262 .type(item.getType()) 263 .quantity(item.getQuantity()) 264 .orderDate(item.getOrderDate()) 265 .executedDate(LocalDateTime.now()) 266 .status(Status.COMPLETED) 267 .build(); 268 completeItems.add(localOrderItem); 269 } 270 log.debug(\u0026#34;Found Match {}\u0026#34;, completeItems); 271 272 if (settledOrder.getType().equals(SellType.BUY)) { 273 for (SettledOrder item : completeItems) { 274 if (!item.getType().equals(SellType.BUY)) { 275 //Its ok for seller to get above asking price but not go below the asking price. 276 settlementSummaries.add(SettlementSummary.builder() 277 .buyOrderId(settledOrder.getId()) 278 .sellOrderId(item.getId()) 279 .price(item.getPrice()) 280 .quantity(item.getQuantity()) 281 .sale(item.getPrice() * item.getQuantity()) 282 .build()); 283 } 284 } 285 } else { 286 for (SettledOrder item : completeItems) { 287 if (!item.getType().equals(SellType.SELL)) { 288 //Its ok for buyer to get below asking price but not go above the asking price. 289 settlementSummaries.add(SettlementSummary.builder() 290 .buyOrderId(item.getId()) 291 .sellOrderId(settledOrder.getId()) 292 .price(settledOrder.getPrice()) 293 .quantity(item.getQuantity()) 294 .sale(settledOrder.getPrice() * item.getQuantity()) 295 .build()); 296 } 297 } 298 } 299 settledOrderRepository.saveAll(completeItems); 300 settlementSummaryRepository.saveAll(settlementSummaries); 301 openOrderRepository.deleteAllById(deleteOrderIds); 302 } 303 304} 1package com.demo.project100.service; 2 3import java.util.ArrayList; 4import java.util.Collections; 5import java.util.List; 6 7import com.demo.project100.pojo.OrderChain; 8 9public class CombinationSum { 10 List\u0026lt;OrderChain\u0026gt; result; 11 12 public List\u0026lt;OrderChain\u0026gt; combinationSum(OrderChain orderChain, int target) { 13 this.result = new ArrayList\u0026lt;\u0026gt;(); 14 backtrack(orderChain, new ArrayList\u0026lt;\u0026gt;(), target); 15 return result; 16 } 17 18 private void backtrack(OrderChain orderChain, List\u0026lt;OrderChain\u0026gt; tempList, int remain) { 19 if (remain \u0026lt; 0 || result.size() \u0026gt; 0) { 20 return; 21 } else if (remain == 0) { 22 result = new ArrayList\u0026lt;\u0026gt;(tempList); 23 } else { 24 while (orderChain != null) { 25 tempList.add(orderChain); 26 backtrack(orderChain.getNext(), tempList, remain - orderChain.getItem().getQuantity()); 27 tempList.remove(tempList.size() - 1); 28 if (result.size() \u0026gt; 0) { 29 return; 30 } 31 orderChain = orderChain.getNext(); 32 } 33 } 34 } 35} Rest API Postman collection is provided\nhttps://github.com/gitorko/project100/blob/main/postman/Project100.postman_collection.json\nSetup Project 100 Stock Exchange - Price Time Priority Algorithm\nhttps://gitorko.github.io/stock-exchange/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the backend in dev mode. Postgres DB is needed to run the integration tests during build.\n1./gradlew clean build 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:4200/\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd build/libs 3java -jar project100-1.0.0.jar Open http://localhost:8080/\nDocker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project100:1.0.0 . 3docker images |grep project100 4docker tag project100:1.0.0 gitorko/project100:1.0.0 5docker push gitorko/project100:1.0.0 6docker-compose -f docker/docker-compose.yml up References https://clarity.design/\nhttps://en.wikipedia.org/wiki/Order_matching_system\n","link":"https://gitorko.github.io/post/stock-exchange/","section":"post","tags":["stock-exchange","price-time-algorithm","order-matching"],"title":"Stock Exchange - Price Time Priority Algorithm"},{"body":"","link":"https://gitorko.github.io/tags/stock-exchange/","section":"tags","tags":null,"title":"stock-exchange"},{"body":"","link":"https://gitorko.github.io/categories/stock-exchange/","section":"categories","tags":null,"title":"Stock-Exchange"},{"body":"","link":"https://gitorko.github.io/categories/caching/","section":"categories","tags":null,"title":"Caching"},{"body":"","link":"https://gitorko.github.io/tags/ehcache/","section":"tags","tags":null,"title":"ehcache"},{"body":"Spring Boot integration with EhCache 3\nGithub: https://github.com/gitorko/project98\nEhCache EhCache is an open-source cache library. It supports cache in memory and disk, It supports eviction policies such as LRU, LFU, FIFO. Ehcache uses Last Recently Used (LRU) eviction strategy for memory \u0026amp; Last Frequently Used (LFU) as the eviction strategy for disk store.\nEhcache Caching Tiers - Caching layer can consist of more than one memory area. When using more than one memory area, the areas are arranged as hierarchical tiers. The lowest tier is called the Authority Tier and the other tiers are called the Near Cache. Most frequently used data is stored in the fastest caching tier (top layer)\nTypes of store On-Heap Store - stores cache entries in Java heap memory Off-Heap Store - primary memory (RAM) to store cache entries, cache entries will be moved to the on-heap memory automatically before they can be used. Disk Store - uses a hard disk to store cache entries. SSD type disk would perform better. Clustered Store - stores cache entries on the remote server Types of caching Cache-aside - application consults with the cache. If the data is found, it returns the data directly. In the opposite scenario, it fetches the data from the SoR, stores it into the cache, and then returns Cache-as-SoR (system-of-record) - cache-as-SoR pattern represents SoR reading and writing operations to the cache. It reduces the responsibility of the application. It uses the combination of read and write pattern that includes read-through, write-through, and write-behind. It reduces the difficulty of the application. It allows the cache to solve the thundering-herd problem Read-through - read-through pattern also copies the cache-aside pattern while reading data from the cache Write-through - write-through pattern also copies the cache-aside pattern while writing data in the cache Write-behind / Write-Back - write-back pattern is different form the other three patterns. It modifies the cache entries after a configurable delay. The delay may in seconds, minutes, a day, a week, or for a long time Code 1package com.demo.project98.service; 2 3import com.demo.project98.domain.Country; 4import lombok.extern.slf4j.Slf4j; 5import org.springframework.cache.annotation.CacheEvict; 6import org.springframework.cache.annotation.CachePut; 7import org.springframework.cache.annotation.Cacheable; 8import org.springframework.stereotype.Service; 9 10@Service 11@Slf4j 12public class CountryCache { 13 14 /** 15 * NOTE: Never create a local HashMap to key those values, as it can cause memory overflow without eviction. 16 * 17 * @Cacheable - If key is present returns the object, no update happens. 18 * @CachePut - If key is present it will update and then return object. 19 */ 20 @Cacheable(cacheNames = \u0026#34;countryCache\u0026#34;, key = \u0026#34;#country.code\u0026#34;) 21 public Country get(Country country) { 22 log.info(\u0026#34;Getting country name: {}\u0026#34;, country.getCode()); 23 return country; 24 } 25 26 @CachePut(cacheNames = \u0026#34;countryCache\u0026#34;, key = \u0026#34;#country.code\u0026#34;) 27 public Country put(Country country) { 28 log.info(\u0026#34;Adding country: {}\u0026#34;, country); 29 return country; 30 } 31 32 @CacheEvict(cacheNames = \u0026#34;countryCache\u0026#34;, key = \u0026#34;#country.code\u0026#34;) 33 public void evictSingleCacheValue(Country country) { 34 log.info(\u0026#34;Evicting from cache: {}\u0026#34;, country); 35 } 36 37} 1package com.demo.project98.service; 2 3import com.demo.project98.domain.Country; 4import lombok.extern.slf4j.Slf4j; 5import org.ehcache.event.CacheEvent; 6import org.ehcache.event.CacheEventListener; 7 8@Slf4j 9public class CountryCacheListener implements CacheEventListener\u0026lt;String, Country\u0026gt; { 10 @Override 11 public void onEvent(CacheEvent\u0026lt;? extends String, ? extends Country\u0026gt; event) { 12 log.info(\u0026#34;Event \u0026#39;{}\u0026#39; fired for key \u0026#39;{}\u0026#39; with value {}\u0026#34;, event.getType(), event.getKey(), event.getNewValue()); 13 } 14} 1package com.demo.project98; 2 3import com.demo.project98.domain.Country; 4import com.demo.project98.domain.Customer; 5import com.demo.project98.repo.CustomerRepository; 6import org.springframework.beans.factory.annotation.Autowired; 7import org.springframework.boot.CommandLineRunner; 8import org.springframework.boot.SpringApplication; 9import org.springframework.boot.autoconfigure.SpringBootApplication; 10import org.springframework.cache.Cache; 11import org.springframework.cache.CacheManager; 12import org.springframework.cache.annotation.EnableCaching; 13import org.springframework.context.annotation.Bean; 14 15@SpringBootApplication 16@EnableCaching 17public class Main { 18 19 @Autowired 20 CacheManager cacheManager; 21 22 @Autowired 23 CustomerRepository customerRepository; 24 25 public static void main(String[] args) { 26 SpringApplication.run(Main.class, args); 27 } 28 29 @Bean 30 public CommandLineRunner sendData() { 31 return args -\u0026gt; { 32 Cache cache = cacheManager.getCache(\u0026#34;countryCache\u0026#34;); 33 cache.put(\u0026#34;FR\u0026#34;, new Country(\u0026#34;FR\u0026#34;, \u0026#34;France\u0026#34;, \u0026#34;Paris\u0026#34;)); 34 cache.put(\u0026#34;US\u0026#34;, new Country(\u0026#34;US\u0026#34;, \u0026#34;United State Of America\u0026#34;, \u0026#34;Washington DC\u0026#34;)); 35 cache.put(\u0026#34;IN\u0026#34;, new Country(\u0026#34;IN\u0026#34;, \u0026#34;India\u0026#34;, \u0026#34;Delhi\u0026#34;)); 36 //Since cache is configure to hold only 2 values, one element is auto evicted! 37 38 for (int i = 0; i \u0026lt; 200; i++) { 39 customerRepository.save(Customer.builder().name(\u0026#34;customer_\u0026#34; + i).phone(\u0026#34;phone_\u0026#34; + i).build()); 40 } 41 System.out.println(\u0026#34;Seeded!\u0026#34;); 42 }; 43 } 44 45} 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; 2\u0026lt;config xmlns=\u0026#39;http://www.ehcache.org/v3\u0026#39;\u0026gt; 3 \u0026lt;cache alias=\u0026#34;countryCache\u0026#34;\u0026gt; 4 \u0026lt;key-type\u0026gt;java.lang.String\u0026lt;/key-type\u0026gt; 5 \u0026lt;value-type\u0026gt;com.demo.project98.domain.Country\u0026lt;/value-type\u0026gt; 6 \u0026lt;expiry\u0026gt; 7 \u0026lt;ttl unit=\u0026#34;minutes\u0026#34;\u0026gt;1\u0026lt;/ttl\u0026gt; 8 \u0026lt;/expiry\u0026gt; 9 \u0026lt;listeners\u0026gt; 10 \u0026lt;listener\u0026gt; 11 \u0026lt;class\u0026gt;com.demo.project98.service.CountryCacheListener\u0026lt;/class\u0026gt; 12 \u0026lt;event-firing-mode\u0026gt;ASYNCHRONOUS\u0026lt;/event-firing-mode\u0026gt; 13 \u0026lt;event-ordering-mode\u0026gt;ORDERED\u0026lt;/event-ordering-mode\u0026gt; 14 \u0026lt;events-to-fire-on\u0026gt;CREATED\u0026lt;/events-to-fire-on\u0026gt; 15 \u0026lt;events-to-fire-on\u0026gt;REMOVED\u0026lt;/events-to-fire-on\u0026gt; 16 \u0026lt;events-to-fire-on\u0026gt;EXPIRED\u0026lt;/events-to-fire-on\u0026gt; 17 \u0026lt;/listener\u0026gt; 18 \u0026lt;/listeners\u0026gt; 19 \u0026lt;resources\u0026gt; 20 \u0026lt;heap unit=\u0026#34;entries\u0026#34;\u0026gt;2\u0026lt;/heap\u0026gt; 21 \u0026lt;/resources\u0026gt; 22 \u0026lt;heap-store-settings\u0026gt; 23 \u0026lt;max-object-graph-size\u0026gt;2\u0026lt;/max-object-graph-size\u0026gt; 24 \u0026lt;max-object-size unit=\u0026#34;kB\u0026#34;\u0026gt;5\u0026lt;/max-object-size\u0026gt; 25 \u0026lt;/heap-store-settings\u0026gt; 26 \u0026lt;/cache\u0026gt; 27\u0026lt;/config\u0026gt; Notice the SQL is printed each time a db call happens, if the data is cached no DB call is made.\nSetup Project 98 Spring Boot \u0026amp; Ehcache\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the backend in dev mode.\n1./gradlew clean build 2./gradlew bootRun Postman Import the postman collection to postman\nPostman Collection\nReferences https://www.ehcache.org/documentation/3.0\nhttps://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#io.caching\n","link":"https://gitorko.github.io/post/spring-ehcache/","section":"post","tags":["ehcache"],"title":"Spring Boot - EhCache"},{"body":"","link":"https://gitorko.github.io/categories/design-pattern/","section":"categories","tags":null,"title":"Design-Pattern"},{"body":"","link":"https://gitorko.github.io/tags/enterprise-integration-patterns/","section":"tags","tags":null,"title":"Enterprise-Integration-Patterns"},{"body":"Spring Integration provides a framework to support Enterprise Integration Patterns.\nGithub: https://github.com/gitorko/project97\nSpring Integration Messaging support - All communication is treated as asynchronous messages sent between different channels. This provides loose coupling. Support of external system - Adapters for ftp,file system, rabbitMQ and other external systems. A higher level of abstraction over Spring’s support for remoting, messaging, and scheduling is provided so that developers dont have to write the code to interact with these systems but focus only on the business logic. At any point if the source changes from a file system to an ftp server, the changes required will be very minimal.\nSpring integration provides different ways to configure:\nXML approach to wire Bean annotation approach Java DSL approach (We will focus on DSL approach as its easier to read and maintain) Terminology Message - Wrapper that can wrap a java object, contains payload \u0026amp; headers Message Channel - A conduit for transmitting messages between producers \u0026amp; consumers a. Point-to-Point channel - one consumer should receive each message from a channel b. Publish/Subscribe channel - Will broadcast the message to any subscriber listening to that channel. Message Transform Message Filter Message Router - Determines what channel or channels (if any) should receive the message next Message Bridge - Connects two message channels or channel adapters Splitter Aggregator Handle - ServiceActivator that handle the message. Adapter endpoints - Provide one-way integration. Gateway endpoints - Provide two-way request/response integration. Types of Message Channel: PollableChannel - Store messages, You need to ask for messages by polling i.e call receive method\na. QueueChannel - Pollable, FIFO, Channel has multiple consumers, only one of them will receive, can be made blocking. b. PriorityChannel - Pollable, Messages to be ordered within the channel based on priority, Channel has multiple consumers, only one of them will receive, can be made blocking. c. RendezvousChannel - Pollable, Synchronous, Similar to QueueChannel but zero capacity to buffer, direct-handoff scenario, wherein a sender blocks until consumer invokes the channel’s receive() method\nSubscribableChannel - Event driven, need to subscribe to get the messages. i.e call the subscribe method.\na. Direct Channel - Subscribable, single subscriber, single thread behaviour blocking the sender thread until the message is subscribed. b. Publish Subscribe Channel - Subscribable, many subscribers, all will get the message. c. FixedSubscriberChannel - Subscribable, single subscriber, subscriber that cannot be unsubscribed\nExecutorChannel - Delegates to an instance of TaskExecutor to perform the dispatch\nFluxChannel - Allows reactive consumption\nCode 1package com.demo.project97.integration; 2 3import java.util.Arrays; 4import java.util.List; 5 6import com.demo.project97.domain.Customer; 7import lombok.extern.slf4j.Slf4j; 8import org.springframework.context.annotation.Bean; 9import org.springframework.integration.annotation.BridgeFrom; 10import org.springframework.integration.annotation.IntegrationComponentScan; 11import org.springframework.integration.channel.DirectChannel; 12import org.springframework.integration.channel.PublishSubscribeChannel; 13import org.springframework.integration.channel.QueueChannel; 14import org.springframework.integration.dsl.IntegrationFlow; 15import org.springframework.integration.dsl.IntegrationFlows; 16import org.springframework.integration.dsl.Pollers; 17import org.springframework.integration.store.SimpleMessageStore; 18import org.springframework.messaging.MessageChannel; 19import org.springframework.messaging.PollableChannel; 20import org.springframework.stereotype.Component; 21 22@Slf4j 23@Component 24@IntegrationComponentScan 25public class BasicIntegration { 26 27 @Bean 28 public IntegrationFlow performSplit() { 29 return IntegrationFlows.from(\u0026#34;inputChannel1\u0026#34;) 30 .split() 31 .transform(\u0026#34;Hello \u0026#34;::concat) 32 .handle(message -\u0026gt; { 33 log.info(\u0026#34;performSplit: {}\u0026#34;, message); 34 }) 35 .get(); 36 } 37 38 @Bean 39 public IntegrationFlow performAggregate(SimpleMessageStore messageStore) { 40 return IntegrationFlows.from(\u0026#34;inputChannel2\u0026#34;) 41 .split() 42 .aggregate(a -\u0026gt; 43 a.correlationStrategy(m -\u0026gt; { 44 Customer customer = (Customer) m.getPayload(); 45 return customer.getCity(); 46 }) 47 .releaseStrategy(g -\u0026gt; g.size() \u0026gt; 2) 48 .messageStore(messageStore)) 49 .handle(message -\u0026gt; { 50 log.info(\u0026#34;performAggregate: {}\u0026#34;, message); 51 }) 52 .get(); 53 } 54 55 @Bean 56 public IntegrationFlow performRoute() { 57 return IntegrationFlows.from(\u0026#34;inputChannel3\u0026#34;) 58 .split() 59 .log() 60 .route(Customer.class, m -\u0026gt; m.getCity(), m -\u0026gt; m 61 .channelMapping(\u0026#34;New York\u0026#34;, \u0026#34;channelA\u0026#34;) 62 .channelMapping(\u0026#34;Bangalore\u0026#34;, \u0026#34;channelB\u0026#34;)) 63 .get(); 64 } 65 66 @Bean 67 public IntegrationFlow handleNewYork() { 68 return IntegrationFlows.from(\u0026#34;channelA\u0026#34;) 69 .handle(message -\u0026gt; { 70 log.info(\u0026#34;handleNewYork: {}\u0026#34;, message); 71 }) 72 .get(); 73 } 74 75 @Bean 76 public IntegrationFlow handleBangalore() { 77 return IntegrationFlows.from(\u0026#34;channelB\u0026#34;) 78 .handle(message -\u0026gt; { 79 log.info(\u0026#34;handleBangalore: {}\u0026#34;, message); 80 }) 81 .get(); 82 } 83 84 @Bean 85 public IntegrationFlow performSubFlow(IntegrationFlow subFlowNewYork, IntegrationFlow subFlowBangalore) { 86 return IntegrationFlows.from(\u0026#34;inputChannel4\u0026#34;) 87 .split() 88 .log() 89 .route(Customer.class, m -\u0026gt; m.getCity(), m -\u0026gt; m 90 .subFlowMapping(\u0026#34;New York\u0026#34;, subFlowNewYork) 91 .subFlowMapping(\u0026#34;Bangalore\u0026#34;, subFlowBangalore)) 92 .get(); 93 } 94 95 @Bean 96 public IntegrationFlow subFlowNewYork() { 97 return f -\u0026gt; f.handle(m -\u0026gt; log.info(\u0026#34;subFlowNewYork: {}\u0026#34;, m)); 98 } 99 100 @Bean 101 public IntegrationFlow subFlowBangalore() { 102 return f -\u0026gt; f.handle(m -\u0026gt; log.info(\u0026#34;subFlowBangalore: {}\u0026#34;, m)); 103 } 104 105 @Bean 106 public IntegrationFlow performBridge() { 107 return IntegrationFlows.from(\u0026#34;polledChannel\u0026#34;) 108 .bridge(e -\u0026gt; e.poller(Pollers.fixedDelay(5000).maxMessagesPerPoll(10))) 109 .handle(message -\u0026gt; { 110 log.info(\u0026#34;performBridge: {}\u0026#34;, message); 111 }) 112 .get(); 113 } 114 115 @Bean 116 public IntegrationFlow readInputChannel5_sub1() { 117 return IntegrationFlows.from(\u0026#34;inputChannel5_sub1\u0026#34;) 118 .handle(message -\u0026gt; { 119 log.info(\u0026#34;readInputChannel5_sub1: {}\u0026#34;, message); 120 }) 121 .get(); 122 } 123 124 @Bean 125 public IntegrationFlow readInputChannel5_sub2() { 126 return IntegrationFlows.from(\u0026#34;inputChannel5_sub2\u0026#34;) 127 .handle(message -\u0026gt; { 128 log.info(\u0026#34;readInputChannel5_sub2: {}\u0026#34;, message); 129 }) 130 .get(); 131 } 132 133 @Bean 134 public IntegrationFlow performDynamicBridge() { 135 List\u0026lt;String\u0026gt; cities = Arrays.asList(\u0026#34;New York\u0026#34;, \u0026#34;Bangalore\u0026#34;, \u0026#34;London\u0026#34;); 136 return IntegrationFlows.from(\u0026#34;inputChannel6\u0026#34;) 137 .split() 138 .route(Customer.class, m -\u0026gt; m.getCity(), m -\u0026gt; { 139 cities.forEach(city -\u0026gt; { 140 m.subFlowMapping(city, subFlow -\u0026gt; subFlow.publishSubscribeChannel(c -\u0026gt; { 141 c.ignoreFailures(true); 142 c.subscribe(s -\u0026gt; s.handle(h -\u0026gt; { 143 Customer customer = (Customer) h.getPayload(); 144 customer.setName(customer.getName().toUpperCase()); 145 log.info(\u0026#34;Handle: {}\u0026#34;, customer); 146 })); 147 }).bridge()); 148 }); 149 }) 150 .aggregate() 151 .handle(m -\u0026gt; { 152 log.info(\u0026#34;performDynamicBridge: {}\u0026#34;, m); 153 }) 154 .get(); 155 } 156 157 @Bean 158 public MessageChannel inputChannel1() { 159 return new DirectChannel(); 160 } 161 162 @Bean 163 public MessageChannel inputChannel2() { 164 return new DirectChannel(); 165 } 166 167 @Bean 168 public MessageChannel inputChannel3() { 169 return new DirectChannel(); 170 } 171 172 @Bean 173 public MessageChannel inputChannel4() { 174 return new DirectChannel(); 175 } 176 177 @Bean 178 public MessageChannel inputChannel5() { 179 return new PublishSubscribeChannel(); 180 } 181 182 @Bean 183 @BridgeFrom(\u0026#34;inputChannel5\u0026#34;) 184 public MessageChannel inputChannel5_sub1() { 185 return new DirectChannel(); 186 } 187 188 @Bean 189 @BridgeFrom(\u0026#34;inputChannel5\u0026#34;) 190 public MessageChannel inputChannel5_sub2() { 191 return new DirectChannel(); 192 } 193 194 @Bean 195 public MessageChannel inputChannel6() { 196 return new DirectChannel(); 197 } 198 199 @Bean 200 public PollableChannel polledChannel() { 201 return new QueueChannel(); 202 } 203 204 @Bean 205 public SimpleMessageStore messageStore() { 206 return new SimpleMessageStore(); 207 } 208 209 @Bean 210 public MessageChannel channelA() { 211 return new DirectChannel(); 212 } 213 214 @Bean 215 public MessageChannel channelB() { 216 return new DirectChannel(); 217 } 218} 1package com.demo.project97.integration; 2 3import java.io.File; 4import java.util.List; 5 6import com.demo.project97.domain.Customer; 7import lombok.RequiredArgsConstructor; 8import lombok.extern.slf4j.Slf4j; 9import org.springframework.context.annotation.Bean; 10import org.springframework.integration.channel.DirectChannel; 11import org.springframework.integration.dsl.IntegrationFlow; 12import org.springframework.integration.dsl.IntegrationFlows; 13import org.springframework.integration.file.FileNameGenerator; 14import org.springframework.integration.file.dsl.Files; 15import org.springframework.integration.file.support.FileExistsMode; 16import org.springframework.messaging.Message; 17import org.springframework.messaging.MessageChannel; 18import org.springframework.messaging.support.MessageBuilder; 19import org.springframework.stereotype.Component; 20 21@Component 22@RequiredArgsConstructor 23@Slf4j 24public class FileIntegration { 25 26 private final DataTransformer dataTransformer; 27 28 /** 29 * Detects if new file present in folder, checks every 5 seconds 30 * Write the file name to fileChannel1 31 */ 32 @Bean 33 public IntegrationFlow readFile(MessageChannel fileChannel1) { 34 return IntegrationFlows.from(Files.inboundAdapter(new File(\u0026#34;/tmp/src\u0026#34;)) 35 .autoCreateDirectory(true) 36 .preventDuplicates(true) 37 .patternFilter(\u0026#34;*.txt\u0026#34;) 38 .get(), poller -\u0026gt; poller.poller(pm -\u0026gt; pm.fixedRate(5000))) 39 .transform(dataTransformer, \u0026#34;convertFileToCustomers\u0026#34;) 40 .handle(message -\u0026gt; { 41 List\u0026lt;Customer\u0026gt; customers = (List\u0026lt;Customer\u0026gt;) message.getPayload(); 42 log.info(\u0026#34;Customers: {}\u0026#34;, customers); 43 for (Customer c: customers) { 44 fileChannel1.send(MessageBuilder.withPayload(c).build()); 45 } 46 }) 47 .get(); 48 } 49 50 @Bean 51 public IntegrationFlow readResultChannelWriteToFile() { 52 return IntegrationFlows.from(\u0026#34;fileChannel2\u0026#34;) 53 .transform(dataTransformer, \u0026#34;convertDbRecordToString\u0026#34;) 54 .handle(Files.outboundAdapter(new File(\u0026#34;/tmp/des\u0026#34;)) 55 .autoCreateDirectory(true) 56 .fileNameGenerator(fileNameGenerator()) 57 .fileExistsMode(FileExistsMode.APPEND) 58 .appendNewLine(true) 59 .get()) 60 .get(); 61 } 62 63 private FileNameGenerator fileNameGenerator() { 64 return new FileNameGenerator() { 65 @Override 66 public String generateFileName(Message\u0026lt;?\u0026gt; message) { 67 return message.getHeaders().get(\u0026#34;file-name\u0026#34;).toString().concat(\u0026#34;.txt\u0026#34;); 68 } 69 }; 70 } 71 72 @Bean 73 public MessageChannel fileChannel1() { 74 return new DirectChannel(); 75 } 76 77 @Bean 78 public MessageChannel fileChannel2() { 79 return new DirectChannel(); 80 } 81} 1package com.demo.project97.integration; 2 3import java.time.Duration; 4import java.util.concurrent.TimeUnit; 5import javax.persistence.EntityManagerFactory; 6 7import com.demo.project97.domain.Customer; 8import lombok.RequiredArgsConstructor; 9import lombok.SneakyThrows; 10import lombok.extern.slf4j.Slf4j; 11import org.springframework.context.annotation.Bean; 12import org.springframework.integration.channel.DirectChannel; 13import org.springframework.integration.dsl.IntegrationFlow; 14import org.springframework.integration.dsl.IntegrationFlows; 15import org.springframework.integration.dsl.Pollers; 16import org.springframework.integration.jpa.dsl.Jpa; 17import org.springframework.integration.jpa.support.PersistMode; 18import org.springframework.messaging.MessageChannel; 19import org.springframework.stereotype.Component; 20 21@Component 22@RequiredArgsConstructor 23@Slf4j 24public class JPAIntegration { 25 26 private final EntityManagerFactory entityManager; 27 28 /** 29 * Continuously reads the customer table every 10 seconds 30 */ 31 @Bean 32 public IntegrationFlow readFromDbAdapter() { 33 return IntegrationFlows.from(Jpa.inboundAdapter(this.entityManager) 34 .jpaQuery(\u0026#34;from Customer where phone is not null\u0026#34;) 35 .maxResults(2) 36 .expectSingleResult(false) 37 .entityClass(Customer.class), e -\u0026gt; e.poller(Pollers.fixedDelay(Duration.ofSeconds(10)))) 38 .handle(message -\u0026gt; { 39 log.info(\u0026#34;readFromDbAdapter: {}\u0026#34;, message); 40 }) 41 .get(); 42 } 43 44 /** 45 * Starts the flow when the id for customer is pushed to dbChannel1 46 */ 47 @Bean 48 public IntegrationFlow readFromDbGateway(MessageChannel dbChannel2, MessageChannel dbChannel3) { 49 return IntegrationFlows.from(\u0026#34;dbChannel1\u0026#34;) 50 .handle(Jpa.retrievingGateway(this.entityManager) 51 .jpaQuery(\u0026#34;from Customer c where c.id = :id\u0026#34;) 52 .expectSingleResult(true) 53 .parameterExpression(\u0026#34;id\u0026#34;, \u0026#34;payload[id]\u0026#34;)) 54 .handle(message -\u0026gt; { 55 log.info(\u0026#34;readFromDbGateway: {}\u0026#34;, message); 56 Customer payload = (Customer) message.getPayload(); 57 log.info(\u0026#34;readFromDbGateway Customer: {}\u0026#34;, payload); 58 dbChannel2.send(message); 59 dbChannel3.send(message); 60 }) 61 .get(); 62 } 63 64 /** 65 * Reads dbChannel2 and updates phone number 66 * Doesnt return anything 67 */ 68 @Bean 69 public IntegrationFlow updateDbAdapter() { 70 return IntegrationFlows.from(\u0026#34;dbChannel2\u0026#34;) 71 .handle(Jpa.outboundAdapter(this.entityManager) 72 .jpaQuery(\u0026#34;update Customer c set c.phone = \u0026#39;88888\u0026#39; where c.id =:id\u0026#34;) 73 .parameterExpression(\u0026#34;id\u0026#34;, \u0026#34;payload.id\u0026#34;), e -\u0026gt; e.transactional()) 74 .get(); 75 } 76 77 /** 78 * Reads dbChannel2 and updates phone number 79 * Doesnt return anything 80 */ 81 @Bean 82 public IntegrationFlow updateDbGateway() { 83 return IntegrationFlows.from(\u0026#34;dbChannel3\u0026#34;) 84 .handle(Jpa.updatingGateway(this.entityManager) 85 .jpaQuery(\u0026#34;update Customer c set c.name = CONCAT(\u0026#39;Mr. \u0026#39;,c.name) where c.id =:id\u0026#34;) 86 .parameterExpression(\u0026#34;id\u0026#34;, \u0026#34;payload.id\u0026#34;), e -\u0026gt; e.transactional()) 87 .handle(message -\u0026gt; { 88 log.info(\u0026#34;updateDbGateway: {}\u0026#34;, message); 89 }) 90 .get(); 91 } 92 93 /** 94 * Reads dbChannel3 and deletes the customer 95 */ 96 @Bean 97 public IntegrationFlow deleteRecord() { 98 return IntegrationFlows.from(Jpa.inboundAdapter(this.entityManager) 99 .jpaQuery(\u0026#34;from Customer where name like \u0026#39;Mr.%\u0026#39;\u0026#34;) 100 .maxResults(2) 101 .expectSingleResult(false) 102 .entityClass(Customer.class), e -\u0026gt; e.poller(Pollers.fixedDelay(Duration.ofSeconds(10)))) 103 .handle(Jpa.outboundAdapter(this.entityManager) 104 .persistMode(PersistMode.DELETE) 105 .parameterExpression(\u0026#34;id\u0026#34;, \u0026#34;payload.id\u0026#34;) 106 .entityClass(Customer.class), e -\u0026gt; e.transactional()) 107 .get(); 108 } 109 110 /** 111 * Reads the fileChannel1 and persists all customers 112 */ 113 @Bean 114 public IntegrationFlow readFileChannelWriteToDb() { 115 return IntegrationFlows.from(\u0026#34;fileChannel1\u0026#34;) 116 .handle(Jpa.outboundAdapter(this.entityManager) 117 .entityClass(Customer.class) 118 .persistMode(PersistMode.PERSIST) 119 .get(), e -\u0026gt; e.transactional()) 120 .get(); 121 } 122 123 /** 124 * Reads the fileChannel1 and persists all customers 125 */ 126 @Bean 127 public IntegrationFlow readRabbitmqChannelUpdateDb() { 128 return IntegrationFlows.from(\u0026#34;rabbitmqChannel1\u0026#34;) 129 .handle(Jpa.outboundAdapter(this.entityManager) 130 .jpaQuery(\u0026#34;update Customer c set c.phone = :phone where c.name =:name\u0026#34;) 131 .parameterExpression(\u0026#34;phone\u0026#34;, \u0026#34;payload.phone\u0026#34;) 132 .parameterExpression(\u0026#34;name\u0026#34;, \u0026#34;payload.name\u0026#34;) 133 , e -\u0026gt; e.transactional()) 134 .get(); 135 } 136 137 @SneakyThrows 138 public void sleep(int seconds) { 139 TimeUnit.SECONDS.sleep(seconds); 140 } 141 142 @Bean 143 public MessageChannel dbChannel1() { 144 return new DirectChannel(); 145 } 146 147 @Bean 148 public MessageChannel dbChannel2() { 149 return new DirectChannel(); 150 } 151 152 @Bean 153 public MessageChannel dbChannel3() { 154 return new DirectChannel(); 155 } 156 157 158} 1package com.demo.project97.integration; 2 3import com.demo.project97.domain.Customer; 4import lombok.RequiredArgsConstructor; 5import lombok.extern.slf4j.Slf4j; 6import org.springframework.amqp.AmqpRejectAndDontRequeueException; 7import org.springframework.amqp.core.Queue; 8import org.springframework.amqp.rabbit.connection.ConnectionFactory; 9import org.springframework.context.annotation.Bean; 10import org.springframework.core.AttributeAccessor; 11import org.springframework.integration.amqp.dsl.Amqp; 12import org.springframework.integration.channel.DirectChannel; 13import org.springframework.integration.dsl.IntegrationFlow; 14import org.springframework.integration.dsl.IntegrationFlows; 15import org.springframework.integration.support.ErrorMessageStrategy; 16import org.springframework.messaging.MessageChannel; 17import org.springframework.messaging.support.ErrorMessage; 18import org.springframework.stereotype.Component; 19 20@Component 21@RequiredArgsConstructor 22@Slf4j 23public class RabbitMQIntegration { 24 25 private final ConnectionFactory connectionFactory; 26 private final DataTransformer dataTransformer; 27 28 @Bean 29 public IntegrationFlow readFromQueue(MessageChannel rabbitmqChannel1) { 30 return IntegrationFlows.from(Amqp.inboundAdapter(connectionFactory, \u0026#34;phone-queue\u0026#34;) 31 .errorChannel(\u0026#34;errorChannel\u0026#34;) 32 .errorMessageStrategy(new RabbitMQIntegration.MyFatalExceptionStrategy())) 33 .transform(dataTransformer, \u0026#34;convertQueuePayloadToCustomer\u0026#34;) 34 .handle(message -\u0026gt; { 35 log.info(\u0026#34;readFromQueue: {}\u0026#34;, message); 36 rabbitmqChannel1.send(message); 37 }) 38 .get(); 39 } 40 41 public static class MyFatalExceptionStrategy implements ErrorMessageStrategy { 42 @Override 43 public ErrorMessage buildErrorMessage(Throwable payload, AttributeAccessor attributes) { 44 throw new AmqpRejectAndDontRequeueException(\u0026#34;Error In Message!\u0026#34;); 45 } 46 } 47 48 @Bean 49 public MessageChannel rabbitmqChannel1() { 50 DirectChannel channel = new DirectChannel(); 51 channel.setDatatypes(Customer.class); 52 return channel; 53 } 54 55 @Bean 56 public Queue inboundQueue() { 57 return new Queue(\u0026#34;phone-queue\u0026#34;, true, false, false); 58 } 59} Setup Project97 Spring Integration\nhttps://gitorko.github.io/spring-integration-basics/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS RabbitMQ Run the docker command to start a rabbitmq instance\n1docker run -d --hostname my-rabbit -p 8080:15672 -p 5672:5672 rabbitmq:3-management Login to rabbitmq console http://localhost:8080\n1username:guest 2password: guest Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the code.\n1./gradlew clean build 2./gradlew bootRun Testing To test the function use the postman collection\nhttps://raw.githubusercontent.com/gitorko/project97/main/postman/Project97.postman_collection.json\nReferences https://spring.io/projects/spring-integration\nhttps://www.enterpriseintegrationpatterns.com/\n","link":"https://gitorko.github.io/post/spring-integration-basics/","section":"post","tags":["Enterprise-Integration-Patterns"],"title":"Spring Integration - Basics"},{"body":"","link":"https://gitorko.github.io/categories/spring-integration/","section":"categories","tags":null,"title":"Spring-Integration"},{"body":"","link":"https://gitorko.github.io/tags/graphql/","section":"tags","tags":null,"title":"graphql"},{"body":"","link":"https://gitorko.github.io/categories/graphql/","section":"categories","tags":null,"title":"GraphQL"},{"body":"","link":"https://gitorko.github.io/tags/pagination/","section":"tags","tags":null,"title":"pagination"},{"body":"GraphQL is a query language that offers an alternative model to developing APIs instead of REST, SOAP or gRPC. It allows partial fetch of data, you can use a single endpoint to fetch different formats of data.\nGithub: https://github.com/gitorko/project96\nSpring Boot GraphQL Lets say you have a rest api that returns customer profile, the customer profile has 200+ fields, so a mobile device may not need all the fields, it may need may be 5 fields like name, address etc. Requesting a big payload over wire is costly. So now you end up writing a rest endpoint that returns just the 5 fields. This can become overwhelming when the requirements increase and you end up creating different endpoint for such requirement. In GraphQL you define a schema and let the user/consumer decide which fields they want to fetch.\nBefore GraphQL 1.0 was Released spring had to extend the classes GraphQLMutationResolver, GraphQLQueryResolver. Its no longer required.\nGraphQLMutationResolver -\u0026gt; @MutationMapping\nGraphQLQueryResolver -\u0026gt; @QueryMapping\nThe code uses Extended Scalars for graphql-java to support Date and other type objects in GraphQL The code shows how pagination can be done in GraphQL\nCode 1package com.demo.project96.controller; 2 3import java.util.Optional; 4 5import com.demo.project96.domain.Comment; 6import com.demo.project96.domain.Post; 7import com.demo.project96.domain.PostPage; 8import com.demo.project96.repo.CommentRepository; 9import com.demo.project96.repo.PostRepository; 10import lombok.RequiredArgsConstructor; 11import lombok.extern.slf4j.Slf4j; 12import org.springframework.data.domain.Page; 13import org.springframework.data.domain.PageRequest; 14import org.springframework.graphql.data.method.annotation.Argument; 15import org.springframework.graphql.data.method.annotation.QueryMapping; 16import org.springframework.graphql.data.method.annotation.SchemaMapping; 17import org.springframework.stereotype.Controller; 18 19@Controller 20@Slf4j 21@RequiredArgsConstructor 22public class QueryController { 23 24 private final PostRepository postRepository; 25 private final CommentRepository commentRepository; 26 27 @QueryMapping 28 public Iterable\u0026lt;Post\u0026gt; findAllPosts() { 29 return postRepository.findAll(); 30 } 31 32 @QueryMapping 33 public PostPage findAllPostsPage(@Argument Integer page, @Argument Integer size) { 34 PageRequest pageOf = PageRequest.of(page, size); 35 Page\u0026lt;Post\u0026gt; all = postRepository.findAll(pageOf); 36 return PostPage.builder() 37 .posts(all.getContent()) 38 .totalElements(all.getTotalElements()) 39 .totalPages(all.getTotalPages()) 40 .currentPage(all.getNumber()) 41 .size(all.getNumberOfElements()) 42 .build(); 43 } 44 45 @QueryMapping 46 public Optional\u0026lt;Post\u0026gt; findPostById(@Argument(\u0026#34;id\u0026#34;) Long id) { 47 return postRepository.findById(id); 48 } 49 50 @QueryMapping 51 public Iterable\u0026lt;Comment\u0026gt; findAllComments() { 52 //Will cause N+1 problem 53 //return commentRepository.findAll(); 54 return commentRepository.findAllComments(); 55 } 56 57 @QueryMapping 58 public Optional\u0026lt;Comment\u0026gt; findCommentById(@Argument(\u0026#34;id\u0026#34;) Long id) { 59 return commentRepository.findById(id); 60 } 61 62 @QueryMapping 63 public long countPosts() { 64 return postRepository.count(); 65 } 66 67 @QueryMapping 68 public Iterable\u0026lt;Comment\u0026gt; findCommentsByPostId(@Argument(\u0026#34;postId\u0026#34;) Long postId) { 69 Optional\u0026lt;Post\u0026gt; byId = postRepository.findById(postId); 70 if (byId.isPresent()) { 71 return commentRepository.findByPost(byId.get()); 72 } else { 73 throw new RuntimeException(\u0026#34;Post not found!\u0026#34;); 74 } 75 } 76 77 /** 78 * Functionality will work same without this method as well. 79 * Hibernate Lazy fetch prevents the post entity from being fetched even without this method. 80 * So no unnecessary db call is made if post entity is not needed in the response even without this method. 81 * However if there is any reason why we want to control a single field explicitly we can use this approach and define how that field gets data. 82 * eg: You want to sort the comments 83 */ 84 @SchemaMapping(typeName = \u0026#34;Comment\u0026#34;, field = \u0026#34;post\u0026#34;) 85 public Post getPost(Comment comment) { 86 return postRepository.findById(comment.getPost().getId()).orElseThrow(null); 87 } 88 89} 1package com.demo.project96.controller; 2 3import java.time.ZonedDateTime; 4import java.util.Optional; 5 6import com.demo.project96.domain.Comment; 7import com.demo.project96.domain.Post; 8import com.demo.project96.repo.CommentRepository; 9import com.demo.project96.repo.PostRepository; 10import lombok.RequiredArgsConstructor; 11import lombok.extern.slf4j.Slf4j; 12import org.springframework.graphql.data.method.annotation.Argument; 13import org.springframework.graphql.data.method.annotation.MutationMapping; 14import org.springframework.stereotype.Controller; 15 16@Controller 17@Slf4j 18@RequiredArgsConstructor 19public class MutationController { 20 21 private final PostRepository postRepository; 22 private final CommentRepository commentRepository; 23 24 @MutationMapping 25 public Post createPost(@Argument(\u0026#34;header\u0026#34;) String header, @Argument(\u0026#34;createdBy\u0026#34;) String createdBy) { 26 Post post = new Post(); 27 post.setHeader(header); 28 post.setCreatedBy(createdBy); 29 post.setCreatedDt(ZonedDateTime.now()); 30 post = postRepository.save(post); 31 return post; 32 } 33 34 @MutationMapping 35 public Comment createComment(@Argument(\u0026#34;message\u0026#34;) String message, @Argument(\u0026#34;createdBy\u0026#34;) String createdBy, @Argument(\u0026#34;postId\u0026#34;) Long postId) { 36 Comment comment = new Comment(); 37 Optional\u0026lt;Post\u0026gt; byId = postRepository.findById(postId); 38 if (byId.isPresent()) { 39 Post post = byId.get(); 40 comment.setPost(post); 41 comment.setMessage(message); 42 comment.setCreatedBy(createdBy); 43 comment.setCreatedDt(ZonedDateTime.now()); 44 comment = commentRepository.save(comment); 45 return comment; 46 } else { 47 throw new RuntimeException(\u0026#34;Post not found!\u0026#34;); 48 } 49 50 } 51 52 @MutationMapping 53 public boolean deleteComment(@Argument(\u0026#34;id\u0026#34;) Long id) { 54 commentRepository.deleteById(id); 55 return true; 56 } 57 58 @MutationMapping 59 public Comment updateComment(@Argument(\u0026#34;id\u0026#34;) Long id, @Argument(\u0026#34;message\u0026#34;) String message) { 60 Optional\u0026lt;Comment\u0026gt; byId = commentRepository.findById(id); 61 if (byId.isPresent()) { 62 Comment comment = byId.get(); 63 comment.setMessage(message); 64 commentRepository.save(comment); 65 return comment; 66 } 67 throw new RuntimeException(\u0026#34;Post not found!\u0026#34;); 68 } 69} The schema for GraphQL. The ! simply tells us that you can always expect a value back and will never need to check for null.\n1scalar DateTime 2 3type Post { 4 id: ID! 5 header: String! 6 createdDt: DateTime! 7 createdBy: String! 8} 9 10type PostPage { 11 posts: [Post] 12 totalElements: Int 13 totalPages: Int 14 currentPage: Int 15 size: Int 16} 17 18type Query { 19 findAllPosts: [Post] 20 findPostById(id: ID!): Post 21 countPosts: Int! 22 findAllPostsPage(page: Int = 0, size: Int = 20): PostPage 23} 24 25type Mutation { 26 createPost(header: String!, createdBy: String!): Post 27} GraphQL accepts only one root Query and one root Mutation types, To keep the logic in different files we extend the Query and Mutation types.\n1type Comment { 2 id: ID! 3 message: String! 4 createdBy: String! 5 createdDt: DateTime! 6 post: Post 7} 8 9extend type Query { 10 findAllComments: [Comment]! 11 findCommentById(id: ID!): Comment! 12 findCommentsByPostId(postId: ID!): [Comment] 13} 14 15extend type Mutation { 16 createComment(message: String!, createdBy: String!, postId: ID!): Comment! 17 updateComment(id: ID!, message: String!): Comment! 18 deleteComment(id: ID!): Boolean 19} The key terminologies in GraphQL are\nQuery: Used to read data Mutation: Used to create, update and delete data Subscription: Similar to a query allowing you to fetch data from the server. Subscriptions offer a long-lasting operation that can change their result over time. Setup GraphQL https://gitorko.github.io/spring-graphql/\nSpring Boot \u0026amp; GraphQL\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the backend in dev mode. Postgres DB is needed to run the integration tests during build.\n1./gradlew clean build 2./gradlew bootRun Prod To run as a single jar.\n1./gradlew bootJar 2cd project96/build/libs 3java -jar project96-1.0.0.jar Graph IQL GraphQL comes with a browser client to test the Query. This can be enabled in properties\n1graphql.graphiql.enabled: true Open http://localhost:8080/graphiql\nPostman Import the postman collection to postman\nPostman Collection\nTesting References https://spring.io/projects/spring-graphql\nhttps://github.com/graphql-java/graphql-java-extended-scalars\nhttps://www.graphql-java.com/tutorials/getting-started-with-spring-boot/\nhttps://spring.io/blog/2022/05/19/spring-for-graphql-1-0-release\n","link":"https://gitorko.github.io/post/spring-graphql/","section":"post","tags":["graphql","pagination"],"title":"Spring Boot - GraphQL"},{"body":"Learn morse code in under 10 mins with pictures\nReference Sheet Story A - Alligator, Has a head and a tail [dot dash]\nB - Bear, Goldilocks \u0026amp; 3 bears, Goldilock is big and 3 small bears [dash dot dot dot]\nC - Caterpillar, 2 Caterpillars following each other [dash dot dash dot]\nD - Dog, A big dog chasing 2 small cats [dash dot dot]\nE - Eye, A monster with one eye [dot]\nF - Frog, Two frogs jump in a pond, one comes out [dot dot dash dot]\nG - Giraffe, Giraffe family, dad,mom,baby [dash dash dot]\nH - Horse, 4 Horses in a race [dot dot dot dot]\nI - Ice-Cream, 2 cherries on an ice-cream [dot dot]\nJ - Joker, Joker juggling 3 big hats [dot dash dash dash]\nK - Karate, Looks like a karate belt [dash dot dash]\nL - Lorry, A wheel in the front then body \u0026amp; then two wheels at back [dot dash dot dot]\nM - Monkey, 2 monkeys hanging on 2 branches [dash dash]\nN - Naughty, 1 Naughty caterpillar [dash dot]\nO - Owl, 3 owls sitting on 3 branches [dash dash dash]\nP - Parrot, 2 angry parrots not talking to each other [dot dash dash dot]\nQ - Queen, 2 Queen love the king [dash dash dot dash]\nR - Racing car, Wheel then body \u0026amp; then wheel [dot dash dot]\nS - Snake, 3 snakes in a hole [dot dot dot]\nT - Tea, One cup of tea [dash]\nU - Universe, In another universe 2 cats chase a dog [dot dot dash]\nV - Violin, 3 small violin but only 1 big bow stick [dot dot dot dash]\nW - Whale, Blow hole in head then big body of whale [dot dash dash]\nX - GoGru, Looks like GoGru Ear,Eye,Eye,Ear [dash dot dot dash]\nY - Yoda, Looks like Yoda's light saber hilt,button,light,light [dash dot dash dash]\nZ - Zebra, 2 zebra fall in 2 black holes [dash dash dot dot]\nOnce you know the picture association you will never forget morse code! To get better at it Practice!\n","link":"https://gitorko.github.io/post/learn-morse-code/","section":"post","tags":["morse-code"],"title":"Learn Morse Code"},{"body":"","link":"https://gitorko.github.io/tags/morse-code/","section":"tags","tags":null,"title":"morse-code"},{"body":"","link":"https://gitorko.github.io/categories/morse-code/","section":"categories","tags":null,"title":"Morse-Code"},{"body":"","link":"https://gitorko.github.io/categories/rabbitmq/","section":"categories","tags":null,"title":"RabbitMQ"},{"body":"RabbitMQ Stream implementation.\nStreams implement append-only log, messages are persistent and replicated.\nLarge fan-outs - Deliver the same message to multiple subscribers Replay / Time-travelling - Read messages from any point. Throughput Performance - Log based messaging deliver performance compared to traditional queues. Large logs - Streams are designed to store larger amounts of data in an efficient manner with minimal in-memory overhead. Github: https://github.com/gitorko/project74\nRabbitMQ Stream 1package com.demo.project74; 2 3import java.nio.charset.StandardCharsets; 4import java.time.Duration; 5import java.util.concurrent.CountDownLatch; 6import java.util.concurrent.TimeUnit; 7import java.util.stream.IntStream; 8 9import com.rabbitmq.stream.ByteCapacity; 10import com.rabbitmq.stream.Consumer; 11import com.rabbitmq.stream.Environment; 12import com.rabbitmq.stream.Message; 13import com.rabbitmq.stream.OffsetSpecification; 14import com.rabbitmq.stream.Producer; 15import lombok.SneakyThrows; 16import lombok.extern.slf4j.Slf4j; 17import org.springframework.scheduling.annotation.Async; 18import org.springframework.scheduling.annotation.EnableAsync; 19import org.springframework.stereotype.Service; 20 21@EnableAsync 22@Service 23@Slf4j 24public class AsyncService { 25 26 private static final int MESSAGE_COUNT = 10; 27 private static final String STREAM_NAME = \u0026#34;my-stream\u0026#34;; 28 29 @SneakyThrows 30 @Async 31 public void producer() { 32 log.info(\u0026#34;Starting producer!\u0026#34;); 33 try (Environment environment = Environment.builder().uri(\u0026#34;rabbitmq-stream://localhost:5552\u0026#34;).build()) { 34 environment.streamCreator() 35 .stream(STREAM_NAME) 36 .maxAge(Duration.ofHours(6)) 37 .maxSegmentSizeBytes(ByteCapacity.MB(500)) 38 .create(); 39 Producer producer = environment 40 .producerBuilder() 41 .stream(STREAM_NAME) 42 .build(); 43 44 CountDownLatch confirmLatch = new CountDownLatch(MESSAGE_COUNT); 45 IntStream.range(0, MESSAGE_COUNT).forEach(i -\u0026gt; { 46 Message message = producer.messageBuilder() 47 .properties() 48 .creationTime(System.currentTimeMillis()) 49 .messageId(i) 50 .messageBuilder() 51 .addData((\u0026#34;customer_\u0026#34; + i).getBytes(StandardCharsets.UTF_8)) 52 .build(); 53 producer.send(message, confirmationStatus -\u0026gt; confirmLatch.countDown()); 54 log.info(\u0026#34;Published: {}\u0026#34;, message.getBody()); 55 try { 56 TimeUnit.SECONDS.sleep(1); 57 } catch (InterruptedException e) { 58 throw new RuntimeException(e); 59 } 60 }); 61 boolean done = confirmLatch.await(1, TimeUnit.MINUTES); 62 log.info(\u0026#34;Completed send: {}\u0026#34;, done); 63 //environment.deleteStream(STREAM_NAME); 64 } 65 } 66 67 @SneakyThrows 68 @Async 69 public void consumer() { 70 log.info(\u0026#34;Starting consumer!\u0026#34;); 71 TimeUnit.SECONDS.sleep(2); 72 try (Environment environment = Environment.builder().uri(\u0026#34;rabbitmq-stream://localhost:5552\u0026#34;).build()) { 73 Consumer consumer = environment.consumerBuilder() 74 .stream(STREAM_NAME) 75 .offset(OffsetSpecification.last()) 76 .messageHandler((context, message) -\u0026gt; { 77 log.info(\u0026#34;Consumed: {}\u0026#34;, message.getBody()); 78 }) 79 .build(); 80 //Don\u0026#39;t let the thread end. 81 CountDownLatch finishLatch = new CountDownLatch(1); 82 finishLatch.await(); 83 } 84 } 85} Setup Project 74 RabbitMQ Stream\nhttps://gitorko.github.io/rabbitmq-stream/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS RabbitMQ Run the docker command to start a rabbitmq instance\n1docker run -it --hostname my-rabbit --rm --name my-rabbit -e RABBITMQ_DEFAULT_USER=guest \\ 2-e RABBITMQ_DEFAULT_PASS=guest -e RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=\u0026#39;-rabbitmq_stream advertised_host localhost\u0026#39; \\ 3-p 8080:15672 -p 5672:5672 -p 5552:5552 rabbitmq:3-management 1docker exec my-rabbit rabbitmq-plugins enable rabbitmq_stream Open the rabbitmq console\nhttp://localhost:8080\n1user:guest 2pwd: guest Dev 1./gradlew bootRun References https://www.rabbitmq.com/streams.html\n","link":"https://gitorko.github.io/post/rabbitmq-stream/","section":"post","tags":["streams"],"title":"RabbitMQ Streams"},{"body":"","link":"https://gitorko.github.io/tags/streams/","section":"tags","tags":null,"title":"streams"},{"body":"","link":"https://gitorko.github.io/tags/jobrunr/","section":"tags","tags":null,"title":"jobrunr"},{"body":"","link":"https://gitorko.github.io/categories/jobrunr/","section":"categories","tags":null,"title":"JobRunr"},{"body":"Spring boot integration with JobRunr\nGithub: https://github.com/gitorko/project59\nJobRunr Perform fire-and-forget, delayed, scheduled and recurring jobs inside Java applications using only Java 8 lambda's\nIt lets you schedule background jobs using lambda. The jobs can run on a distributed nodes, more node that join, the work gets distributed. It serializes the lambda as JSON and stores it in db. It also contains an automatic retry feature with an exponential back-off policy for failed jobs. There is also a built-in dashboard that allows you to monitor all jobs. It is self-maintaining, Successful jobs are automatically deleted after a configurable amount of time, so there is no need to perform manual storage cleanup. The job details are stored in db. Code 1package com.demo.project59; 2 3import java.time.LocalDateTime; 4import java.time.format.DateTimeFormatter; 5 6import lombok.extern.slf4j.Slf4j; 7import org.jobrunr.scheduling.JobScheduler; 8import org.springframework.beans.factory.annotation.Autowired; 9import org.springframework.http.ResponseEntity; 10import org.springframework.web.bind.annotation.GetMapping; 11import org.springframework.web.bind.annotation.PathVariable; 12import org.springframework.web.bind.annotation.RestController; 13 14@RestController 15@Slf4j 16public class HomeController { 17 18 @Autowired 19 private JobScheduler jobScheduler; 20 21 @Autowired 22 private AppService appService; 23 24 DateTimeFormatter format = DateTimeFormatter.ofPattern(\u0026#34;ddMMyyyyHHmmss\u0026#34;); 25 26 @GetMapping(\u0026#34;/api/{number}\u0026#34;) 27 public ResponseEntity isPrime(@PathVariable int number) { 28 for (int i = 0; i \u0026lt; number; i++) { 29 String jobName = \u0026#34;job_\u0026#34; + format.format(LocalDateTime.now()); 30 jobScheduler.enqueue(() -\u0026gt; appService.doWork1(jobName)); 31 jobScheduler.enqueue(() -\u0026gt; appService.doWork2(jobName)); 32 } 33 log.info(\u0026#34;Job submitted!\u0026#34;); 34 return ResponseEntity.ok().build(); 35 } 36} 37 1package com.demo.project59; 2 3import lombok.extern.slf4j.Slf4j; 4import org.jobrunr.jobs.annotations.Job; 5import org.springframework.stereotype.Component; 6 7@Component 8@Slf4j 9public class AppService { 10 11 public void doWork1(String job) { 12 log.info(\u0026#34;doWork1: {}\u0026#34;, job); 13 } 14 15 @Job(name = \u0026#34;Work2 job name: %0\u0026#34;, retries = 2) 16 public void doWork2(String job) { 17 log.info(\u0026#34;doWork2: {}\u0026#34;, job); 18 } 19 20 @Job(name = \u0026#34;Cron job name: %0\u0026#34;, retries = 0) 21 public void doWork3(String job) { 22 log.info(\u0026#34;doWork3: {}\u0026#34;, job); 23 } 24} Open dashboard: http://localhost:8000/dashboard/\nSetup Project 59 Spring Boot JobRunr\nhttps://gitorko.github.io/spring-jobrunr/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the code\n1./gradlew clean build 2./gradlew bootRun 1curl --location --request GET \u0026#39;http://localhost:8080/api/500\u0026#39; References https://www.jobrunr.io/en/\n","link":"https://gitorko.github.io/post/spring-jobrunr/","section":"post","tags":["jobrunr"],"title":"Spring Boot - JobRunr"},{"body":"","link":"https://gitorko.github.io/categories/kubernetes/","section":"categories","tags":null,"title":"Kubernetes"},{"body":"","link":"https://gitorko.github.io/tags/rate-limit/","section":"tags","tags":null,"title":"rate-limit"},{"body":"","link":"https://gitorko.github.io/tags/spring/","section":"tags","tags":null,"title":"spring"},{"body":"","link":"https://gitorko.github.io/categories/spring/","section":"categories","tags":null,"title":"Spring"},{"body":"Application deployed on kubernetes, configured with Traefik ingress controller to rate limit.\nGithub: https://github.com/gitorko/project95\nTraefik Traefik is a reverse proxy and load balancer that makes deploying microservices easy.\nWe will deploy the spring rest application along with postgres db on kubernetes instance. Then we will configure Traefik as ingress controller and apply rate limit on it using Traefik Proxy Middleware. We will use docker desktop kubernetes instance.\nRate limiting is a technique for controlling the rate of requests to your application. It can save you from Denial-of-Service (DoS) or resource starvation problems. Without rate limits, a burst of traffic could bring down the whole service making it unavailable for everybody.\nCode 1apiVersion: apps/v1 2kind: Deployment 3metadata: 4 name: project95 5spec: 6 selector: 7 matchLabels: 8 app: project95 9 strategy: 10 rollingUpdate: 11 maxSurge: 1 12 maxUnavailable: 1 13 type: RollingUpdate 14 replicas: 1 15 template: 16 metadata: 17 labels: 18 app: project95 19 spec: 20 containers: 21 - name: project95 22 image: project95:1.0.0 23 imagePullPolicy: IfNotPresent 24 ports: 25 - containerPort: 8080 26 resources: 27 limits: 28 cpu: \u0026#34;1\u0026#34; 29 memory: \u0026#34;500Mi\u0026#34; 30 31--- 32apiVersion: v1 33kind: ConfigMap 34metadata: 35 name: postgres-config 36 labels: 37 app: postgres 38data: 39 POSTGRES_DB: test-db 40 POSTGRES_USER: test 41 POSTGRES_PASSWORD: test@123 42--- 43apiVersion: v1 44kind: PersistentVolume 45metadata: 46 name: postgres-pv-volume 47 labels: 48 type: local 49 app: postgres 50spec: 51 storageClassName: manual 52 capacity: 53 storage: 5Gi 54 accessModes: 55 - ReadWriteMany 56 hostPath: 57 path: \u0026#34;/tmp/data\u0026#34; 58--- 59apiVersion: v1 60kind: PersistentVolumeClaim 61metadata: 62 name: postgres-pv-claim 63 labels: 64 app: postgres 65spec: 66 storageClassName: manual 67 accessModes: 68 - ReadWriteMany 69 resources: 70 requests: 71 storage: 5Gi 72--- 73apiVersion: apps/v1 74kind: Deployment 75metadata: 76 name: db-server 77spec: 78 replicas: 1 79 template: 80 metadata: 81 labels: 82 app: db-server 83 spec: 84 containers: 85 - name: db-server 86 image: postgres:9.6.10 87 imagePullPolicy: \u0026#34;IfNotPresent\u0026#34; 88 ports: 89 - containerPort: 5432 90 envFrom: 91 - configMapRef: 92 name: postgres-config 93 volumeMounts: 94 - mountPath: /var/lib/postgresql/data 95 name: postgredb 96 volumes: 97 - name: postgredb 98 persistentVolumeClaim: 99 claimName: postgres-pv-claim 100 selector: 101 matchLabels: 102 app: db-server 103--- 104apiVersion: v1 105kind: Service 106metadata: 107 name: db-server 108 labels: 109 app: db-server 110spec: 111 type: NodePort 112 ports: 113 - port: 5432 114 selector: 115 app: db-server 116--- 117kind: Service 118apiVersion: v1 119metadata: 120 name: project95 121spec: 122 ports: 123 - port: 8080 124 targetPort: 8080 125 name: http 126 selector: 127 app: project95 128 type: LoadBalancer 1apiVersion: apps/v1 2kind: Deployment 3metadata: 4 name: project95 5 labels: 6 app: project95 7spec: 8 selector: 9 matchLabels: 10 app: project95 11 strategy: 12 rollingUpdate: 13 maxSurge: 1 14 maxUnavailable: 1 15 type: RollingUpdate 16 replicas: 1 17 template: 18 metadata: 19 labels: 20 app: project95 21 spec: 22 containers: 23 - name: project95 24 image: gitorko/project95:1.0.0 25 imagePullPolicy: IfNotPresent 26 ports: 27 - containerPort: 8080 28 resources: 29 limits: 30 cpu: \u0026#34;1\u0026#34; 31 memory: \u0026#34;500Mi\u0026#34; 32 33--- 34apiVersion: v1 35kind: ConfigMap 36metadata: 37 name: postgres-config 38 labels: 39 app: postgres 40data: 41 POSTGRES_DB: test-db 42 POSTGRES_USER: test 43 POSTGRES_PASSWORD: test@123 44--- 45apiVersion: v1 46kind: PersistentVolume 47metadata: 48 name: postgres-pv-volume 49 labels: 50 type: local 51 app: postgres 52spec: 53 storageClassName: manual 54 capacity: 55 storage: 5Gi 56 accessModes: 57 - ReadWriteMany 58 hostPath: 59 path: \u0026#34;/tmp/data\u0026#34; 60--- 61apiVersion: v1 62kind: PersistentVolumeClaim 63metadata: 64 name: postgres-pv-claim 65 labels: 66 app: postgres 67spec: 68 storageClassName: manual 69 accessModes: 70 - ReadWriteMany 71 resources: 72 requests: 73 storage: 5Gi 74--- 75apiVersion: apps/v1 76kind: Deployment 77metadata: 78 name: db-server 79spec: 80 replicas: 1 81 template: 82 metadata: 83 labels: 84 app: db-server 85 spec: 86 containers: 87 - name: db-server 88 image: postgres:9.6.10 89 imagePullPolicy: \u0026#34;IfNotPresent\u0026#34; 90 ports: 91 - containerPort: 5432 92 envFrom: 93 - configMapRef: 94 name: postgres-config 95 volumeMounts: 96 - mountPath: /var/lib/postgresql/data 97 name: postgredb 98 volumes: 99 - name: postgredb 100 persistentVolumeClaim: 101 claimName: postgres-pv-claim 102 selector: 103 matchLabels: 104 app: db-server 105--- 106apiVersion: v1 107kind: Service 108metadata: 109 name: db-server 110 labels: 111 app: db-server 112spec: 113 type: NodePort 114 ports: 115 - port: 5432 116 selector: 117 app: db-server 118--- 119apiVersion: v1 120kind: Service 121metadata: 122 name: project95 123 labels: 124 app: project95 125spec: 126 type: ClusterIP 127 ports: 128 - port: 8080 129 selector: 130 app: project95 131--- 132apiVersion: networking.k8s.io/v1 133kind: Ingress 134metadata: 135 name: my-ingress 136 annotations: 137 kubernetes.io/ingress.class: \u0026#34;traefik\u0026#34; 138spec: 139 rules: 140 - host: localhost.com 141 http: 142 paths: 143 - path: /rest 144 pathType: Prefix 145 backend: 146 service: 147 name: project95 148 port: 149 number: 8080 150--- 1apiVersion: apps/v1 2kind: Deployment 3metadata: 4 name: project95 5 labels: 6 app: project95 7spec: 8 selector: 9 matchLabels: 10 app: project95 11 strategy: 12 rollingUpdate: 13 maxSurge: 1 14 maxUnavailable: 1 15 type: RollingUpdate 16 replicas: 1 17 template: 18 metadata: 19 labels: 20 app: project95 21 spec: 22 containers: 23 - name: project95 24 image: gitorko/project95:1.0.0 25 imagePullPolicy: IfNotPresent 26 ports: 27 - containerPort: 8080 28 resources: 29 limits: 30 cpu: \u0026#34;1\u0026#34; 31 memory: \u0026#34;500Mi\u0026#34; 32 33--- 34apiVersion: v1 35kind: ConfigMap 36metadata: 37 name: postgres-config 38 labels: 39 app: postgres 40data: 41 POSTGRES_DB: test-db 42 POSTGRES_USER: test 43 POSTGRES_PASSWORD: test@123 44--- 45apiVersion: v1 46kind: PersistentVolume 47metadata: 48 name: postgres-pv-volume 49 labels: 50 type: local 51 app: postgres 52spec: 53 storageClassName: manual 54 capacity: 55 storage: 5Gi 56 accessModes: 57 - ReadWriteMany 58 hostPath: 59 path: \u0026#34;/tmp/data\u0026#34; 60--- 61apiVersion: v1 62kind: PersistentVolumeClaim 63metadata: 64 name: postgres-pv-claim 65 labels: 66 app: postgres 67spec: 68 storageClassName: manual 69 accessModes: 70 - ReadWriteMany 71 resources: 72 requests: 73 storage: 5Gi 74--- 75apiVersion: apps/v1 76kind: Deployment 77metadata: 78 name: db-server 79spec: 80 replicas: 1 81 template: 82 metadata: 83 labels: 84 app: db-server 85 spec: 86 containers: 87 - name: db-server 88 image: postgres:9.6.10 89 imagePullPolicy: \u0026#34;IfNotPresent\u0026#34; 90 ports: 91 - containerPort: 5432 92 envFrom: 93 - configMapRef: 94 name: postgres-config 95 volumeMounts: 96 - mountPath: /var/lib/postgresql/data 97 name: postgredb 98 volumes: 99 - name: postgredb 100 persistentVolumeClaim: 101 claimName: postgres-pv-claim 102 selector: 103 matchLabels: 104 app: db-server 105--- 106apiVersion: v1 107kind: Service 108metadata: 109 name: db-server 110 labels: 111 app: db-server 112spec: 113 type: NodePort 114 ports: 115 - port: 5432 116 selector: 117 app: db-server 118--- 119apiVersion: v1 120kind: Service 121metadata: 122 name: project95 123 labels: 124 app: project95 125spec: 126 type: ClusterIP 127 ports: 128 - port: 8080 129 selector: 130 app: project95 131--- 132apiVersion: traefik.containo.us/v1alpha1 133kind: Middleware 134metadata: 135 name: ratelimiter 136spec: 137 rateLimit: 138 average: 3 139 burst: 5 140--- 141apiVersion: traefik.containo.us/v1alpha1 142kind: IngressRoute 143metadata: 144 name: myingressroute 145spec: 146 entryPoints: 147 - web 148 routes: 149 - match: Host(`localhost.com`) \u0026amp;\u0026amp; PathPrefix(`/rest`) 150 kind: Rule 151 services: 152 - kind: Service 153 name: project95 154 port: 8080 155 middlewares: 156 - name: ratelimiter Setup Project 95 Traefik Rate Limit\nhttps://gitorko.github.io/spring-boot-traefik-rate-limit/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4helm version --short 5v3.9.1+ga7c043a 6 7kubectl version --short 8Client Version: v1.24.3 9Kustomize Version: v4.5.4 Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Docker For docker on laptop we cant use localhost as the hostname, so add this entry to the /etc/hosts file.\n1127.0.0.1 localhost.com Build the project and docker image\n1cd project95 2./gradlew bootRun 3./gradlew clean build 4docker build -f docker/Dockerfile --force-rm -t project95:1.0.0 . If you want to deploy via docker compose.\n1docker tag project95:1.0.0 gitorko/project95:1.0.0 2docker push gitorko/project95:1.0.0 3docker-compose -f docker/docker-compose.yml up Traefik Deploy traefik via helm\n1helm install traefik traefik/traefik Traefik comes with the dashboard to visualize the config that is not exposed so run port forward command. If you dont need to visualize the config then you can skip this step as it is not mandatory\n1kubectl port-forward $(kubectl get pods --selector \u0026#34;app.kubernetes.io/name=traefik\u0026#34; --output=name) 9000:9000 Open the dashboard url\nhttp://127.0.0.1:9000/dashboard/\nKubernetes Now deploy the application on kubernetes\nIf you want a plain deployment without traefik, This will deploy the spring boot application along with postgres, run the below command\n1kubectl apply -f docker/deployment.yaml To test the api, run the curl command\n1curl --request GET \u0026#39;http://localhost.com:8080/rest/time\u0026#39; Clean up\n1kubectl delete -f docker/deployment.yaml Kubernetes \u0026amp; Traefik Ingress If you want traefik as the ingress controller, run the below command\n1kubectl apply -f docker/deployment-traefik.yaml To test the api, run the curl command\n1curl --request GET \u0026#39;http://localhost.com/rest/time\u0026#39; Clean up\n1kubectl delete -f docker/deployment-traefik.yaml Kubernetes \u0026amp; Traefik IngressRoute with Rate Limit If you want traefik as the ingress \u0026amp; want to rate limit, run the below command\n1kubectl apply -f docker/deployment-traefik-ratelimit.yaml To test the api, run the curl command\n1curl --request GET \u0026#39;http://localhost.com/rest/time\u0026#39; Clean up\n1kubectl delete -f docker/deployment-traefik-ratelimit.yaml Few command to look at the services\n1kubectl get ingress 2kubectl describe ingress 3 4kubectl get ingressroute 5kubectl describe ingressroute 6 7kubectl get all 8 9k logs -f deployment.apps/project95 --all-containers=true 10 11helm uninstall traefik Testing Deploy the image to kubernetes\nThe dashboard will show the HTTP Routers \u0026amp; the middleware rate limit config\nYou can also look at success rate\nTo test the rate limit functionality open the RateLimit.jmx file in JMeter and run the test\nCreate a user, the data is persisted in the postgres db.\n1curl --request POST \u0026#39;http://localhost.com/rest/customer\u0026#39; \\ 2--header \u0026#39;Content-Type: application/json\u0026#39; \\ 3--data-raw \u0026#39;{ 4 \u0026#34;firstName\u0026#34; : \u0026#34;John\u0026#34;, 5 \u0026#34;lastName\u0026#34; : \u0026#34;Doe\u0026#34;, 6 \u0026#34;city\u0026#34;: \u0026#34;NY\u0026#34; 7}\u0026#39; Get the user\n1curl --request GET \u0026#39;http://localhost.com/rest/customer\u0026#39; References https://traefik.io/\n","link":"https://gitorko.github.io/post/spring-boot-traefik-rate-limit/","section":"post","tags":["spring","traefik","rate-limit"],"title":"Spring Boot - Traefik (Rate Limit)"},{"body":"","link":"https://gitorko.github.io/tags/traefik/","section":"tags","tags":null,"title":"traefik"},{"body":"","link":"https://gitorko.github.io/categories/traefik/","section":"categories","tags":null,"title":"Traefik"},{"body":"","link":"https://gitorko.github.io/categories/clarity/","section":"categories","tags":null,"title":"Clarity"},{"body":"","link":"https://gitorko.github.io/tags/jmeter/","section":"tags","tags":null,"title":"jmeter"},{"body":"","link":"https://gitorko.github.io/tags/redis/","section":"tags","tags":null,"title":"redis"},{"body":"","link":"https://gitorko.github.io/categories/redis/","section":"categories","tags":null,"title":"Redis"},{"body":"","link":"https://gitorko.github.io/tags/sse/","section":"tags","tags":null,"title":"SSE"},{"body":"","link":"https://gitorko.github.io/categories/sse/","section":"categories","tags":null,"title":"SSE"},{"body":"Voting system developed with Spring Boot, Redis and Angular (Clarity) frontend.\nGithub: https://github.com/gitorko/project94\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project94 2cd project94 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nFeatures Users should be able to vote for candidates.\nThe same solution can be extended to the following systems\nmetering - subscription usage, consumption capping \u0026amp; pricing etc rate limiting - Counter with TTL, Token Bucket, Leaky Bucket, Sliding window counter Prevent denial of service (DoS) Traffic shaping Live visitor/user count Like and dislike count Functional Requirements An active/live voting system shows the live count of the votes as they are cast. The running count should be accurate with no race conditions. Storing of votes is not required, objective is just to track live counts. Who voted to which candidate information need not be stored. Only 2 candidates in the voting system, cats vs dogs. The display should show the live count of votes as they are cast without having the user refresh each time. Display must provide UI to vote for candidates, as well as support api based voting. Non-Functional Requirements Latency should be low. System should be highly available. System should scale well when number of users increases Handle concurrent request and counter value consistent. Future The design can further be modified to use write-back cache to write the running counter to the database. This way we avoid loosing the votes in case redis server goes down. Redis supports AOF (append-only file), which copies write commands to disk as they happen, and snapshotting, which takes the data as it exists at one moment in time and writes it to disk The votes can be persisted to the db by using a queuing mechanism. This will persist the who voted for whom information. We use a queue to keep the latency low. As soon as the vote counter is increased the vote object is queued and a consumer service will dequeue the request and persist to the db. Authentication and user tracking can be added. The project can be changed to spring reactor to make use of non blocking framework. Unsubscribe flow needs to be handled when browser is closed Design We will use Redis to count the votes, this will help us scale well. The counter increment needs to be atomic in nature. Redis provides this feature out of the box, where there is less contention among threads when updating atomic long. We will not persist the votes to a database as the objective is to keep an active running counter. Adding a database in the synchronous call introduces latency which prevent scaling the application. The backend and frontend bundle into a single uber jar that can be deployed on many servers there by providing ability to horizontally scale. We will use SSE (server sent events) to stream the voting results to the app. This way the live counter will always be displayed. We will use angular clarity for the UI Redis is an open-source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in data structures, atomic commands, and time-to-live (TTL) capabilities that can be used to power metering use cases. Redis runs on a single thread. Therefore, all of the database updates are serialized, enabling Redis to perform as a lock-free data store. This simplifies the application design as developers don’t need to spend any effort on synchronizing the threads or implementing locking mechanisms for data consistency. Redis stores integers as a base-10 64-bit signed integer. Therefore the maximum limit for an integer is a very large number: 263 – 1 = 9,223,372,036,854,775,807. To understand the problem with a counter on multi-thread environment refer AtomicLong vs LongAdder\nCode 1package com.demo.project94.controller; 2 3import java.util.concurrent.ExecutorService; 4import java.util.concurrent.Executors; 5import java.util.concurrent.TimeUnit; 6 7import lombok.extern.slf4j.Slf4j; 8import org.springframework.beans.factory.annotation.Autowired; 9import org.springframework.data.redis.core.RedisTemplate; 10import org.springframework.http.HttpStatus; 11import org.springframework.http.MediaType; 12import org.springframework.http.ResponseEntity; 13import org.springframework.web.bind.annotation.DeleteMapping; 14import org.springframework.web.bind.annotation.GetMapping; 15import org.springframework.web.bind.annotation.PathVariable; 16import org.springframework.web.bind.annotation.PostMapping; 17import org.springframework.web.bind.annotation.RestController; 18import org.springframework.web.servlet.mvc.method.annotation.SseEmitter; 19 20@RestController 21@Slf4j 22public class HomeController { 23 24 @Autowired 25 private RedisTemplate\u0026lt;String, Long\u0026gt; redisTemplate; 26 27 private ExecutorService executor = Executors.newCachedThreadPool(); 28 29 @PostMapping(value = \u0026#34;/api/vote/{id}\u0026#34;) 30 public Long vote(@PathVariable String id) { 31 log.info(\u0026#34;voting for {}\u0026#34;, id); 32 return redisTemplate.opsForValue().increment(id); 33 } 34 35 @DeleteMapping(value = \u0026#34;/api/vote/{id}\u0026#34;) 36 public void resetVote(@PathVariable String id) { 37 redisTemplate.opsForValue().getAndDelete(id); 38 } 39 40 @GetMapping(value = \u0026#34;/api/votes\u0026#34;, produces = MediaType.TEXT_EVENT_STREAM_VALUE) 41 public ResponseEntity\u0026lt;SseEmitter\u0026gt; getVotes() { 42 SseEmitter emitter = new SseEmitter(15000L); 43 executor.execute(() -\u0026gt; { 44 try { 45 int id = 0; 46 while (true) { 47 SseEmitter.SseEventBuilder event = SseEmitter.event() 48 .data(\u0026#34;cat: \u0026#34; + redisTemplate.opsForValue().get(\u0026#34;cat\u0026#34;) + \u0026#34;,\u0026#34; + 49 \u0026#34;dog: \u0026#34; + redisTemplate.opsForValue().get(\u0026#34;dog\u0026#34;)) 50 .id(String.valueOf(id++)); 51 emitter.send(event); 52 TimeUnit.SECONDS.sleep(2); 53 } 54 } catch (Exception ex) { 55 emitter.completeWithError(ex); 56 } 57 }); 58 return new ResponseEntity(emitter, HttpStatus.OK); 59 } 60} 1package com.demo.project94.config; 2 3import org.springframework.context.annotation.Bean; 4import org.springframework.context.annotation.Configuration; 5import org.springframework.data.redis.connection.RedisConnectionFactory; 6import org.springframework.data.redis.core.RedisTemplate; 7import org.springframework.data.redis.serializer.StringRedisSerializer; 8 9@Configuration 10public class RedisConfiguration { 11 12 @Bean 13 public RedisTemplate\u0026lt;?, ?\u0026gt; redisTemplate(RedisConnectionFactory connectionFactory) { 14 RedisTemplate\u0026lt;?, ?\u0026gt; template = new RedisTemplate\u0026lt;\u0026gt;(); 15 template.setConnectionFactory(connectionFactory); 16 template.setDefaultSerializer(new StringRedisSerializer()); 17 return template; 18 } 19 20} Setup Project 94 Voting System\nhttps://gitorko.github.io/voting-system/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Redis 1docker run --name my-redis -p 6379:6379 -d redis redis-server --requirepass \u0026#34;password\u0026#34; Dev To run the backend in dev mode. Postgres DB is needed to run the integration tests during build.\n1./gradlew clean build 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:4200/\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd build/libs 3java -jar project94-1.0.0.jar Open http://localhost:8080/\nDocker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project94:1.0.0 . 3docker images |grep project94 4docker tag project94:1.0.0 gitorko/project94:1.0.0 5docker push gitorko/project94:1.0.0 6docker-compose -f docker/docker-compose.yml up Testing To reset the votes\n1curl --request DELETE \u0026#39;http://localhost:8080/api/vote/dog\u0026#39; 2curl --request DELETE \u0026#39;http://localhost:8080/api/vote/cat\u0026#39; To vote\n1curl --request POST \u0026#39;http://localhost:8080/api/vote/cat\u0026#39; 2curl --request POST \u0026#39;http://localhost:8080/api/vote/cat\u0026#39; JMeter Open the jmx file with Jmeter. Run the test that simulate a 10K concurrent votes and check the throughput.\nVoting System JMX\nReferences https://jmeter.apache.org/\nhttps://www.infoworld.com/article/3230455/how-to-use-redis-for-real-time-metering-applications.html\nhttps://www.infoworld.com/article/3230455/how-to-use-redis-for-real-time-metering-applications.html?page=2\nhttps://redis.io/\n","link":"https://gitorko.github.io/post/voting-system/","section":"post","tags":["jmeter","redis","SSE"],"title":"Voting System"},{"body":"Few puzzles in java, to test the fundamentals\nPuzzles Puzzle: 1 (pass by value vs pass by ref) What is the output of the program?\n1package com.demo.basics.puzzle._001_passbyvalue; 2 3import org.junit.jupiter.api.Test; 4 5public class PassByPuzzle { 6 7 @Test 8 public void test() { 9 Employee emp = new Employee(\u0026#34;Dan\u0026#34;); 10 modify1(emp); 11 System.out.println(emp.name); 12 modify2(emp); 13 System.out.println(emp.name); 14 } 15 16 private void modify1(Employee emp) { 17 emp = new Employee(\u0026#34;John\u0026#34;); 18 } 19 20 private void modify2(Employee emp) { 21 emp.name = \u0026#34;Jack\u0026#34;; 22 } 23 24 class Employee { 25 String name; 26 27 public Employee(String name) { 28 this.name = name; 29 } 30 } 31} Solution\nJava always does pass by value. In the case of reference they are still passed by value but since they point to same memory location they update the same object.\nPuzzle: 2 (finally block) What is the output of the program?\n1package com.demo.basics.puzzle._002_exception; 2 3import org.junit.jupiter.api.Test; 4 5public class ExceptionPuzzle { 6 7 @Test 8 public void test() { 9 String name = getName(); 10 System.out.println(name); 11 } 12 13 private String getName() { 14 try { 15 throw new Exception(\u0026#34;ERROR\u0026#34;); 16 } finally { 17 return \u0026#34;OK\u0026#34;; 18 } 19 } 20} Solution\nThe finally block can still return a value if exception is thrown.\nPuzzle: 3 (static variable vs instance variable) What is the output of the program?\n1package com.demo.basics.puzzle._003_static; 2 3import org.junit.jupiter.api.Test; 4 5public class StaticPuzzle { 6 7 @Test 8 public void test() { 9 Employee employee1 = new Employee(\u0026#34;Dan\u0026#34;, \u0026#34;ABC\u0026#34;); 10 Employee employee2 = new Employee(\u0026#34;John\u0026#34;, \u0026#34;DEF\u0026#34;); 11 System.out.println(employee1.getName() + \u0026#34;, \u0026#34; + employee1.getCompany()); 12 System.out.println(employee2.getName() + \u0026#34;, \u0026#34; + employee2.getCompany()); 13 } 14 15} 16class Employee { 17 String name; 18 static String company; 19 20 public Employee(String name, String company) { 21 this.name = name; 22 Employee.company = company; 23 } 24 25 public String getName() { 26 return name; 27 } 28 29 public String getCompany() { 30 return company; 31 } 32 33} Solution\nThe static variables are common to all instances, so instance variables should not be static.\nPuzzle: 4 (equals \u0026amp; hashcode) What is the output of the program?\n1package com.demo.basics.puzzle._004_hashcode; 2 3import java.util.HashSet; 4import java.util.Set; 5 6import org.junit.jupiter.api.Test; 7 8public class ObjectPuzzle { 9 10 @Test 11 public void test() { 12 Set\u0026lt;Person\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); 13 Person p1 = new Person(\u0026#34;Jack\u0026#34;, 34); 14 Person p2 = new Person(\u0026#34;Jack\u0026#34;, 34); 15 set.add(p1); 16 set.add(p2); 17 System.out.println(set.size()); 18 } 19 20 class Person { 21 public String name; 22 public Integer age; 23 24 public Person(String name, Integer age) { 25 this.name = name; 26 this.age = age; 27 } 28 } 29} Solution\nHow 2 object are same is determined only if you override the equals and hashcode method. Set ensured that unique elements are stored but how does the set know that both these objects are same? That's why you need to override equals and hashcode. As a follow up you can read why hashcode and equals method need to be overridden together. What happens if you dont do them together?\nPuzzle: 5 (Immutable class) Is the class immutable?\n1package com.demo.basics.puzzle._005_immutable; 2 3import java.util.Date; 4import java.util.HashMap; 5import java.util.Map; 6 7import org.junit.jupiter.api.Test; 8 9public class ImmutablePuzzle { 10 11 @Test 12 public void test() { 13 Map\u0026lt;String, String\u0026gt; props = new HashMap\u0026lt;\u0026gt;(); 14 props.put(\u0026#34;city\u0026#34;, \u0026#34;london\u0026#34;); 15 Person p1 = new Person(\u0026#34;Jack\u0026#34;, 34, new Date(), props); 16 System.out.println(p1); 17 p1.getDob().setTime(123); 18 p1.getProps().put(\u0026#34;city\u0026#34;, \u0026#34;bangalore\u0026#34;); 19 System.out.println(p1); 20 } 21 22 final class Person { 23 private final String name; 24 private final Integer age; 25 private final Date dob; 26 private final Map\u0026lt;String, String\u0026gt; props; 27 28 public Person(String name, Integer age, Date dob, Map\u0026lt;String, String\u0026gt; props) { 29 this.name = name; 30 this.age = age; 31 this.dob = dob; 32 this.props = props; 33 } 34 35 public String getName() { 36 return name; 37 } 38 39 public Integer getAge() { 40 return age; 41 } 42 43 public Date getDob() { 44 return dob; 45 } 46 47 public Map\u0026lt;String, String\u0026gt; getProps() { 48 return props; 49 } 50 51 @Override 52 public String toString() { 53 return \u0026#34;Person{\u0026#34; + 54 \u0026#34;name=\u0026#39;\u0026#34; + name + \u0026#39;\\\u0026#39;\u0026#39; + 55 \u0026#34;, age=\u0026#34; + age + 56 \u0026#34;, dob=\u0026#34; + dob + 57 \u0026#34;, props=\u0026#34; + props + 58 \u0026#39;}\u0026#39;; 59 } 60 } 61} Solution\nClass is not immutable, have to clone both hashmap and date to avoid modification.\nMake class final to avoid extending it. Remove setter method Make variables final so that they can be init only via constructor. Defensive copy of any variables that return reference objects. Deep copy vs shallow copy difference is important here. Reflection can still break immutability. Puzzle: 6 (string pool vs heap) What is the output of the program?\n1package com.demo.basics.puzzle._006_datatype; 2 3import org.junit.jupiter.api.Test; 4 5public class DataTypePuzzle { 6 7 @Test 8 public void test1() { 9 String name1 = \u0026#34;Jack\u0026#34;; 10 String name2 = new String(\u0026#34;Jack\u0026#34;); 11 System.out.println(name1 == name2); 12 System.out.println(name2.equals(name1)); 13 } 14 15 @Test 16 public void test2() { 17 long num1 = 5l; 18 Long num2 = Long.valueOf(5); 19 System.out.println(num1 == num2); 20 System.out.println(num2.equals(num1)); 21 } 22 23 @Test 24 public void test3() { 25 String name1 = new String(\u0026#34;Jack\u0026#34;); 26 String name2 = name1.intern(); 27 System.out.println(name1 == name2); 28 System.out.println(name2.equals(name1)); 29 } 30 31} Solution\nThe String pool holds the strings, using new String() creates the string in heap. The difference between == and .equals() where the first checks the address and the second checks the value. To move an element from heap to string pool we use intern. As a follow up to this, why we shouldn't store/use password as string in java instead we should store password as char array? Because string pool objects will remain in memory longer than heap objects. if you create a password in string the string pool will not GC it after the function is done. So the password can remain for a long time. If someone gets a heap dump they can look at the passwords. Hence better to store in char so that object is GC after it goes out of scope.\nPuzzle: 7 (memory leak) What is the output of the program?\n1package com.demo.basics.puzzle._007_map; 2 3import java.util.HashMap; 4import java.util.Map; 5import java.util.Objects; 6 7import org.junit.jupiter.api.Test; 8 9public class MapPuzzle { 10 11 @Test 12 public void test() { 13 Map\u0026lt;Employee, Boolean\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); 14 Employee e1 = new Employee(\u0026#34;Jack\u0026#34;, 25); 15 map.put(e1, true); 16 e1.name = \u0026#34;Rose\u0026#34;; 17 Employee e2 = new Employee(\u0026#34;John\u0026#34;, 28); 18 map.put(e2, true); 19 20 Employee john = new Employee(\u0026#34;John\u0026#34;, 28); 21 Employee jack = new Employee(\u0026#34;Rose\u0026#34;, 25); 22 Employee rose = new Employee(\u0026#34;Jack\u0026#34;, 25); 23 24 System.out.println(map.size()); 25 System.out.println(map.get(john)); 26 System.out.println(map.get(jack)); 27 System.out.println(map.get(rose)); 28 } 29 30 class Employee { 31 public String name; 32 public Integer age; 33 34 public Employee(String name, Integer age) { 35 this.name = name; 36 this.age = age; 37 } 38 39 @Override 40 public boolean equals(Object o) { 41 if (this == o) return true; 42 if (o == null || getClass() != o.getClass()) return false; 43 Employee employee = (Employee) o; 44 return name.equals(employee.name) \u0026amp;\u0026amp; age.equals(employee.age); 45 } 46 47 @Override 48 public int hashCode() { 49 return Objects.hash(name, age); 50 } 51 } 52} Solution\nJava has automatic memory management in terms of garbage collection unlike c/c++, hence ideally it means that there should be no memory leak, logic being garbage collector always identifies the objects that are not used and garbage collected. The puzzle above is a clear example of a memory leak in Java. The key of a Map has to be immutable, this is one of the hard requirements for a map. If you see someone using an object as key without equals/hashcode you raise a red flag. If the object is not immutable and used as a key in map you raise a red flag.\nHashmap is a array with each node of array pointing to a linkedlist. Jack was put on the hashmap table, but the value was changed to Rose. Rose hashcode will never point to the bucket of Jack. Jack hashcode will point to the bucket where Rose is present but then when it reaches that node it will again check if objects are same, in this case its not, so it will return null. So you will never be able to get jack. This is an example of memory leak in java. If it happens for many elements then jvm will crash. Garbage collector cant clean it because its still part of the map, but no one can reach it.\nPuzzle: 8 (ThreadLocal) What is the output of the program?\n1package com.demo.basics.puzzle._008_threadlocal; 2 3import java.text.ParseException; 4import java.text.SimpleDateFormat; 5import java.util.Arrays; 6import java.util.Date; 7import java.util.List; 8import java.util.concurrent.CountDownLatch; 9import java.util.concurrent.ExecutorService; 10import java.util.concurrent.Executors; 11 12import org.junit.jupiter.api.Test; 13 14public class ThreadPuzzle { 15 16 SimpleDateFormat df = new SimpleDateFormat(\u0026#34;dd/MM/yyyy\u0026#34;); 17 18 @Test 19 public void test() { 20 List\u0026lt;String\u0026gt; joinDates = Arrays.asList(\u0026#34;01/01/2015\u0026#34;, 21 \u0026#34;01/01/2016\u0026#34;, 22 \u0026#34;01/01/2017\u0026#34;, 23 \u0026#34;01/01/2018\u0026#34;, 24 \u0026#34;01/01/2019\u0026#34; 25 ); 26 CountDownLatch latch = new CountDownLatch(joinDates.size()); 27 ExecutorService executor = Executors.newCachedThreadPool(); 28 for (String doj : joinDates) { 29 executor.execute(() -\u0026gt; { 30 try { 31 Date dojDt = df.parse(doj); 32 System.out.println(\u0026#34;Saving : \u0026#34; + dojDt); 33 } catch (ParseException e) { 34 //e.printStackTrace(); 35 } finally { 36 latch.countDown(); 37 } 38 }); 39 } 40 try { 41 latch.await(); 42 } catch (InterruptedException e) { 43 e.printStackTrace(); 44 } 45 } 46} Solution\nThe program will work sometimes and will fail sometimes. Reason is SimpleDateFormat is not thread safe. The same object is sent to all threads and even though it looks like they are using SimpleDateFormat to just parse, internally SimpleDateFormat does few operation that are not thread safe. So now you might think i will pass a new SimpleDateFormat to each thread. However this is a costly object that will increase memory. This is where ThreadLocal comes into picture, Threadlocal will keep a copy of the object specific to that thread.\nWhat is the difference between copy of SimpleDateFormat vs using new SimpleDateFormat() each time? Copy objects will be == number of threads new objects will be \u0026gt; number of threads. So if you have 10K dates, you will end up creating 10k new objects if you do new() With ThreadLocal you will at max have 5 SimpleDateFormat objects if the thread pool is of size 5.\nThis is the advantage of using ThreadLocal.\nPuzzle: 9 (AtomicLong vs LongAdder) What is the output of the program?\n1package com.demo.basics.puzzle._009_counter; 2 3import java.util.ArrayList; 4import java.util.List; 5import java.util.concurrent.Callable; 6import java.util.concurrent.ExecutorService; 7import java.util.concurrent.Executors; 8import java.util.concurrent.TimeUnit; 9 10import org.junit.jupiter.api.Test; 11 12public class CounterPuzzle { 13 14 @Test 15 public void test() throws InterruptedException { 16 Job job = new Job(); 17 job.runJob(); 18 System.out.println(job.counter); 19 } 20 21 class Job { 22 long counter = 0l; 23 24 public void runJob() throws InterruptedException { 25 ExecutorService executor = Executors.newCachedThreadPool(); 26 List\u0026lt;Callable\u0026lt;Void\u0026gt;\u0026gt; tasks = new ArrayList\u0026lt;\u0026gt;(); 27 for (int i = 0; i \u0026lt; 250; i++) { 28 tasks.add(() -\u0026gt; { 29 counter = counter + 1; 30 return null; 31 }); 32 } 33 executor.invokeAll(tasks, 5, TimeUnit.SECONDS); 34 executor.shutdown(); 35 } 36 } 37} Solution\nThere are 2 problem in the code above. Each thread is updating counter without syncronization block/lock, so what value the thread read and what value it wrote back is not guaranteed. Your first thought might be to make the variable volatile so that copy of counter is kept in main memory and not thread memory. However if every thread is reading and writing at different times even volatile wont help. So you might think of putting a syncronization block but that will impact performance. So using a AtomicLong is a good approach here. It guarantees that the CAS (Compare and Swap) operation is atomic and hence counter will be correct. There is another hidden problem that is long + 1 is not a single operation. integer + 1 is a single operation, but long + 1 is not a single operation even within jvm. So this can lead to race condition. Long + 1 takes 2 operation in JVM to add. The AtomicLong solves the problem but again is not optimal as it can lead to contention when there are lot of requests. This is when you use LongAdder which also guarantees count is 250 but the way it does it is different. LongAdder maintains an array of counters, each thread updates a different element in the array with the count +1 and when you finally call sum, it adds the array. This means there is no contention because each thread is writing to a different block.\nPuzzle: 10 (volatile vs AtomicBoolean) What is the output of the program?\n1package com.demo.basics.puzzle._010_volatile; 2 3import java.time.Duration; 4import java.util.concurrent.TimeUnit; 5 6import org.junit.jupiter.api.Assertions; 7import org.junit.jupiter.api.Test; 8 9public class VolatilePuzzle { 10 11 private boolean sayHello = false; 12 13 @Test 14 public void test() { 15 Assertions.assertTimeoutPreemptively(Duration.ofSeconds(3), () -\u0026gt; { 16 //sayHello(); 17 }); 18 } 19 20 public void sayHello() throws InterruptedException { 21 Thread thread = new Thread(() -\u0026gt; { 22 while (!sayHello) { 23 } 24 System.out.println(\u0026#34;Hello World!\u0026#34;); 25 while (sayHello) { 26 } 27 System.out.println(\u0026#34;Good Bye!\u0026#34;); 28 }); 29 thread.start(); 30 TimeUnit.SECONDS.sleep(1); 31 sayHello = true; 32 TimeUnit.SECONDS.sleep(1); 33 sayHello = false; 34 thread.join(); 35 } 36} Solution\nThe puzzle explains the concept of thread memory cache. When you call a thread it creates a thread stack that maintains a copy of the global variable. If the variable changes within the thread the changes are flushed, however if the variable changes outside the changes will not be synchronised immediately. Thread can continue to use the local copy of the variable not knowing that it has already changed. In the puzzle above even though we are change the boolean, the thread doesnt know the boolean changed in the main thread so it continues to refer to its local copy in cache. How to prevent the thread from maintaining a local copy of the variable cache and always refer to global variable? You can use volatile or AtomicBoolean\nPuzzle: 11 (instance lock vs class lock) What is the output of the program?\n1package com.demo.basics.puzzle._011_instanceclasslock; 2 3import java.util.concurrent.ExecutorService; 4import java.util.concurrent.Executors; 5import java.util.concurrent.TimeUnit; 6 7import org.junit.jupiter.api.Test; 8 9public class InstanceClassLockPuzzle { 10 11 @Test 12 public void test() throws InterruptedException { 13 Greet greet = new Greet(); 14 ExecutorService executor = Executors.newCachedThreadPool(); 15 executor.execute(() -\u0026gt; { 16 greet.task1(); 17 }); 18 TimeUnit.SECONDS.sleep(2); 19 executor.execute(() -\u0026gt; { 20 greet.task2(); 21 }); 22 executor.execute(() -\u0026gt; { 23 greet.task2(); 24 }); 25 executor.shutdown(); 26 executor.awaitTermination(10, TimeUnit.SECONDS); 27 } 28 29 class Greet { 30 31 public void task1() { 32 synchronized (Greet.class) { 33 System.out.println(\u0026#34;task1 class lock acquired!\u0026#34;); 34 while (true) ; 35 } 36 } 37 38 public void task2() { 39 synchronized (this) { 40 System.out.println(Thread.currentThread().getName() + \u0026#34; task2 instance lock acquired!\u0026#34;); 41 try { 42 TimeUnit.SECONDS.sleep(2); 43 } catch (InterruptedException e) { 44 e.printStackTrace(); 45 } 46 System.out.println(Thread.currentThread().getName() + \u0026#34; task2 completed\u0026#34;); 47 } 48 } 49 } 50} 51 52 Solution\nThere are 2 types of locks instance lock and class lock.\nPuzzle: 13 (Double check locking) What is the problem with this program?\n1package com.demo.basics.puzzle._013_doublechecklock; 2 3import org.junit.jupiter.api.Test; 4 5public class CheckLockingPuzzle { 6 7 @Test 8 public void test() { 9 CheckLockingPuzzle.getInstance().greet(); 10 } 11 12 private static volatile CheckLockingPuzzle instance; 13 14 private CheckLockingPuzzle() { 15 } 16 17 private static CheckLockingPuzzle getInstance() { 18 synchronized (CheckLockingPuzzle.class) { 19 if (instance == null) { 20 instance = new CheckLockingPuzzle(); 21 } 22 } 23 return instance; 24 } 25 26 public void greet() { 27 System.out.println(\u0026#34;Hello World!\u0026#34;); 28 } 29} Solution\nIntroduces the concept of double check locking, where each thread accessing the syncronized block is a costly operation, hence doing a null check before and after the syncronization improves performance.\nPuzzle: 14 (Race Condition) What is the problem with this program?\n1package com.demo.basics.puzzle._014_racecondition; 2 3import java.util.ArrayList; 4import java.util.HashMap; 5import java.util.List; 6import java.util.Map; 7import java.util.concurrent.Callable; 8import java.util.concurrent.ExecutorService; 9import java.util.concurrent.Executors; 10import java.util.concurrent.TimeUnit; 11 12import org.junit.jupiter.api.Test; 13 14public class RacePuzzle { 15 16 Map\u0026lt;String, String\u0026gt; bookMap = new HashMap\u0026lt;\u0026gt;(); 17 18 @Test 19 public void test() throws InterruptedException { 20 ExecutorService executor = Executors.newCachedThreadPool(); 21 List\u0026lt;Callable\u0026lt;Void\u0026gt;\u0026gt; tasks = new ArrayList\u0026lt;\u0026gt;(); 22 tasks.add(() -\u0026gt; { 23 if (!bookMap.containsKey(\u0026#34;book1\u0026#34;)) { 24 bookMap.put(\u0026#34;book1\u0026#34;, \u0026#34;user3\u0026#34;); 25 } 26 return null; 27 }); 28 tasks.add(() -\u0026gt; { 29 if (!bookMap.containsKey(\u0026#34;book1\u0026#34;)) { 30 bookMap.put(\u0026#34;book1\u0026#34;, \u0026#34;user5\u0026#34;); 31 } 32 return null; 33 }); 34 executor.invokeAll(tasks, 5, TimeUnit.SECONDS); 35 System.out.println(bookMap.get(\u0026#34;book1\u0026#34;)); 36 } 37} Solution\nRace condition, two threads can try to update at the same time leading to data corruption. Using the atomic putIfAbsent should fix it.\n","link":"https://gitorko.github.io/post/java-puzzles/","section":"post","tags":["java-puzzles"],"title":"Java Puzzles"},{"body":"","link":"https://gitorko.github.io/tags/java-puzzles/","section":"tags","tags":null,"title":"java-puzzles"},{"body":"","link":"https://gitorko.github.io/categories/puzzles/","section":"categories","tags":null,"title":"Puzzles"},{"body":"","link":"https://gitorko.github.io/tags/kafka/","section":"tags","tags":null,"title":"kafka"},{"body":"","link":"https://gitorko.github.io/categories/kafka/","section":"categories","tags":null,"title":"Kafka"},{"body":"","link":"https://gitorko.github.io/tags/kafka-stream/","section":"tags","tags":null,"title":"kafka-stream"},{"body":"","link":"https://gitorko.github.io/categories/messaging/","section":"categories","tags":null,"title":"Messaging"},{"body":"Spring Boot integration with kafka \u0026amp; kafka streams\nGithub: https://github.com/gitorko/project80\nKafka Kafka is a distributed \u0026amp; fault-tolerant,high throughput, scalable stream processing \u0026amp; messaging system.\nKafka as publisher-subscriber messaging system. Kafka as queue (point-point) messaging system. Kafka as stream processing system that reacts to event in realtime. Kafka as a store for data. Kafka stores streams of records (messages) in topics. Topics are partitioned and replicated across multiple nodes thus kafka can scale and be a distributed system. Producers publish data to the topics. Consumer groups can subscribe to topics.\nData Store - Kafka is append only commit log. Which means it can also act as a data store. Queue (point-point) - If only one consumer group subscribes to a topic it behaves like a Queue (point-point) messaging system. Pub-Sub - If more than one consumer group subscribe to a topic it behaves like Pub-Sub messaging system. Consumer Group - Number of consumers in a group must be less than or equal to number of partitions. Cant have more consumers in a group than there are partitions. Partition - Producer needs to be aware of the partition its publishing to. Partition - When you add a new kafka broker the partition is replicated so loss of one node doesnt crash the system. Ordering - Ordering of messages is guaranteed only in a partition and not across partitions. Offset - Consumer can choose to read records from latest or from beginning. Long polling - Uses poll model compared to RabbitMQ which uses push model Adapters - Provides adapters that can be used to write data to db and other endpoints Stream - Provides stream processing capabilities Similar to spring rest template or jdbc template which abstracts the rest/jdbc calls spring provides kafka template which provides high level abstraction to interact with kafka. There is an even higher level of abstraction provided by spring cloud stream which lets we integrate with kafka or rabbitmq and other messaging systems. So when the messaging systems changes you dont need to make code changes in producer or consumer.\nKafka Producer \u0026amp; Consumer 1package com.demo.project80.producer; 2 3import java.util.Arrays; 4import java.util.List; 5import java.util.Random; 6import java.util.UUID; 7import java.util.concurrent.TimeUnit; 8 9import com.demo.project80.pojo.User; 10import lombok.RequiredArgsConstructor; 11import lombok.extern.slf4j.Slf4j; 12import org.apache.kafka.clients.producer.ProducerRecord; 13import org.springframework.beans.factory.annotation.Value; 14import org.springframework.boot.CommandLineRunner; 15import org.springframework.boot.SpringApplication; 16import org.springframework.boot.autoconfigure.SpringBootApplication; 17import org.springframework.context.annotation.Bean; 18import org.springframework.kafka.core.KafkaTemplate; 19 20@SpringBootApplication 21@Slf4j 22@RequiredArgsConstructor 23public class KafkaProducer { 24 25 @Value(value = \u0026#34;${topic.name}\u0026#34;) 26 private String topicName; 27 28 private final KafkaTemplate\u0026lt;String, User\u0026gt; kafkaTemplate; 29 30 @Bean 31 public CommandLineRunner sendData() { 32 return args -\u0026gt; { 33 List\u0026lt;String\u0026gt; users = Arrays.asList(\u0026#34;david\u0026#34;, \u0026#34;john\u0026#34;, \u0026#34;raj\u0026#34;, \u0026#34;peter\u0026#34;); 34 Random random = new Random(); 35 while (true) { 36 User user = new User(users.get(random.nextInt(users.size())), random.nextInt(100)); 37 ProducerRecord\u0026lt;String, User\u0026gt; producerRecord = new ProducerRecord\u0026lt;\u0026gt;(topicName, user); 38 producerRecord.headers().add(\u0026#34;message-id\u0026#34;, UUID.randomUUID().toString().getBytes()); 39 log.info(\u0026#34;Sending user: {}\u0026#34;, user); 40 kafkaTemplate.send(producerRecord); 41 TimeUnit.SECONDS.sleep(10); 42 } 43 }; 44 } 45 46 public static void main(String[] args) { 47 SpringApplication.run(KafkaProducer.class, args); 48 } 49 50} 1package com.demo.project80.consumer; 2 3import com.demo.project80.pojo.User; 4import lombok.SneakyThrows; 5import lombok.extern.slf4j.Slf4j; 6import org.apache.kafka.clients.consumer.ConsumerRecord; 7import org.springframework.boot.SpringApplication; 8import org.springframework.boot.autoconfigure.SpringBootApplication; 9import org.springframework.kafka.annotation.KafkaListener; 10 11@SpringBootApplication 12@Slf4j 13public class KafkaConsumer { 14 15 @SneakyThrows 16 @KafkaListener(id = \u0026#34;my-client-app\u0026#34;, topics = \u0026#34;${topic.name}\u0026#34;) 17 public void topicConsumer(ConsumerRecord\u0026lt;String, User\u0026gt; consumerRecord) { 18 User user = consumerRecord.value(); 19 log.info(\u0026#34;Received User : {}\u0026#34;, user); 20 } 21 22 public static void main(String[] args) { 23 SpringApplication.run(KafkaConsumer.class, args); 24 } 25 26} 1spring: 2 main: 3 banner-mode: \u0026#34;off\u0026#34; 4 web-application-type: none 5 kafka: 6 bootstrap-servers: localhost:9092 7 consumer: 8 client-id: my-client-consumer 9 group-id: group-01 10 auto-offset-reset: earliest 11 key-deserializer: org.apache.kafka.common.serialization.StringDeserializer 12 value-deserializer: com.demo.project80.converter.MessageDeserializer 13 producer: 14 client-id: my-client-app 15 key-serializer: org.apache.kafka.common.serialization.StringSerializer 16 value-serializer: com.demo.project80.converter.MessageSerializer 17 #value-serializer: org.springframework.kafka.support.serializer.JsonSerializer 18topic: 19 name: mytopic.000 1version: \u0026#39;2\u0026#39; 2services: 3 zookeeper: 4 container_name: zookeeper 5 image: \u0026#39;bitnami/zookeeper:latest\u0026#39; 6 ports: 7 - 2181:2181 8 environment: 9 - ALLOW_ANONYMOUS_LOGIN=yes 10 kafkaserver: 11 hostname: kafkaserver 12 container_name: kafkaserver 13 image: \u0026#39;bitnami/kafka:latest\u0026#39; 14 ports: 15 - 9092:9092 16 depends_on: 17 - zookeeper 18 environment: 19 - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 20 - KAFKA_ADVERTISED_HOST_NAME=kafkaserver 21 - ALLOW_PLAINTEXT_LISTENER=yes 22 links: 23 - zookeeper:zookeeper 24 kafka-ui: 25 container_name: kafka-ui 26 image: provectuslabs/kafka-ui:latest 27 ports: 28 - 9090:8080 29 depends_on: 30 - zookeeper 31 - kafkaserver 32 environment: 33 KAFKA_CLUSTERS_0_NAME: local 34 KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafkaserver:9092 35 KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181 Run the main method of producer and then the consumer.\nThe group id of your client which uses group management to assign topic partitions to consumers, auto-offset-reset=earliest ensures the new consumer group will get the oldest available message.\nwe can have multiple kafka listener for a topic with different group id A consumer can listen to more than one topic. We have created the topic 'mytopic' with only one partition. For a topic with multiple partitions, @KafkaListener can explicitly subscribe to a particular partition of a topic with an initial offset.\n1@KafkaListener(topics = \u0026#34;topic1\u0026#34;, group = \u0026#34;group1\u0026#34;) 2@KafkaListener(topics = \u0026#34;topic1,topic2\u0026#34;, group = \u0026#34;group1\u0026#34;) 3@KafkaListener(topicPartitions = @TopicPartition(topic = \u0026#34;topic1\u0026#34;, 4 partitionOffsets = { 5 @PartitionOffset(partition = \u0026#34;0\u0026#34;, initialOffset = \u0026#34;0\u0026#34;), 6 @PartitionOffset(partition = \u0026#34;2\u0026#34;, initialOffset = \u0026#34;0\u0026#34;) 7})) Kafka Streams Kafka Streams has stream-table duality. Tables are a set of evolving facts. Each new event overwrites the old one, whereas streams are a collection of immutable facts. Kafka Streams provides two abstractions for Streams and Tables. KStream handles the stream of records. KTable manages the changelog stream with the latest state of a given key For not partitioned tables we can use GlobalKTables to broadcast information to all tasks.\nWhen we use other projects like apache spark, storm,flink we write code and copy the jar to the nodes where the actual work happens. With the introduction of kafka stream we can now write your processing logic for streams and then it can run anywhere the jar can run. KafkaStreams enables us to consume from Kafka topics, analyze or transform data, and potentially, send it to another Kafka topic.\nWe will now count the users by age group.\n1package com.demo.project80.stream; 2 3import java.util.Properties; 4 5import com.demo.project80.pojo.User; 6import lombok.extern.slf4j.Slf4j; 7import org.apache.kafka.common.serialization.Serde; 8import org.apache.kafka.common.serialization.Serdes; 9import org.apache.kafka.streams.KafkaStreams; 10import org.apache.kafka.streams.KeyValue; 11import org.apache.kafka.streams.StreamsBuilder; 12import org.apache.kafka.streams.StreamsConfig; 13import org.apache.kafka.streams.kstream.Consumed; 14import org.apache.kafka.streams.kstream.Grouped; 15import org.apache.kafka.streams.kstream.KStream; 16import org.apache.kafka.streams.kstream.KTable; 17import org.springframework.beans.factory.annotation.Value; 18import org.springframework.boot.CommandLineRunner; 19import org.springframework.boot.SpringApplication; 20import org.springframework.boot.autoconfigure.SpringBootApplication; 21import org.springframework.context.annotation.Bean; 22import org.springframework.context.annotation.Profile; 23import org.springframework.kafka.annotation.KafkaStreamsDefaultConfiguration; 24import org.springframework.kafka.support.serializer.JsonSerde; 25 26@SpringBootApplication 27@Slf4j 28public class KafkaStream { 29 30 @Value(value = \u0026#34;${topic.name}\u0026#34;) 31 private String topicName; 32 33 private static final Serde\u0026lt;String\u0026gt; STRING_SERDE = Serdes.String(); 34 35 @Bean 36 public CommandLineRunner streamData() { 37 return args -\u0026gt; { 38 StreamsBuilder streamsBuilder = new StreamsBuilder(); 39 KStream\u0026lt;String, User\u0026gt; streamOfUsers = streamsBuilder 40 .stream(topicName, Consumed.with(STRING_SERDE, new JsonSerde\u0026lt;\u0026gt;(User.class))); 41 42 streamOfUsers.foreach((k, v) -\u0026gt; { 43 log.info(\u0026#34;user: {}, age: {}\u0026#34;, v.getName(), v.getAge()); 44 }); 45 46 KTable\u0026lt;String, Long\u0026gt; employeeCountByCompany = streamOfUsers 47 .map((k, v) -\u0026gt; new KeyValue\u0026lt;\u0026gt;(v.getAge(), String.valueOf(v.getAge()))) 48 .groupBy((k, w) -\u0026gt; w, Grouped.with(STRING_SERDE, STRING_SERDE)) 49 .count(); 50 employeeCountByCompany.toStream().foreach((w, c) -\u0026gt; log.info(\u0026#34;Age: \u0026#34; + w + \u0026#34; -\u0026gt; \u0026#34; + c)); 51 52 KafkaStreams streams = new KafkaStreams(streamsBuilder.build(), kStreamsConfigs()); 53 streams.cleanUp(); 54 streams.start(); 55 Runtime.getRuntime().addShutdownHook(new Thread(streams::close)); 56 }; 57 } 58 59 @Bean(name = KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME) 60 public Properties kStreamsConfigs() { 61 Properties props = new Properties(); 62 props.put(StreamsConfig.APPLICATION_ID_CONFIG, \u0026#34;test-group\u0026#34;); 63 props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \u0026#34;localhost:9092\u0026#34;); 64 return props; 65 } 66 67 public static void main(String[] args) { 68 SpringApplication.run(KafkaStream.class, args); 69 } 70 71} Run the main method of KafkaStream.\nSetup Project 80 Spring Boot \u0026amp; Kafka\nhttps://gitorko.github.io/spring-apache-kafka/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Kafka To run kafka we need zookeeper, use the docker compose command to run kafka as a container\nFor windows ensure the C:\\Windows\\System32\\drivers\\etc\\hosts file has these 2 entries. For link ensure /etc/hosts has these 2 entries.\n1127.0.0.1 zookeeper 2127.0.0.1 kafkaserver 1docker-compose -f docker/docker-compose.yml up To create topic\n1docker exec -it kafkaserver /bin/bash 2$ /opt/bitnami/kafka/bin/kafka-topics.sh --create --replication-factor 1 --partitions 1 --topic mytopic.000 --bootstrap-server localhost:9092 To delete topic\n1docker exec -it kafkaserver /bin/bash 2$ /opt/bitnami/kafka/bin/kafka-topics.sh --delete --topic mytopic.000 --bootstrap-server localhost:9092 Clean up\n1docker-compose -f docker/docker-compose.yml stop 2docker rm kafka-ui kafkaserver zookeeper Restart\n1docker-compose -f docker/docker-compose.yml start Dashboard for kafka, wait for a few seconds as it takes time to come up.\nOpen http://localhost:9090/\nReferences https://www.baeldung.com/java-kafka-streams\nhttps://kafka.apache.org/quickstart\nhttps://baeldung-cn.com/java-kafka-streams-vs-kafka-consumer\nhttps://tanzu.vmware.com/developer/guides/kafka-gs/\nhttps://kafka.apache.org/\n","link":"https://gitorko.github.io/post/spring-apache-kafka/","section":"post","tags":["kafka","kafka-stream"],"title":"Spring Boot \u0026 Apache Kafka"},{"body":"","link":"https://gitorko.github.io/tags/algorithms/","section":"tags","tags":null,"title":"algorithms"},{"body":"","link":"https://gitorko.github.io/categories/algorithms/","section":"categories","tags":null,"title":"Algorithms"},{"body":"","link":"https://gitorko.github.io/tags/coding/","section":"tags","tags":null,"title":"coding"},{"body":"","link":"https://gitorko.github.io/tags/data-structure/","section":"tags","tags":null,"title":"data-structure"},{"body":"","link":"https://gitorko.github.io/categories/ds/","section":"categories","tags":null,"title":"DS"},{"body":"A comprehensive guide for java coding interviews covering areas like algorithms, datastructures, sorting, leetcode problems, concurrency, java fundamentals \u0026amp; system design.\nGithub: https://github.com/gitorko/project01\nPreparation We will first understand the fundamentals of data structure, so how heap, queue, stacks work and how to implement them from scratch. Then we will look at the various sorting algorithms. Then we will move to LeetCode algorithm covering easy, medium \u0026amp; hard problems. Then we will move to concurrency problems, how atomic variable work, how locks work etc. Then we will cover some SQL and database queries. Then we will cover system design aspects. The problems solved here are concise \u0026amp; small making it easy to understand and revise. All problems solved here are developed with test driven approach, with various test that can be run locally. Each of the solutions follow certain pattern. Eg: if you learn back-tracking solution in one problem the pattern is similar when you solve it in other problem. This is very important when it comes to the learning aspect. Some problems will be easy to solve once and never forget, others will take time and will require you to visit them again and again. Most problems have a parent problem, Once you solve this parent problem you can solve various subset or variation of this problem. Such problems are grouped as similar in the solutions. Approach To Solve Given a problem here are some questions that should help you figure out the general direction of how to solve it\nWhich data structure can I use? Arrays, LinkedList, HashMap, Heap, Tree, or Trie Do I need to use 2 data structures? eg: LRU How do I break the problem into smaller units, is there a problem within a problem, can i write a decision tree? Does this problem look similar to other problems you have solved? Will sorting make the problem easier to solve? Can I use any algorithmic techniques, like bfs, dfs, two pointer etc. Do any design patterns apply that could make it easier to maintain, like observer pattern? What is the time \u0026amp; space complexity? Best case, worst case time complexity? Average case is usually difficult to derive. The NeetCode youtube channel is highly recommended, the explanation of the problem \u0026amp; concepts is just awesome!\nNeetCode\nThe Tushar Roy - Coding Made Simple is also highly recommended\nTushar Roy - Coding Made Simple\nAlgo Techniques Sorting Map \u0026amp; Set Recursion Fast pointer \u0026amp; Slow pointer Min-Heap vs Max-Heap (Priority Queue) Binary search BFS vs DFS Two Pointers Sliding Window Fast pointer vs Slow pointer Backtracking Matrix Prefix sum Divide \u0026amp; Conquer Memoization / Dynamic programming Greedy Topological Sort Intervals Cyclic Sort Bitwise XOR / Bit manipulation Trie Stacks \u0026amp; Queue Big-O 1log(n) \u0026lt; √(n) \u0026lt; n \u0026lt; nlog(n) \u0026lt; n^2 \u0026lt; n^3 \u0026lt; 2^n \u0026lt; n! Algorithms and Data Structures Cheatsheet\nCoding Sorting Id Leetcode Solution Type 1 Bubble Sort Solution EASY 2 Selection sort Solution EASY 3 Insertion sort Solution EASY 4 MergeSort Solution MEDIUM 5 912. Sort an Array Solution MEDIUM 6 QuickSort Solution MEDIUM 7 912. Sort an Array Solution MEDIUM 8 Shell sort Solution HARD 9 Counting sort Solution EASY 10 Radix sort Solution MEDIUM 11 Bucket sort Solution EASY 12 Heap sort Solution MEDIUM 13 704. Binary Search Solution EASY 14 Employee Search Solution EASY Data Structure Id Leetcode Solution Type 1 Implement Circular Array Solution EASY 2 622. Design Circular Queue Solution MEDIUM 3 Implement ArrayList with array Solution EASY 4 Insert to BST, Delete from BST, Find from BST Solution EASY 5 Implement Map Solution EASY 6 Implement Max Heap Solution EASY 7 Implement Min Heap Solution EASY 8 Implement Queue Solution EASY 9 Implement Stack Solution EASY 10 208. Implement Trie, Prefix Tree Solution EASY 11 Implement Doubly Linked List Solution EASY 12 225. Implement Stack using Queues Solution EASY LeetCode - Easy Id Leetcode Solution Type 1 67. Add Binary Solution EASY - Number 2 455. Assign Cookies Solution EASY - Number 3 121. Best Time to Buy and Sell Stock Solution EASY - Number 4 605. Can Place Flowers Solution EASY - Number 5 724. Find Pivot Index Solution EASY - Number 6 9. Palindrome Number Solution EASY - Number 7 860. Lemonade Change Solution EASY - Number 8 485. Max Consecutive Ones Solution EASY - Number 9 53. Maximum Subarray Solution EASY - Number 10 88. Merge Sorted Array Solution EASY - Number 11 1984. Minimum Difference Between Highest and Lowest of K Scores Solution EASY - Number 12 268. Missing Number Solution EASY - Number 13 283. Move Zeroes Solution EASY - Number 14 119. Pascal's Triangle II Solution EASY - Number 15 118. Pascal's Triangle Solution EASY - Number 16 66. Plus One Solution EASY - Number 17 1299. Replace Elements with Greatest Element on Right Side Solution EASY - Number 18 7. Reverse Integer Solution EASY - Number 19 136. Single Number Solution EASY - Number 20 228. Summary Ranges Solution EASY - Number 21 263. Ugly Number Solution EASY - Number 22 242. Valid Anagram Solution EASY - String 23 389. Find the Difference Solution EASY - String 24 412. Fizz Buzz Solution EASY - String 25 205. Isomorphic Strings Solution EASY - String 26 392. Is Subsequence Solution EASY - String 27 58. Length of Last Word Solution EASY - String 28 14. Longest Common Prefix Solution EASY - String 29 1189. Maximum Number of Balloons Solution EASY - String 30 Minimum append to make string palindrome Solution EASY - String 31 344. Reverse String Solution EASY - String 32 13. Roman to Integer Solution EASY - String 33 28. Implement strStr Solution MEDIUM - String 34 929. Unique Email Addresses Solution EASY - String 35 953. Verifying an Alien Dictionary Solution EASY - String 36 217. Contains Duplicate Solution EASY - Map \u0026amp; Set 37 202. Happy Number Solution EASY - Map \u0026amp; Set 38 169. Majority Element Solution EASY - Map \u0026amp; Set 39 1. Two Sum Solution EASY - Map \u0026amp; Set 40 387. First Unique Character in a String Solution EASY - Map \u0026amp; Set 41 290. Word Pattern Solution EASY - Map \u0026amp; Set 42 1636. Sort Array by Increasing Frequency Solution EASY - Heap 43 703. Kth Largest Element in a Stream Solution EASY - Heap 44 1046. Last Stone Weight Solution EASY - Heap 45 1005. Maximize Sum Of Array After K Negations Solution EASY - Heap 46 349. Intersection of Two Arrays Solution EASY - Sliding window / Two pointer 47 696. Count Binary Substrings Solution EASY - Sliding window / Two pointer 48 Factorial Solution EASY - Sliding window / Two pointer 49 509. Fibonacci Number Solution EASY - Sliding window / Two pointer 50 125. Valid Palindrome Solution EASY - Sliding window / Two pointer 51 674. Longest Continuous Increasing Subsequence Solution EASY - Sliding window / Two pointer 52 26. Remove Duplicates from Sorted Array Solution EASY - Sliding window / Two pointer 53 27. Remove Element Solution EASY - Sliding window / Two pointer 54 977. Squares of a Sorted Array Solution EASY - Sliding window / Two pointer 55 680. Valid Palindrome II Solution EASY - Sliding window / Two pointer 56 463. Island Perimeter Solution EASY - Matrix 57 Ones in Range Solution EASY - Pre-Sum 58 303. Range Sum Query - Immutable Solution EASY - Pre-Sum 59 70. Climbing Stairs Solution EASY - DP 60 338. Counting Bits Solution EASY - DP 61 746. Min Cost Climbing Stairs Solution EASY - DP 62 203. Remove Linked List Elements Solution EASY - Link List 63 141. Linked List Cycle Solution EASY - Link List 64 142. Linked List Cycle II Solution EASY - Link List 65 160. Intersection of Two Linked Lists Solution EASY - Link List 66 21. Merge Two Sorted Lists Solution EASY - Link List 67 234. Palindrome Linked List Solution EASY - Link List 68 83. Remove Duplicates from Sorted List Solution EASY - Link List 69 206. Reverse Linked List Solution EASY - Link List 70 235. Lowest Common Ancestor of a Binary Search Tree Solution EASY - Binary Tree 71 938. Range Sum of BST Solution EASY - Binary Tree 72 Binary Tree two sum different level Solution EASY - Binary Tree 73 Create Binary Tree from Level order Solution EASY - Binary Tree 74 Get height of binary tree Solution EASY - Binary Tree 75 104. Maximum Depth of Binary Tree Solution EASY - Binary Tree 76 111. Minimum Depth of Binary Tree Solution EASY - Binary Tree 77 Get size of binary tree Solution EASY - Binary Tree 78 543. Diameter of Binary Tree Solution EASY - Binary Tree 79 226. Invert Binary Tree Solution EASY - Binary Tree 80 617. Merge Two Binary Trees Solution EASY - Binary Tree 81 257. Binary Tree Paths Solution EASY - Binary Tree 82 112. Path Sum Solution EASY - Binary Tree 83 100. Same Tree Solution EASY - Binary Tree 84 671. Second Minimum Node In a Binary Tree Solution EASY - Binary Tree 85 572. Subtree of Another Tree Solution EASY - Binary Tree 86 404. Sum of Left Leaves Solution EASY - Binary Tree 87 144. Binary Tree Preorder Traversal Solution EASY - Binary Tree 88 145. Binary Tree Postorder Traversal Solution EASY - Binary Tree 89 94. Binary Tree Inorder Traversal Solution EASY - Binary Tree 90 102. Binary Tree Level Order Traversal Solution EASY - Binary Tree 91 144. Binary Tree Preorder Traversal Solution EASY - Binary Tree 92 145. Binary Tree Postorder Traversal Solution EASY - Binary Tree 93 94. Binary Tree Inorder Traversal Solution EASY - Binary Tree 94 107. Binary Tree Level Order Traversal II Solution EASY - Binary Tree 95 101. Symmetric Tree Solution EASY - Binary Tree 96 441. Arranging Coins Solution EASY - Binary Search 97 108. Convert Sorted Array to Binary Search Tree Solution EASY - Binary Search 98 374. Guess Number Higher or Lower Solution EASY - Binary Search 99 1539. Kth Missing Positive Number Solution EASY - Binary Search 100 35. Search Insert Position Solution EASY - Binary Search 101 367. Valid Perfect Square Solution EASY - Binary Search 102 844. Backspace String Compare Solution EASY - Stack \u0026amp; Monotonic Stack 103 155. Min Stack Solution EASY - Stack \u0026amp; Monotonic Stack 104 496. Next Greater Element I Solution EASY - Stack \u0026amp; Monotonic Stack 105 Nearest Greater to Right Solution EASY - Stack \u0026amp; Monotonic Stack 106 20. Valid Parentheses Solution EASY - Stack \u0026amp; Monotonic Stack 107 71. Simplify Path Solution EASY - Stack \u0026amp; Monotonic Stack 108 Sort a stack Solution EASY - Stack \u0026amp; Monotonic Stack 109 733. Flood Fill Solution EASY - Graph 110 1260. Shift 2D Grid Solution EASY - Graph 111 1114. Print in Order Solution EASY - Thread 112 448. Find All Numbers Disappeared in an Array Solution EASY - Cyclic sort 113 191. Number of 1 Bits Solution EASY - Bit Manipulation 114 339. Nested List Weight Sum Solution EASY - Generic LeetCode - Medium Id Leetcode Solution Type 1 665. Non-decreasing Array Solution MEDIUM - Number 2 1968. Array With Elements Not Equal to Average of Neighbors Solution MEDIUM - Number 3 853. Car Fleet Solution MEDIUM - Number 4 38. Count and Say Solution MEDIUM - Number 5 1921. Eliminate Maximum Number of Monsters Solution MEDIUM - Number 6 Pair with diff Solution MEDIUM - Number 7 532. K-diff Pairs in an Array Solution MEDIUM - Number 8 18. 4Sum Solution MEDIUM - Number 9 12. Integer to Roman Solution MEDIUM - Number 10 841. Keys and Rooms Solution MEDIUM - Number 11 670. Maximum Swap Solution MEDIUM - Number 12 152. Maximum Product Subarray Solution MEDIUM - Number 13 1899. Merge Triplets to Form Target Triplet Solution MEDIUM - Number 14 Smallest Positive Integer Solution MEDIUM - Number 15 31. Next Permutation Solution MEDIUM - Number 16 2001. Number of Pairs of Interchangeable Rectangles Solution MEDIUM - Number 17 50. Pow x, n Solution MEDIUM - Number 18 238. Product of Array Except Self Solution MEDIUM - Number 19 80. Remove Duplicates from Sorted Array II Solution MEDIUM - Number 20 402. Remove K Digits Solution MEDIUM - Number 21 1041. Robot Bounded In Circle Solution MEDIUM - Number 22 Shuffle Array Solution MEDIUM - Number 23 75. Sort Colors Solution MEDIUM - Number 24 280. Wiggle Sort Solution MEDIUM - Number 25 Caesar Cipher Solution MEDIUM - String 26 165. Compare Version Numbers Solution MEDIUM - String 27 271. Encode and Decode Strings Solution MEDIUM - String 28 395. Longest Substring with At Least K Repeating Characters Solution MEDIUM - String 29 1963. Minimum Number of Swaps to Make the String Balanced Solution MEDIUM - String 30 752. Open the Lock Solution MEDIUM - String 31 647. Palindromic Substrings Solution MEDIUM - String 32 554. Brick Wall Solution MEDIUM - Map \u0026amp; Set 33 2013. Detect Squares Solution MEDIUM - Map \u0026amp; Set 34 1296. Divide Array in Sets of K Consecutive Numbers Solution MEDIUM - Map \u0026amp; Set 35 535. Encode and Decode TinyURL Solution MEDIUM - Map \u0026amp; Set 36 973. K Closest Points to Origin Solution MEDIUM - Map \u0026amp; Set 37 49. Group Anagrams Solution MEDIUM - Map \u0026amp; Set 38 846. Hand of Straights Solution MEDIUM - Map \u0026amp; Set 39 380. Insert Delete GetRandom Solution MEDIUM - Map \u0026amp; Set 40 1930. Unique Length 3 Palindromic Subsequences Solution MEDIUM - Map \u0026amp; Set 41 128. Longest Consecutive Sequence Solution MEDIUM - Map \u0026amp; Set 42 146. LRU Cache Solution MEDIUM - Map \u0026amp; Set 43 146. LRU Cache Solution MEDIUM - Map \u0026amp; Set 44 187. Repeated DNA Sequences Solution MEDIUM - Map \u0026amp; Set 45 621. Task Scheduler Solution MEDIUM - Map \u0026amp; Set 46 16. 3Sum Closest Solution MEDIUM - Map \u0026amp; Set 47 36. Valid Sudoku Solution MEDIUM - Map \u0026amp; Set 48 215. Kth Largest Element in an Array Solution MEDIUM - Heap 49 1985. Find the Kth Largest Integer in the Array Solution MEDIUM - Heap 50 1094. Car Pooling Solution MEDIUM - Heap 51 1167. Minimum Cost to Connect Sticks Solution MEDIUM - Heap 52 1834. Single-Threaded CPU Solution MEDIUM - Heap 53 451. Sort Characters By Frequency Solution MEDIUM - Heap 54 1405. Longest Happy String Solution MEDIUM - Heap 55 983. Minimum Cost For Tickets Solution MEDIUM - Heap 56 767. Reorganize String Solution MEDIUM - Heap 57 358. Rearrange String k Distance Apart Solution MEDIUM - Heap 58 1845. Seat Reservation Manager Solution MEDIUM - Heap 59 Sort K sorted array Solution MEDIUM - Heap 60 347. Top K Frequent Elements Solution MEDIUM - Heap 61 692. Top K Frequent Words Solution MEDIUM - Heap 62 438. Find All Anagrams in a String Solution MEDIUM - Sliding window / Two pointer 63 122. Best Time to Buy and Sell Stock II Solution MEDIUM - Sliding window / Two pointer 64 881. Boats to Save People Solution MEDIUM - Sliding window / Two pointer 65 11. Container With Most Water Solution MEDIUM - Sliding window / Two pointer 66 1838. Frequency of the Most Frequent Element Solution MEDIUM - Sliding window / Two pointer 67 904. Fruit Into Baskets Solution MEDIUM - Sliding window / Two pointer 68 5. Longest Palindromic Substring Solution MEDIUM - Sliding window / Two pointer 69 424. Longest Repeating Character Replacement Solution MEDIUM - Sliding window / Two pointer 70 159. Longest Substring with At Most Two Distinct Characters Solution MEDIUM - Sliding window / Two pointer 71 340. Longest Substring with At Most K Distinct Characters Solution MEDIUM - Sliding window / Two pointer 72 3. Longest Substring Without Repeating Characters Solution MEDIUM - Sliding window / Two pointer 73 3. Longest Substring Without Repeating Characters Solution MEDIUM - Sliding window / Two pointer 74 1004. Max Consecutive Ones III Solution MEDIUM - Sliding window / Two pointer 75 1423. Maximum Points You Can Obtain from Cards Solution MEDIUM - Sliding window / Two pointer 76 1888. Minimum Number of Flips to Make the Binary String Alternating Solution MEDIUM - Sliding window / Two pointer 77 64. Minimum Path Sum Solution MEDIUM - Sliding window / Two pointer 78 209. Minimum Size Subarray Sum Solution MEDIUM - Sliding window / Two pointer 79 763. Partition Labels Solution MEDIUM - Sliding window / Two pointer 80 567. Permutation in String Solution MEDIUM - Sliding window / Two pointer 81 151. Reverse Words in a String Solution MEDIUM - Sliding window / Two pointer 82 581. Shortest Unsorted Continuous Subarray Solution MEDIUM - Sliding window / Two pointer 83 1498. Number of Subsequences That Satisfy the Given Sum Condition Solution MEDIUM - Sliding window / Two pointer 84 15. 3Sum Solution MEDIUM - Sliding window / Two pointer 85 167. Two Sum II - Input Array Is Sorted Solution MEDIUM - Sliding window / Two pointer 86 1905. Count Sub Islands Solution MEDIUM - Matrix 87 289. Game of Life Solution MEDIUM - Matrix 88 1428. Leftmost Column with at Least a One Solution MEDIUM - Matrix 89 695. Max Area of Island Solution MEDIUM - Matrix 90 221. Maximal Square Solution MEDIUM - Matrix 91 200. Number of Islands Solution MEDIUM - Matrix 92 417. Pacific Atlantic Water Flow Solution MEDIUM - Matrix 93 48. Rotate Image Solution MEDIUM - Matrix 94 73. Set Matrix Zeroes Solution MEDIUM - Matrix 95 54. Spiral Matrix Solution MEDIUM - Matrix 96 130. Surrounded Regions Solution MEDIUM - Matrix 97 286. Walls and Gates Solution MEDIUM - Matrix 98 79. Word Search Solution MEDIUM - Matrix 99 113. Path Sum II Solution MEDIUM - Backtracking 100 77. Combinations Solution MEDIUM - Backtracking 101 39. Combination Sum Solution MEDIUM - Backtracking 102 40. Combination Sum II Solution MEDIUM - Backtracking 103 1239. Maximum Length of a Concatenated String with Unique Characters Solution MEDIUM - Backtracking 104 131. Palindrome Partitioning Solution MEDIUM - Backtracking 105 22. Generate Parentheses Solution MEDIUM - Backtracking 106 46. Permutations Solution MEDIUM - Backtracking 107 47. Permutations II Solution MEDIUM - Backtracking 108 String permutation Solution MEDIUM - Backtracking 109 17. Letter Combinations of a Phone Number Solution MEDIUM - Backtracking 110 93. Restore IP Addresses Solution MEDIUM - Backtracking 111 90. Subsets II Solution MEDIUM - Backtracking 112 78. Subsets Solution MEDIUM - Backtracking 113 1980. Find Unique Binary String Solution MEDIUM - Backtracking 114 523. Continuous Subarray Sum Solution MEDIUM - Pre-Sum 115 2017. Grid Game Solution MEDIUM - Pre-Sum 116 528. Random Pick with Weight Solution MEDIUM - Pre-Sum 117 304. Range Sum Query 2D - Immutable Solution MEDIUM - Pre-Sum 118 560. Subarray Sum Equals K Solution MEDIUM - Pre-Sum 119 325. Maximum Size Subarray Sum Equals k Solution MEDIUM - Pre-Sum 120 894. All Possible Full Binary Trees Solution MEDIUM - DP 121 309. Best Time to Buy and Sell Stock with Cooldown Solution MEDIUM - DP 122 518. Coin Change 2 Solution MEDIUM - DP 123 322. Coin Change Solution MEDIUM - DP 124 377. Combination Sum IV Solution MEDIUM - DP 125 91. Decode Ways Solution MEDIUM - DP 126 740. Delete and Earn Solution MEDIUM - DP 127 Egg Drop Solution MEDIUM - DP 128 1884. Egg Drop With 2 Eggs and N Floors Solution MEDIUM - DP 129 198. House Robber Solution MEDIUM - DP 130 213. House Robber II Solution MEDIUM - DP 131 337. House Robber III Solution MEDIUM - DP 132 343. Integer Break Solution MEDIUM - DP 133 97. Interleaving String Solution MEDIUM - DP 134 1143. Longest Common Subsequence Solution MEDIUM - DP 135 300. Longest Increasing Subsequence Solution MEDIUM - DP 136 516. Longest Palindromic Subsequence Solution MEDIUM - DP 137 473. Matchsticks to Square Solution MEDIUM - DP 138 1911. Maximum Alternating Subsequence Sum Solution MEDIUM - DP 139 673. Number of Longest Increasing Subsequence Solution MEDIUM - DP 140 256. Paint House Solution MEDIUM - DP 141 698. Partition to K Equal Sum Subsets Solution MEDIUM - DP 142 416. Partition Equal Subset Sum Solution MEDIUM - DP 143 279. Perfect Squares Solution MEDIUM - DP 144 Rod Cutting Solution MEDIUM - DP 145 877. Stone Game Solution MEDIUM - DP 146 494. Target Sum Solution MEDIUM - DP 147 120. Triangle Solution MEDIUM - DP 148 95. Unique Binary Search Trees II Solution MEDIUM - DP 149 96. Unique Binary Search Trees Solution MEDIUM - DP 150 63. Unique Paths II Solution MEDIUM - DP 151 62. Unique Paths Solution MEDIUM - DP 152 139. Word Break Solution MEDIUM - DP 153 2. Add Two Numbers Solution EASY - Link List 154 138. Copy List with Random Pointer Solution MEDIUM - Link List 155 287. Find the Duplicate Number Solution MEDIUM - Link List 156 147. Insertion Sort List Solution MEDIUM - Link List 157 109. Convert Sorted List to Binary Search Tree Solution MEDIUM - Link List 158 86. Partition List Solution MEDIUM - Link List 159 82. Remove Duplicates from Sorted List II Solution MEDIUM - Link List 160 19. Remove Nth Node From End of List Solution MEDIUM - Link List 161 143. Reorder List Solution MEDIUM - Link List 162 92. Reverse Linked List II Solution MEDIUM - Link List 163 Reverse link list even odd Solution MEDIUM - Link List 164 189. Rotate Array Solution MEDIUM - Link List 165 61. Rotate List Solution MEDIUM - Link List 166 148. Sort List Solution MEDIUM - Link List 167 24. Swap Nodes in Pairs Solution MEDIUM - Link List 168 513. Find Bottom Left Tree Value Solution MEDIUM - Binary Tree 169 173. Binary Search Tree Iterator Solution MEDIUM - Binary Tree 170 230. Kth Smallest Element in a BST Solution MEDIUM - Binary Tree 171 99. Recover Binary Search Tree Solution MEDIUM - Binary Tree 172 98. Validate Binary Search Tree Solution MEDIUM - Binary Tree 173 Check Level Order Traversal of BST Solution MEDIUM - Binary Tree 174 110. Balanced Binary Tree Solution MEDIUM - Binary Tree 175 1110. Delete Nodes And Return Forest Solution MEDIUM - Binary Tree 176 979. Distribute Coins in Binary Tree Solution MEDIUM - Binary Tree 177 114. Flatten Binary Tree to Linked List Solution MEDIUM - Binary Tree 178 106. Construct Binary Tree from Inorder and Postorder Traversal Solution MEDIUM - Binary Tree 179 105. Construct Binary Tree from Preorder and Inorder Traversal Solution MEDIUM - Binary Tree 180 1448. Count Good Nodes in Binary Tree Solution MEDIUM - Binary Tree 181 236. Lowest Common Ancestor of a Binary Tree Solution MEDIUM - Binary Tree 182 236. Lowest Common Ancestor of a Binary Tree Solution MEDIUM - Binary Tree 183 437. Path Sum III Solution MEDIUM - Binary Tree 184 199. Binary Tree Right Side View Solution MEDIUM - Binary Tree 185 129. Sum Root to Leaf Numbers Solution MEDIUM - Binary Tree 186 107. Binary Tree Level Order Traversal II Solution MEDIUM - Binary Tree 187 662. Maximum Width of Binary Tree Solution MEDIUM - Binary Tree 188 103. Binary Tree Zigzag Level Order Traversal Solution MEDIUM - Binary Tree 189 538. Convert BST to Greater Tree Solution MEDIUM - Binary Tree 190 951. Flip Equivalent Binary Trees Solution MEDIUM - Binary Tree 191 1993. Operations on Tree Solution MEDIUM - Binary Tree 192 Populating Next Right Pointers in Each Node Solution MEDIUM - Binary Tree 193 669. Trim a Binary Search Tree Solution MEDIUM - Binary Tree 194 252. Meeting Rooms Solution MEDIUM - Interval 195 1288. Remove Covered Intervals Solution MEDIUM - Interval 196 57. Insert Interval Solution MEDIUM - Interval 197 986. Interval List Intersections Solution MEDIUM - Interval 198 56. Merge Intervals Solution MEDIUM - Interval 199 253. Meeting Rooms II Solution MEDIUM - Interval 200 435. Non-overlapping Intervals Solution MEDIUM - Interval 201 1011. Capacity To Ship Packages Within D Days Solution MEDIUM - Binary Search 202 658. Find K Closest Elements Solution MEDIUM - Binary Search 203 34. Find First and Last Position of Element in Sorted Array Solution MEDIUM - Binary Search 204 875. Koko Eating Bananas Solution MEDIUM - Binary Search 205 1898. Maximum Number of Removable Characters Solution MEDIUM - Binary Search 206 153. Find Minimum in Rotated Sorted Array Solution MEDIUM - Binary Search 207 81. Search in Rotated Sorted Array II Solution MEDIUM - Binary Search 208 33. Search in Rotated Sorted Array Solution MEDIUM - Binary Search 209 74. Search a 2D Matrix Solution MEDIUM - Binary Search 210 981. Time Based Key-Value Store Solution MEDIUM - Binary Search 211 210. Course Schedule II Solution MEDIUM - Topological Sort 212 456. 132 Pattern Solution MEDIUM - Stack \u0026amp; Monotonic Stack 213 735. Asteroid Collision Solution MEDIUM - Stack \u0026amp; Monotonic Stack 214 739. Daily Temperatures Solution MEDIUM - Stack \u0026amp; Monotonic Stack 215 394. Decode String Solution MEDIUM - Stack \u0026amp; Monotonic Stack 216 1856. Maximum Subarray Min-Product Solution MEDIUM - Stack \u0026amp; Monotonic Stack 217 1249. Minimum Remove to Make Valid Parentheses Solution MEDIUM - Stack \u0026amp; Monotonic Stack 218 150. Evaluate Reverse Polish Notation Solution MEDIUM - Stack \u0026amp; Monotonic Stack 219 901. Online Stock Span Solution MEDIUM - Stack \u0026amp; Monotonic Stack 220 721. Accounts Merge Solution MEDIUM - Graph 221 787. Cheapest Flights Within K Stops Solution MEDIUM - Graph 222 133. Clone Graph Solution MEDIUM - Graph 223 323. Number of Connected Components in an Undirected Graph Solution MEDIUM - Graph 224 207. Course Schedule Solution MEDIUM - Graph 225 802. Find Eventual Safe States Solution MEDIUM - Graph 226 261. Graph Valid Tree Solution MEDIUM - Graph 227 1584. Min Cost to Connect All Points Solution MEDIUM - Graph 228 743. Network Delay Time Solution MEDIUM - Graph 229 1466. Reorder Routes to Make All Paths Lead to the City Zero Solution MEDIUM - Graph 230 994. Rotting Oranges Solution MEDIUM - Graph 231 934. Shortest Bridge Solution MEDIUM - Graph 232 Bathroom Problem Solution MEDIUM - Thread 233 1115. Print FooBar Alternately Solution MEDIUM - Thread 234 1115. Print FooBar Alternately Solution MEDIUM - Thread 235 1115. Print FooBar Alternately Solution MEDIUM - Thread 236 1116. Print Zero Even Odd Solution MEDIUM - Thread 237 134. Gas Station Solution MEDIUM - Greedy 238 45. Jump Game II Solution MEDIUM - Greedy 239 1871. Jump Game VII Solution MEDIUM - Greedy 240 55. Jump Game Solution MEDIUM - Greedy 241 179. Largest Number Solution MEDIUM - Greedy 242 678. Valid Parenthesis String Solution MEDIUM - Greedy 243 1029. Two City Scheduling Solution MEDIUM - Greedy 244 307. Range Sum Query - Mutable Solution MEDIUM - Segment Tree 245 307. Range Sum Query - Mutable Solution MEDIUM - Segment Tree 246 211. Design Add and Search Words Data Structure Solution MEDIUM - Prefix Tree / Trie 247 442. Find All Duplicates in an Array Solution MEDIUM - Cyclic sort 248 371. Sum of Two Integers Solution MEDIUM - Bit Manipulation 249 Implement browser back and forward data structure Solution MEDIUM - Generic 250 Implement browser back and forward data structure Solution MEDIUM - Generic LeetCode - Hard Id Leetcode Solution Type 1 273. Integer to English Words Solution HARD - Number 2 42. Trapping Rain Water Solution HARD - Number 3 154. Find Minimum in Rotated Sorted Array II Solution HARD - String 4 295. Find Median from Data Stream Solution HARD - Map \u0026amp; Set 5 76. Minimum Window Substring Solution HARD - Sliding window / Two pointer 6 239. Sliding Window Maximum Solution HARD - Sliding window / Two pointer 7 72. Edit Distance Solution HARD - DP 8 32. Longest Valid Parentheses Solution HARD - DP 9 1553. Minimum Number of Days to Eat N Oranges Solution HARD - DP 10 51. N-Queens Solution HARD - DP 11 132. Palindrome Partitioning II Solution HARD - DP 12 140. Word Break II Solution HARD - DP 13 23. Merge k Sorted Lists Solution HARD - Link List 14 25. Reverse Nodes in k-Group Solution HARD - Link List 15 297. Serialize and Deserialize Binary Tree Solution HARD - Binary Tree 16 124. Binary Tree Maximum Path Sum Solution HARD - Binary Tree 17 4. Median of Two Sorted Arrays Solution HARD - Binary Search 18 410. Split Array Largest Sum Solution HARD - Binary Search 19 269. Alien Dictionary Solution HARD - Topological Sort 20 84. Largest Rectangle in Histogram Solution HARD - Stack \u0026amp; Monotonic Stack 21 329. Longest Increasing Path in a Matrix Solution HARD - Stack \u0026amp; Monotonic Stack 22 895. Maximum Frequency Stack Solution HARD - Stack \u0026amp; Monotonic Stack 23 85. Maximal Rectangle Solution HARD - Stack \u0026amp; Monotonic Stack 24 332. Reconstruct Itinerary Solution HARD - Graph 25 778. Swim in Rising Water Solution HARD - Graph 26 127. Word Ladder Solution HARD - Graph 27 212. Word Search II Solution HARD - Prefix Tree / Trie 28 41. First Missing Positive Solution HARD - Cyclic sort Concurrency Id Leetcode Solution Type 1 Long Adder \u0026amp; Long Accumulator Solution MEDIUM 2 Callable Solution EASY 3 Create Dead Lock Solution MEDIUM 4 Produce Consumer Solution EASY 5 Produce Consumer Solution EASY 6 Produce Consumer Solution EASY 7 Semaphore Solution MEDIUM 8 ScheduledExecutorService Solution MEDIUM 9 Stop Thread Solution EASY 10 Stop Thread Solution EASY 11 Print Even Odd Solution EASY 12 Thread Starvation Solution EASY 13 Thread Abort Policy Solution EASY 14 Read Write lock Solution MEDIUM 15 ReentrantLock Solution MEDIUM 16 Stamped Lock Solution MEDIUM 17 Fork Join Solution MEDIUM 18 Common Words Solution EASY 19 Common Words multi thread Solution MEDIUM 20 Concurrent Modification Solution EASY 21 Cyclic Barrier Solution MEDIUM 22 Count Down Latch Solution EASY 23 Increment Array Solution MEDIUM 24 Phaser Solution MEDIUM 25 Completable Future Solution EASY 26 AtomicStampedReference Solution MEDIUM 27 AtomicReference Solution MEDIUM 28 Implement Custom Thread Pool Solution MEDIUM 29 Implement Custom Semaphore Solution MEDIUM 30 Parallel Stream Solution MEDIUM Java Concurrency LinkedBlockingQueue (unbounded) SynchronousQueue - space for only 1 ArrayBlockingQueue (bounded) DelayQueue - unbounded blocking queue of delayed elements, element can only be taken when its delay has expired. Thread Pool Size cpu intensive = num of cores io intensive = time it takes for IO to complete. ideal thread pool size = cores * (1 + (wait time/cpu time)) https://youtu.be/ErNre5varF8\nTypes of ExecutorService ExecutorService uses BlockingQueue by default newFixedThreadPool - LinkedBlockingQueue newSingleThreadExecutor newCachedThreadPool - SynchronousQueue, dynamically scale the threads to handle the amount of tasks, threads are idle for 60 second, they will be scaled down Rejection policy AbortPolicy - This is the default policy. It causes the executor to throw a RejectedExecutionException. CallerRunsPolicy - the producer thread will be employed to run the task it just submitted. This is effective back pressure. DiscardOldestPolicy - accept the task and throw away the oldest task in the BlockingQueue DiscardPolicy - accept the task but silently throw it away Custom Policy - We can implement the RejectedExecutionHandler interface and provide our own logic to handle Mutex vs Semaphore Mutex (or Mutual Exclusion Semaphores) is a locking mechanism used to synchronize access to a resource. Only one task can acquire the mutex. It means there will be ownership associated with mutex, and only the owner can release the lock (mutex). Semaphore (or Binary Semaphore) is signaling mechanism (“I am done, you can carry on” kind of signal). A binary semaphore is NOT protecting a resource from access. Semaphores are more suitable for some synchronization problems like producer-consumer. Short version:\nMutex can be released only by the thread that had acquired it. Binary Semaphore can be signaled by any thread (or process). Read vs Write lock Read Lock – if no thread acquired the write lock or requested for it then multiple threads can acquire the read lock Write Lock – if no threads are reading or writing then only one thread can acquire the write lock\nBulkhead pattern https://youtu.be/R2FT5edyKOg\nConcurrency CyclicBarrier - CyclicBarriers are used in programs in which we have a fixed number of threads that must wait for each other to reach a common point before continuing execution. Phaser CountDownLatch Exchanger - share objects between two threads of type T Semaphore SynchronousQueue More Questions ShutdownNow vs Shutdown Dynamic Striping - Striped64 class Deadlock vs Livelock Lock vs Synchronized Block ReentrantReadWriteLock.ReadLock vs ReentrantReadWriteLock.WriteLock Stamped lock - optimistic locking DelayQueue SQL Start a Postgres DB\n1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7\\c test-db 8 9docker stop pg-container 10docker start pg-container Create the tables \u0026amp; Seed the test data\n1create table department 2( 3 id serial not null 4 constraint department_pk 5 primary key, 6 name varchar 7); 8 9alter table department owner to test; 10 11create table employee 12( 13 id serial not null 14 constraint employee_pk 15 primary key, 16 name varchar, 17 salary integer, 18 department_id integer, 19 manager integer, 20 dob date 21); 22 23alter table employee owner to test; 24 25create table project 26( 27 id serial not null 28 constraint project_pk 29 primary key, 30 name varchar 31); 32 33alter table project owner to test; 34 35create table employee_project_mapping 36( 37 id serial not null 38 constraint employee_project_mapping_pk 39 primary key, 40 emp_id integer 41 constraint fk1 42 references employee 43 on update cascade on delete cascade, 44 project_id integer 45 constraint fk2 46 references project 47 on update cascade on delete cascade 48); 49 50alter table employee_project_mapping owner to test; 51 52INSERT INTO department (id, name) VALUES (1, \u0026#39;IT\u0026#39;); 53INSERT INTO department (id, name) VALUES (2, \u0026#39;Sales\u0026#39;); 54INSERT INTO department (id, name) VALUES (3, \u0026#39;Admin\u0026#39;); 55 56INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (1, \u0026#39;Joe\u0026#39;, 85000, 1, 5, \u0026#39;1990-02-10\u0026#39;); 57INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (2, \u0026#39;Henry\u0026#39;, 80000, 2, null, \u0026#39;1975-02-10\u0026#39;); 58INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (3, \u0026#39;Sam\u0026#39;, 60000, 2, 4, \u0026#39;1975-02-10\u0026#39;); 59INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (4, \u0026#39;Max\u0026#39;, 90000, 1, 5, \u0026#39;1981-02-10\u0026#39;); 60INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (5, \u0026#39;Janet\u0026#39;, 69000, 1, 1, \u0026#39;1983-02-10\u0026#39;); 61INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (6, \u0026#39;Max\u0026#39;, 84000, 1, 1, \u0026#39;2005-02-10\u0026#39;); 62INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (7, \u0026#39;Will\u0026#39;, 70000, 1, 1, \u0026#39;1982-02-10\u0026#39;); 63INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (8, \u0026#39;Raj\u0026#39;, 65000, null, 1, \u0026#39;1978-02-10\u0026#39;); 64INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (9, \u0026#39;Suresh\u0026#39;, 62000, null, 1, \u0026#39;1978-02-10\u0026#39;); 65INSERT INTO employee (id, name, salary, department_id, manager, dob) VALUES (10, \u0026#39;Sam\u0026#39;, 61000, 2, 1, \u0026#39;1985-02-10\u0026#39;); 66 67INSERT INTO project (id, name) VALUES (1, \u0026#39;Project 1\u0026#39;); 68INSERT INTO project (id, name) VALUES (2, \u0026#39;Project 2\u0026#39;); 69INSERT INTO project (id, name) VALUES (3, \u0026#39;Project 3\u0026#39;); 70INSERT INTO project (id, name) VALUES (4, \u0026#39;Project 4\u0026#39;); 71 72INSERT INTO employee_project_mapping (id, emp_id, project_id) VALUES (1, 1, 1); 73INSERT INTO employee_project_mapping (id, emp_id, project_id) VALUES (2, 1, 2); 74INSERT INTO employee_project_mapping (id, emp_id, project_id) VALUES (3, 3, 3); 75INSERT INTO employee_project_mapping (id, emp_id, project_id) VALUES (4, 4, 3); 76INSERT INTO employee_project_mapping (id, emp_id, project_id) VALUES (5, 5, 2); 77INSERT INTO employee_project_mapping (id, emp_id, project_id) VALUES (6, 6, 1); 78INSERT INTO employee_project_mapping (id, emp_id, project_id) VALUES (7, 7, 2); 1--SQL Query PostgreSQL 2 3--first max salary 4select distinct salary 5from employee 6order by salary desc 7limit 1; 8 9-- https://leetcode.com/problems/second-highest-salary/ 10-- second max salary 11select distinct salary 12from employee 13order by salary desc 14limit 1 offset 1; 15 16-- second max salary 17select max(salary) 18from employee 19where salary \u0026lt; (select max(salary) from employee); 20 21-- if 2nd salary doesnt exist show null 22select NULLIF( 23 (select distinct salary 24 from employee 25 order by salary Desc 26 limit 1 offset 1), null 27 ) as SecondHighestSalary; 28 29-- https://leetcode.com/problems/department-top-three-salaries/ 30-- top 3 salaries in each department 31select d.name, e.id, e.name, e.salary 32from employee e, 33 department d 34where e.department_id = d.id 35 and ( 36 select count(distinct (e2.salary)) 37 from employee e2 38 where e2.salary \u0026gt; e.salary 39 and e2.department_id = e.department_id 40 ) \u0026lt; 3 41order by (d.name, e.name); 42 43--max salary in each department 44select d.name, max(e.salary) 45from employee e, 46 department d 47where e.department_id = d.id 48group by d.id; 49 50--max salary in each department with employee name 51select d.name, e.id, e.name, e.salary 52from employee e, 53 department d 54where e.department_id = d.id 55 and ( 56 select count(distinct (e2.salary)) 57 from employee e2 58 where e2.salary \u0026gt; e.salary 59 and e.department_id = e2.department_id 60 ) \u0026lt; 1 61order by (d.name, e.name); 62 63--find all employee and department they work in, only show employees who have a department assigned. 64SELECT e.name, d.name 65FROM employee e 66 INNER JOIN department d ON e.department_id = d.id; 67 68--inner join 69SELECT e.name, d.name 70FROM employee e, 71 department d 72where e.department_id = d.id; 73 74--find all employee who dont have a department 75SELECT e.name, d.name 76FROM employee e 77 LEFT JOIN department d ON e.department_id = d.id 78where d.name is null; 79 80--find max salary in department even if no employee in it. 81SELECT d.name, max(e.salary) 82FROM employee e 83 RIGHT JOIN department d ON e.department_id = d.id 84GROUP BY d.name; 85 86--find department without an employee 87SELECT d.name, e.name 88FROM employee e 89 RIGHT JOIN department d ON e.department_id = d.id 90where e.name is null; 91 92--show all employee and department even if they dont have assignment 93SELECT e.name, d.name 94FROM employee e 95 FULL JOIN department d ON e.department_id = d.id; 96 97--find all employees having salary greater than average 98SELECT e.name, e.salary 99FROM employee e 100WHERE salary \u0026gt; (SELECT AVG(salary) from employee); 101 102-- find people with same name in same department 103SELECT e.name as emp_name, d.name as department 104FROM employee e, 105 department d 106where e.department_id = d.id 107group by emp_name, department 108having count(*) \u0026gt; 1; 109 110-- find all employees and their manager 111SELECT e.name, m.name 112FROM employee e, 113 employee m 114WHERE e.manager = m.id; 115 116-- find all employees who dont have a manager 117SELECT e.name, m.name 118FROM employee e 119 LEFT JOIN employee m on e.manager = m.id 120WHERE m.name is null; 121 122-- find all employees and their manager, if they dont have manager show null 123SELECT e.name, m.name 124FROM employee e 125 LEFT JOIN employee m on e.manager = m.id; 126 127-- find all employees and the projects they are working in along with department. 128-- one employee can work on multiple projects 129select e.name, d.name department, p.name project 130from employee e, 131 department d, 132 employee_project_mapping m, 133 project p 134where e.department_id = d.id 135 and e.id = m.emp_id 136 and m.project_id = p.id; 137 138-- find employees who age is greater than 25 139select e.name, e.dob, age(CURRENT_DATE, e.dob) 140from employee e 141where EXTRACT(YEAR FROM age(CURRENT_DATE, e.dob)) \u0026gt; 25; 142 143-- find the oldest employee 144select e.id, e.name, max(age(CURRENT_DATE, e.dob)) emp_age 145from employee e group by e.id, e.name 146order by emp_age desc limit 1; 147 148--find the project and number of employees working on it. 149select p.name project, count(*) 150from project p, 151 employee_project_mapping m, 152 employee e 153where p.id = m.project_id 154 and m.emp_id = e.id 155group by project; 156 157--find the projects with no employees 158select p.id, p.name 159from project p 160 left join employee_project_mapping m on p.id = m.project_id 161where m.emp_id is null; 162 163--find the employees with no project 164select e.id, e.name 165from employee e 166 left join employee_project_mapping m on e.id = m.emp_id 167where m.project_id is null; 168 169--oldest person in each department 170select d.name, e.id, e.name, e.dob 171from employee e, 172 department d 173where e.department_id = d.id 174 and ( 175 select count(distinct(e2.dob)) 176 from employee e2 177 where e.dob \u0026gt; e2.dob 178 and e.department_id = e2.department_id 179 ) \u0026lt; 1 180order by (d.name, e.name); 181 182--current date 183SELECT CURRENT_DATE; 184SELECT extract(year from CURRENT_DATE) as \u0026#34;Year\u0026#34;; 185 186--find all employee born between 1980-1990 187select * 188from employee e 189where e.dob between \u0026#39;01-01-1980\u0026#39; and \u0026#39;01-01-1990\u0026#39;; 190 191--find all employees who name begins with M 192select * 193from employee 194where name like \u0026#39;M%\u0026#39;; 195 196--find all employees other than Max 197select * 198from employee 199where name \u0026lt;\u0026gt; \u0026#39;Max\u0026#39;; 200 201--find all employees with name of Max 202select * 203from employee 204where name = \u0026#39;Max\u0026#39;; 205 206--find employees who are in project1 and project2 207select e.id, e.name 208from employee e, 209 employee_project_mapping m, 210 project p 211where m.emp_id = e.id 212 and m.project_id = p.id 213 and p.name = \u0026#39;Project 1\u0026#39; 214INTERSECT 215select e.id, e.name 216from employee e, 217 employee_project_mapping m, 218 project p 219where m.emp_id = e.id 220 and m.project_id = p.id 221 and p.name = \u0026#39;Project 2\u0026#39;; System Design Capacity planning Functional \u0026amp; Non-functional requirement. LRU + Caching Read vs write db, replication HDFS Zookeeper leader election quorum Chunking file CDN \u0026amp; Edge Servers Two phase (prepare \u0026amp; commit) \u0026amp; Three phase commit (prepare, pre-commit \u0026amp; commit) Horizontal partition, Vertical Partition Kafka, consumer group NoSQL Gateway Proxy vs Reverse Proxy Distributed tracing - Zipkin Observability - wavefront, prometheus, nagios Leader follower Locking TTL HTTPS, TLS Internal Map Reduce CAS - compare and swap Client side load balancing Canary vs Rolling vs Blue Green deployment GitOps Telemetry Pub Sub vs Queue Dirty Read vs Non-Repeatable Read vs Phantom Read FAAS Service Mesh Block chain - distributed ledger Indexing - Btree, B+tree, BitMap Concurrent HashMap Internals DDOS attack Race conditions Sticky Session Disaster recovery Auto scaling Batch vs Stream data processing vs Micro Batch RabbitMQ - fanout, direct, topic, header, default Star vs Snow flake schema Inverted indexing Time Series Database Hyperlog Short-Polling vs Long-Polling vs SSE (Server Sent Events) vs Websocket vs HTTP/2 Websocket Http/2 Server Send Event Long-Poll Full-duplex Half-duplex Half-duplex Half-duplex Bidirectional Unidirectional Unidirectional Unidirectional Text + Binary Text + Binary Text Text + Binary 1024 parallel connections 6-8 parallel connections 6-8 parallel connections Based on threads available Fork Join Fork/Join framework uses work-stealing algorithm. Work stealing is a scheduling strategy where worker threads that have finished their own tasks can steal pending tasks from other threads. Distributed Transaction \u0026amp; Saga https://youtu.be/jGJT1FRYGcY\nhttps://youtu.be/S4FnmSeRpAY\nIsolation Levels ISOLATION-LEVEL DIRTY-READ NON-REPEATABLE-READ PHANTOM-READ READ_UNCOMMITED YES YES YES READ_COMMITED NO YES YES READ_REPEATABLE NO NO YES READ_SERIALIZABLE NO NO NO Indexing https://youtu.be/-qNSXK7s7_w\nVertical Scaling vs Horizontal Scaling Datacenter Loadbalancer Types Software based Hardware based Database Scaling Read scaling - All writes goto one db node, which gets replicated to all read node db. Write scaling - Sharding Caching Different places to cache\nClient side caching Server side caching Proxy/Gateway side caching Types of Cache Spatial cache Temporal cache Distributed cache Cache Eviction Algorithms LRU (Least Recently Used) - replaces element that has not been used for long time. FIFO (First in First Out) LFU (Least Frequently Used) - replaces least frequently used page. Caching Strategy Message Broadcast Kafka https://youtu.be/Cie5v59mrTg\nRabbit MQ https://youtu.be/O1PgqUqZKTA\nRabbit MQ vs Kafka https://www.upsolver.com/blog/kafka-versus-rabbitmq-architecture-performance-use-case\nhttps://tanzu.vmware.com/developer/blog/understanding-the-differences-between-rabbitmq-vs-kafka/\nRabbit MQ Streams https://blog.rabbitmq.com/posts/2021/07/rabbitmq-streams-overview\nLong polling vs Short polling vs Websocket https://youtu.be/ZBM28ZPlin8\nJVM Memory \u0026amp; Garbage collectors Minor GC Major GC Proxy vs Reverse-Proxy Load Balancer L3 - IP Based L4 - DNS Based L7 - Application Based NoSQL vs Relational DB NoSQL RDBMS Non-Relational DB Relational DB No predefined schema, handles un-structured data Require a schema, handles structured data Can scale across machines Cant scale across machines easily BASE Principle of eventual consistency Honor ACID properties Structure can be Key-Value pairs, Document, Graph, Wide column Stricture is Table based CQRS - Command and Query Responsibility Segregation Pattern that separates read and update operations for a data store. Implementing CQRS in your application can maximize its performance, scalability, and security\nHTTP1.1 \u0026amp; HTTP/2 Protocol HTTPS Asymmetric encryption vs symmetric encryption\nThundering Herd Problem Tsunami Traffic Scaling up services takes time, Keep few services on standby if you anticipate heavy traffic. Configure auto-scaling based on key parameters. Scale on concurrent requests \u0026amp; not on CPU or memory usage. Design for scale down models as well along with scale up. Identify breaking point for each system. Plan for service denial via circuit breakers for new customers instead system wide outage for all customers. Serverless / FAAS (Function As A Service) Function is exposed as a service. Cost optimal, pay for only what you use. Bloom filter To determine 'Member of set' No false negative but can give false positive Less memory used Probabilistic algorithm Comp_Min Sketch Count frequency of events Uses less memory Probabilistic algorithm BitMap Bit Array, Uses less memory Each bit holds value Using AND / OR operation can merge many bitmaps Contention Avoid locks if you want to scale, as they cause contention around shared resources Do pre-work instead of on-demand if it avoids contention. Eg: Issue 1 Billion tickets, instead of updating a row in DB with locks/syncronization, load a queue with all 1 Billion tickets and users can pick from queue. Paxos Consensus over distribute system Leader election https://youtu.be/WX4gjowx45E\nhttps://youtu.be/s8JqcZtvnsM\nCAP Theorem https://youtu.be/KmGy3sU6Xw8\nDistributed System Things to consider while designing distributed system\nFault Tolerance \u0026amp; Retry - Always assume that things will fail and plan for it. Eg: Network failures, Disk failures Circuit Breaker Pattern - Instead of throwing error page handle service down gracefully. Service Discovery - All services register themselves. Observability - System is actively monitored. Fail-Over - Stand up server go live when primary servers dies. Throughput - The number of requests the system can process. Latency - Time taken to process the requests. Rate Limit - Restrict overuse of services by single or many users. Caching - Caching speeds up lookup however can bring in-consistency among caches. Bulk head pattern - Failure in one system should not bring down the whole system. Timeout - Ensure proper connection timeouts are set so that slow downstream service cant impact upstream service. Fail-fast - Prefer to fail fast than deal with slow latency, as it can cascade the effect in upstream services. Chaos Monkey - Randomly turn off systems to ensure system is fault tolerant. ACID Atomicity - All changes to data are performed as if they are a single operation Consistency - Data is in a consistent state when a transaction starts and when it ends. Isolation - The intermediate state of a transaction is not visible to other transactions. Durability - Data persisted survives even if system restarted. Partition vs Sharding Consistent Hashing Rate limit Token Bucket - Burst - Fixed token are added to bucket, bucket is always kept in full state. Can lead to burst of traffic. Token Bucket - Sustain - Constant token are added to bucket only if previous token are consumed. Smooth traffic. Leaky Bucket - Bucket size if fixed, if bucket full request are rejected, a processor de-queue bucket at fixed rate. Fixed Window - For the time period maintain a key,value pair. If counter is greater than rate limit reject. Leads to burst traffic around edges of time period. Sliding Log - Go over all previous nodes upto the time interval, in the link list and check rate limit exceeded, if yes then reject. Sliding Window Counter - Go over all previous nodes upto the time interval, in the link list and check if rate limit exceeded, if yes then reject. Instead of storing each request timestamp previous node stores the count. https://youtu.be/9CIjoWPwAhU\nhttps://youtu.be/FU4WlwfS3G0\nPush vs Pull RabbitMQ is push based, Kafka is pull based Push is expensive \u0026amp; real-time Pull is cheap but not real-time NIO Non-Blocking IO helps systems scale with fewer resources. The complete source to destination flow has to be non-blocking. Multi-Tenancy Multiple customers share same resource but customer are not aware of each other and instances are isolated. Kubernetes namespaces Authorization vs Authentication Authentication - Is the user allowed to use the system? Authorization - Does the user have the right role to execute that operation? Tips \u0026amp; Tricks Design a shopping application where users can browser products and buy them. If the products are rendered on a web page for each request, then the system won't scale. Browsing products is more frequent than buying something. Generate a static website and upload to CDN, only the buy calls the actual server API. Home pages or landing pages which are frequently hit perform better if they are static sites and on the CDN. Even for customized home pages like Netflix etc, generate static sites and avoid actual rest calls to servers as much as possible. Design a URL shortener service Design a Build Management service References https://www.youtube.com/c/NeetCode\nhttps://medium.com/interviewnoodle/grokking-leetcode-a-smarter-way-to-prepare-for-coding-interviews-e86d5c9fe4e1\nhttps://designgurus.org/course/grokking-the-coding-interview\nhttps://algs4.cs.princeton.edu/cheatsheet/\nhttps://www.bigocheatsheet.com/\nhttps://seanprashad.com/leetcode-patterns/\nhttps://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU\nhttps://walkccc.me/LeetCode/preface/\nhttps://github.com/resumejob/system-design-algorithms\nhttps://neetcode.io/\n","link":"https://gitorko.github.io/post/grokking-the-coding-interview/","section":"post","tags":["coding","interview","algorithms","data-structure"],"title":"Grokking the Coding Interview"},{"body":"","link":"https://gitorko.github.io/tags/interview/","section":"tags","tags":null,"title":"interview"},{"body":"","link":"https://gitorko.github.io/categories/leetcode/","section":"categories","tags":null,"title":"leetcode"},{"body":"","link":"https://gitorko.github.io/tags/docker/","section":"tags","tags":null,"title":"docker"},{"body":"","link":"https://gitorko.github.io/categories/docker/","section":"categories","tags":null,"title":"Docker"},{"body":"","link":"https://gitorko.github.io/tags/helm/","section":"tags","tags":null,"title":"helm"},{"body":"","link":"https://gitorko.github.io/categories/helm/","section":"categories","tags":null,"title":"Helm"},{"body":"","link":"https://gitorko.github.io/categories/jenkins/","section":"categories","tags":null,"title":"Jenkins"},{"body":"","link":"https://gitorko.github.io/tags/jib/","section":"tags","tags":null,"title":"jib"},{"body":"","link":"https://gitorko.github.io/tags/kubernetes/","section":"tags","tags":null,"title":"kubernetes"},{"body":"Spring Boot development with docker \u0026amp; kubernetes.\nGithub: https://github.com/gitorko/project61\nKubernetes Rancher Desktop Rancher Desktop allows you to run Kubernetes on your local machine. Its free and open-source.\nDisable Traefik, select dockerd as container in the settings.\nIf you get the below error when you run kubectl, its mostly due to .kubeconfig file already present from docker desktop installation.\n1I0804 20:09:34.857149 37711 versioner.go:58] Get \u0026#34;https://kubernetes.docker.internal:6443/version?timeout=5s\u0026#34;: x509: certificate signed by unknown authority 2Unable to connect to the server: x509: certificate signed by unknown authority Delete the .kube folder and restart Rancher Desktop.\n1rm -rf ~/.kube Docker Desktop Docker Desktop allows you to run Kubernetes on your local machine. Do refer the latest licensing terms as they have changed.\nOnce kubernetes is running, check kubectl.\n1export KUBECONFIG=~/.kube/config 2kubectl version Kubernetes Dashboard If you want to visualize the kubernetes infra, you can install the dashboard UI.\nhttps://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/\n1kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml 2kubectl proxy Open the dashboard url in a browser\nhttp://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\nTo get the token to login run the below command\n1kubectl -n kube-system describe secret default|grep -i \u0026#39;token:\u0026#39;|awk \u0026#39;{print $2}\u0026#39; 2kubectl config set-credentials docker-for-desktop --token=\u0026#34;${TOKEN}\u0026#34; Now provide the token and login.\nClean up\n1kubectl --namespace kube-system get all 2kubectl delete -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml Build \u0026amp; Deployment Build the project\n1git clone https://github.com/gitorko/project61.git 2cd project61 3./gradlew clean build Docker There are 2 ways you can build the docker image, either run the docker build command or use the google jib library.\nTo build via docker build command\n1docker build -f k8s/Dockerfile --force-rm -t project61:1.0.0 . 2docker images | grep project61 To build via jib plugin run the below command. This way building the docker image can be part of the build process\n1./gradlew jibDockerBuild Test if the docker image is working\n1docker rm project61 2docker run -p 9090:9090 --name project61 project61:1.0.0 http://localhost:9090/api/time\nDaemon mode\n1docker run -d -p 9090:9090 --name project61 project61:1.0.0 2docker image prune Kubernetes Basics Now let's deploy the project on a kubernetes cluster. Check if kubernetes commands work\n1kubectl version 2kubectl config get-contexts 3kubectl config use-context docker-desktop 4kubectl config set-context --current --namespace=default 5kubectl get nodes 6kubectl get ns 7kubectl get all 8kubectl cluster-info We will now deploy just the docker image in kubernetes without needing any yaml files and using port forwarding access the api. Very rarely you will need to do this as most k8s deployment is done via yaml.\n1kubectl run project61-k8s --image project61:1.0.0 --image-pull-policy=Never --port=9090 2kubectl port-forward project61-k8s 9090:9090 http://localhost:9090/api/time\nYou can also create a service and access the pod. Get the port from the NodePort. Again this is to understand the fundamentals, a yaml file will be used later.\n1kubectl expose pod project61-k8s --type=NodePort 2kubectl get -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; services project61-k8s Change the port that you got in the last command and test this api: http://localhost:/api/time\nCheck the pods,services \u0026amp; deployments.\n1kubectl get all You can access the bash terminal of the pod\n1kubectl get pods 2kubectl exec -it project61-k8s -- /bin/bash 3ls Clean up.\n1kubectl delete pod project61-k8s 2kubectl delete service project61-k8s 3kubectl get all Kubernetes Yaml Now we will deploy via the kubernetes yaml file.\n1kubectl apply -f k8s/Deployment.yaml --dry-run=client --validate=true 2kubectl apply -f k8s/Deployment.yaml http://localhost:9090/api/time\nScale the deployment\n1kubectl scale deployment project61-k8s --replicas=3 Look at the logs\n1kubectl logs -f deployment/project61-k8s --all-containers=true --since=10m Clean up\n1kubectl delete -f k8s/Deployment.yaml Helm Now lets deploy the same project via helm charts\n1brew install helm 1helm version 2helm install project61 mychart 3helm list 4kubectl get pod,svc,deployment Get the url and invoke the api\n1curl http://$(kubectl get svc/project61-k8s -o jsonpath=\u0026#39;{.status.loadBalancer.ingress[0].hostname}\u0026#39;):9090/api/time 1http://localhost:9090/api/time Clean up\n1helm uninstall project61 Debugging To attach a debugger to the application follow the below steps\nDocker Debug To debug the docker image start the pod with the debug port on 5005 enabled.\n1docker stop project61 2docker rm project61 3docker run -p 9090:9090 -p 5005:5005 --name project61 project61:1.0.0 Enable remote JVM debug in intellij\n1-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 http://localhost:9090/api/time\nNow when you request the api, the debug breakpoint in intellij is hit.\nKubernetes Debug To debug the kubernetes pod start port forwarding to the port 5005\n1kubectl get pod 2kubectl port-forward pod/\u0026lt;POD_NAME\u0026gt; 5005:5005 Now when you request the api, the debug breakpoint in intellij is hit.\nTelepresence To debug the kubernetes pod you can use telepresence. It will swap the prod running on kubernetes with a proxy pod that redirects traffic to your local setup.\nInstall telepresence\n1sudo curl -fL https://app.getambassador.io/download/tel2/darwin/amd64/latest/telepresence -o /usr/local/bin/telepresence 2sudo chmod a+x /usr/local/bin/telepresence Start the project61 application in debug mode in intellij, change the port to 9095 in application yaml, as we will be testing debugging locally.\nRun the telepresence command, that will swap the kubernetes pod with a proxy pod and redirect all requests on 9090 to 9095.\n1telepresence --namespace=default --swap-deployment project61-k8s --expose 9095:9090 --run-shell 2kubectl get pods Note that port here is 9090 that is the kubernetes port for incoming requests. Telepresence will redirect these to 9095 port where your local instance is running.\nhttp://localhost:9090/api/time\nNow when you request the api, the debug breakpoint in intellij is hit.\nJVM Monitoring To hook jConsole or VisualVM\nDocker To connect to JMX port, start docker image with port 9095 exposed. The docker image already has the settings to enable JMX.\n1docker stop project61 2docker rm project61 3docker run -p 9090:9090 -p 9095:9095 --name project61 project61:1.0.0 Kubernetes To connect to JMX port, start port forwarding, The docker image already has the settings to enable JMX.\n1kubectl get pod 2kubectl port-forward pod/\u0026lt;POD_NAME\u0026gt; 9095:9095 VisualVM Connect to the port\n1http://localhost:9095 JConsole 1jconsole 127.0.0.1:9095 Jenkins CI/CD Fork the github project61 repo so you have your own github project to push the code \u0026amp; clone it.\nhttps://github.com/gitorko/project61\nDownload the jenkins war file and run the below command.\nhttps://www.jenkins.io/\n1java -jar jenkins.war --httpPort=\u0026#39;8088\u0026#39; http://localhost:8088/\nFollow the default steps to install plugin and configure jenkins. The default password is printed in the console log.\nGoto Global Tool Configuration and add Java 17, Maven\nAdd the kubernetes config as a credential\n1/Users/$USER/.kube/config Install the kubernetes CLI plugin\nhttps://plugins.jenkins.io/kubernetes-cli/\nThen create a pipeline item and copy the content of Jenkinsfile, Enter the GitHub url of your forked project. Save and run the job.\n1pipeline { 2 agent any 3 4 tools { 5 jdk \u0026#34;jdk-17\u0026#34; 6 maven \u0026#34;maven3\u0026#34; 7 } 8 9 stages { 10 stage(\u0026#39;Checkout\u0026#39;) { 11 steps { 12 //TODO: Change to forked repo 13 git url: \u0026#39;https://github.com/gitorko/project61\u0026#39;, branch: \u0026#39;master\u0026#39; 14 } 15 } 16 stage(\u0026#39;Build\u0026#39;) { 17 steps { 18 sh \u0026#34;./gradlew clean build\u0026#34; 19 } 20 post { 21 // record the test results and archive the jar file. 22 success { 23 junit \u0026#39;build/test-results/test/TEST-*.xml\u0026#39; 24 archiveArtifacts \u0026#39;build/libs/*.jar\u0026#39; 25 } 26 } 27 } 28 stage(\u0026#39;Build Docker Image\u0026#39;) { 29 steps { 30 sh \u0026#34;./gradlew jibDockerBuild -Djib.to.tags=$BUILD_NUMBER\u0026#34; 31 } 32 post { 33 // record the test results and archive the jar file. 34 success { 35 junit \u0026#39;build/test-results/test/TEST-*.xml\u0026#39; 36 archiveArtifacts \u0026#39;build/libs/*.jar\u0026#39; 37 } 38 } 39 } 40 stage (\u0026#39;Push Docker Image\u0026#39;) { 41 steps { 42 //TODO: docker hub push 43 echo \u0026#34;Pushing docker image\u0026#34; 44 } 45 } 46 stage(\u0026#39;Deploy\u0026#39;) { 47 steps { 48 withKubeConfig([credentialsId: \u0026#39;kubernetes-config\u0026#39;]) { 49 sh \u0026#39;\u0026#39;\u0026#39; 50cat \u0026lt;\u0026lt;EOF | kubectl apply -f - 51apiVersion: apps/v1 52kind: Deployment 53metadata: 54 name: project61-k8s 55spec: 56 selector: 57 matchLabels: 58 app: project61-k8s 59 strategy: 60 rollingUpdate: 61 maxSurge: 1 62 maxUnavailable: 1 63 type: RollingUpdate 64 replicas: 1 65 template: 66 metadata: 67 labels: 68 app: project61-k8s 69 spec: 70 containers: 71 - name: project61 72 image: project61:$BUILD_NUMBER 73 imagePullPolicy: IfNotPresent 74 ports: 75 - containerPort: 9090 76 resources: 77 limits: 78 cpu: \u0026#34;1\u0026#34; 79 memory: \u0026#34;500Mi\u0026#34; 80--- 81kind: Service 82apiVersion: v1 83metadata: 84 name: project61-k8s 85spec: 86 ports: 87 - port: 9090 88 targetPort: 9090 89 name: http 90 selector: 91 app: project61-k8s 92 type: LoadBalancer 93 \u0026#39;\u0026#39;\u0026#39; 94 } 95 } 96 } 97 } 98} Each jenkins job run creates a docker image version by build number, kubectl terminates the old pod and starts the new pod.\n1docker images |grep project61 2kubectl get pods -w Clean up the docker images as they consume space.\n1docker rmi project61:1 2kubectl delete -f k8s/Deployment.yaml You can configure a 'GitHub hook trigger for GITScm polling' to deploy when a commit is pushed to github.\nResources Kubernetes Samples Build a custom nginx image\n1docker build -f k8s-manifest/Dockerfile1 --force-rm -t my-nginx:1 . 2docker build -f k8s-manifest/Dockerfile2 --force-rm -t my-nginx:2 . Create an alias for kubectl as k\n1alias k=\u0026#34;kubectl\u0026#34; https://kubernetes.io/docs/reference/kubectl/cheatsheet/\n01. Create a simple pod 1k apply -f k8s-manifest/01-create-pod.yaml 2k get all 3k delete -f k8s-manifest/01-create-pod.yaml 4k logs pod/counter 5k describe pod/counter 02. Create ngnix pod, use port forward to access Create nginx pod and enter pods bash prompt\n1k apply -f k8s-manifest/02-nginx-pod.yaml 2k get all 3k port-forward pod/nginx 8080:80 4k exec -it pod/nginx -- /bin/sh 5k delete -f k8s-manifest/02-nginx-pod.yaml http://localhost:8080/\n03. Create ngnix pod with html updated by another container in same pod 1k apply -f k8s-manifest/03-nginx-pod-volume.yaml 2k get pods -w 3kubectl get -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; service/nginx-service 4k delete -f k8s-manifest/03-nginx-pod-volume.yaml http://localhost:31000/\n04. Create job Run once and stop. output is kept till you delete it.\n1k apply -f k8s-manifest/04-job.yaml 2k get all 3k delete -f k8s-manifest/04-job.yaml 05. Liveness probe Liveness probe determines when pod is healthy, here file is deleted after 30 seconds causing pod to restart\n1k apply -f k8s-manifest/05-liveness-probe.yaml 2k get pods -w 3k delete -f k8s-manifest/05-liveness-probe.yaml 06. Readiness probe Readiness probe determines when to send traffic\n1k apply -f k8s-manifest/06-readiness-probe.yaml 2k port-forward pod/nginx 8080:80 3k delete -f k8s-manifest/06-readiness-probe.yaml http://localhost:8080/\n07. Cron Job Cron job runs every minute\n1k apply -f k8s-manifest/07-cron-job.yaml 2k get job.batch -w 3k delete -f k8s-manifest/07-cron-job.yaml 08. Config Configure configMap and secrets.\n1k apply -f k8s-manifest/08-config.yaml 2k logs pod/busybox 3k delete -f k8s-manifest/08-config.yaml config map as volume\n1k apply -f k8s-manifest/08-config-volume.yaml 2k logs -f pod/busybox 3k edit configmap app-setting 4k get configmap app-setting -o yaml 5k exec -it pod/busybox -- /bin/sh 6 7k delete -f k8s-manifest/08-config-volume.yaml 09. Deployment with Load Balancer 1k apply -f k8s-manifest/09-deployment.yaml 2k get all 3k port-forward service/nginx-service 8080:8080 4 5k scale deployment.apps/nginx --replicas=0 6k scale deployment.apps/nginx --replicas=3 7 8k delete -f k8s-manifest/09-deployment.yaml http://localhost:8080/\n10. External service Proxies to external name\n1k apply -f k8s-manifest/10-external-service.yaml 2k get services 3k delete -f k8s-manifest/10-external-service.yaml 11. Host Path Volume 1k apply -f k8s-manifest/11-volume-host-path.yaml 2k get all 3k delete -f k8s-manifest/11-volume-host-path.yaml http://localhost:31000/\n12. Persistent Volume \u0026amp; Persistent Volume Claim 1k apply -f k8s-manifest/12-pesistent-volume.yaml 2k get pv 3k get pvc 4k get all 5k delete -f k8s-manifest/12-pesistent-volume.yaml http://localhost:31000/\n14. Blue Green Deployment 1k apply -f k8s-manifest/14-deployment-blue-green.yaml 2k apply -f k8s-manifest/14-deployment-blue-green-flip.yaml 3 4k delete service/nginx-blue 5k delete deployment/nginx-v1 6 7k delete -f k8s-manifest/14-deployment-blue-green.yaml http://localhost:31000/ http://localhost:31000/\n15. Canary Deployment 1k apply -f k8s-manifest/15-deployment-canary.yaml 2 3k delete deployment/nginx-v2 4 5k delete -f k8s-manifest/15-deployment-canary.yaml 1while true; do curl http://localhost:31000/; sleep 2; done http://localhost:31000/\nReferences https://github.com/GoogleContainerTools/jib\nhttps://www.docker.com/products/docker-desktop/\nhttps://rancherdesktop.io/\nhttps://birthday.play-with-docker.com/kubernetes-docker-desktop/\nhttps://helm.sh/\nhttps://www.getambassador.io/docs/telepresence/latest/quick-start/qs-java/\nhttps://visualvm.github.io/\nhttps://www.eclipse.org/mat/\nhttps://www.jenkins.io/\nhttps://plugins.jenkins.io/kubernetes/\n","link":"https://gitorko.github.io/post/kubernetes-basics/","section":"post","tags":["docker","kubernetes","helm","telepresence","rancher","jib"],"title":"Kubernetes - Basics"},{"body":"","link":"https://gitorko.github.io/tags/rancher/","section":"tags","tags":null,"title":"rancher"},{"body":"","link":"https://gitorko.github.io/tags/telepresence/","section":"tags","tags":null,"title":"telepresence"},{"body":"","link":"https://gitorko.github.io/tags/bootstrap/","section":"tags","tags":null,"title":"bootstrap"},{"body":"","link":"https://gitorko.github.io/tags/google-chart/","section":"tags","tags":null,"title":"google-chart"},{"body":"","link":"https://gitorko.github.io/tags/jwt/","section":"tags","tags":null,"title":"jwt"},{"body":"","link":"https://gitorko.github.io/tags/reactjs/","section":"tags","tags":null,"title":"reactjs"},{"body":"","link":"https://gitorko.github.io/categories/reactjs/","section":"categories","tags":null,"title":"ReactJS"},{"body":"Spring Boot web application with reactjs and JWT authentication support, uses bootstrap and google chart. Creates uber jar to deploy.\nGithub: https://github.com/gitorko/project89\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project89 2cd project89 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nFeatures A Spring Web application with reactjs. Supports JWT authentication and provides login \u0026amp; logout features. Uses Spring Data to persist data into the postgres db. Spring dev tools allow seamless reload on any changes for java files.\nReactJS app supports basic JWT authentication Bootstrap 5 CRUD UI for adding and removing customer to db. Charts for bar,pie,stack charts with data from rest api Design Code To allow spring dev tools to reload on change you need to enable 'Update classes and resources' in Intellij as shown below\n1package com.demo.project89.controller; 2 3import java.util.Date; 4 5import com.demo.project89.domain.Customer; 6import com.demo.project89.repo.CustomerRepository; 7import lombok.RequiredArgsConstructor; 8import lombok.extern.slf4j.Slf4j; 9import org.springframework.security.access.prepost.PreAuthorize; 10import org.springframework.web.bind.annotation.DeleteMapping; 11import org.springframework.web.bind.annotation.GetMapping; 12import org.springframework.web.bind.annotation.PathVariable; 13import org.springframework.web.bind.annotation.PostMapping; 14import org.springframework.web.bind.annotation.RequestBody; 15import org.springframework.web.bind.annotation.RestController; 16 17@RestController 18@Slf4j 19@RequiredArgsConstructor 20public class HomeController { 21 22 final CustomerRepository customerRepo; 23 24 @GetMapping(value = \u0026#34;/api/time\u0026#34;) 25 public Date serverTime() { 26 log.info(\u0026#34;Getting server time!\u0026#34;); 27 return new Date(); 28 } 29 30 @GetMapping(value = \u0026#34;/api/customer\u0026#34;) 31 @PreAuthorize(\u0026#34;hasRole(\u0026#39;ROLE_USER\u0026#39;) or hasRole(\u0026#39;ROLE_ADMIN\u0026#39;)\u0026#34;) 32 public Iterable\u0026lt;Customer\u0026gt; getCustomers() { 33 return customerRepo.findAll(); 34 } 35 36 @PreAuthorize(\u0026#34;hasRole(\u0026#39;ROLE_ADMIN\u0026#39;)\u0026#34;) 37 @PostMapping(value = \u0026#34;/api/customer\u0026#34;) 38 public Customer saveCustomer(@RequestBody Customer customer) { 39 log.info(\u0026#34;Saving customer!\u0026#34;); 40 return customerRepo.save(customer); 41 } 42 43 @PreAuthorize(\u0026#34;hasRole(\u0026#39;ROLE_ADMIN\u0026#39;)\u0026#34;) 44 @DeleteMapping(value = \u0026#34;/api/customer/{id}\u0026#34;) 45 public void deleteCustomer(@PathVariable Long id) { 46 log.info(\u0026#34;Deleting customer: {}\u0026#34;, id); 47 customerRepo.deleteById(id); 48 } 49 50} Spring security is configured for JWT authentication.\n1package com.demo.project89.security; 2 3import com.demo.project89.service.UserDetailsServiceImpl; 4import lombok.RequiredArgsConstructor; 5import org.springframework.context.annotation.Bean; 6import org.springframework.context.annotation.Configuration; 7import org.springframework.http.HttpMethod; 8import org.springframework.security.authentication.AuthenticationManager; 9import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; 10import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; 11import org.springframework.security.config.annotation.web.builders.HttpSecurity; 12import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; 13import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; 14import org.springframework.security.config.http.SessionCreationPolicy; 15import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; 16import org.springframework.security.crypto.password.PasswordEncoder; 17import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; 18 19@Configuration 20@EnableWebSecurity 21@EnableGlobalMethodSecurity(prePostEnabled = true) 22@RequiredArgsConstructor 23public class SecurityConfig extends WebSecurityConfigurerAdapter { 24 25 final UserDetailsServiceImpl userDetailsService; 26 final JwtAuthEntryPoint authenticationEntryPoint; 27 28 @Override 29 public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception { 30 authenticationManagerBuilder.userDetailsService(userDetailsService) 31 .passwordEncoder(passwordEncoder()); 32 } 33 34 @Bean 35 public PasswordEncoder passwordEncoder() { 36 return new BCryptPasswordEncoder(); 37 } 38 39 @Bean 40 @Override 41 public AuthenticationManager authenticationManagerBean() throws Exception { 42 return super.authenticationManagerBean(); 43 } 44 45 @Bean 46 public JwtTokenFilter jwtTokenFilter() { 47 return new JwtTokenFilter(); 48 } 49 50 @Override 51 protected void configure(HttpSecurity httpSecurity) throws Exception { 52 httpSecurity.cors().and().csrf().disable() 53 .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint).and() 54 .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and() 55 .authorizeRequests().antMatchers(\u0026#34;/api/auth/**\u0026#34;).permitAll() 56 .antMatchers(HttpMethod.GET, \u0026#34;/api/time\u0026#34;).permitAll() 57 .antMatchers(\u0026#34;/api/**\u0026#34;).authenticated() 58 .anyRequest().permitAll(); 59 httpSecurity.addFilterBefore(jwtTokenFilter(), UsernamePasswordAuthenticationFilter.class); 60 } 61} 1import MenuBar from \u0026#34;../components/MenuBar\u0026#34; 2import PropTypes from \u0026#39;prop-types\u0026#39; 3import {useEffect, useState} from \u0026#39;react\u0026#39; 4import {Alert, Button, Col, Container, Form, Row, Table} from \u0026#34;react-bootstrap\u0026#34; 5import {Trash} from \u0026#39;react-bootstrap-icons\u0026#39; 6import RestService from \u0026#34;../services/RestService\u0026#34; 7import AuthService from \u0026#34;../services/AuthService\u0026#34; 8import {useNavigate} from \u0026#34;react-router-dom\u0026#34;; 9 10function Home() { 11 12 let navigate = useNavigate(); 13 const [customers, setCustomers] = useState([]) 14 const [time, setTime] = useState() 15 const [customer, setCustomer] = useState({ 16 firstName: \u0026#39;\u0026#39;, 17 lastName: \u0026#39;\u0026#39; 18 }) 19 const [flashMsg, setFlashMsg] = useState({ 20 success: \u0026#39;\u0026#39;, 21 error: \u0026#39;\u0026#39; 22 }) 23 24 const getCustomers = async () =\u0026gt; { 25 const customersFromServer = await RestService.fetchCustomers() 26 setCustomers(customersFromServer) 27 } 28 29 const deleteCustomer = async (id: any) =\u0026gt; { 30 RestService.deleteCustomer(id).then((res) =\u0026gt; { 31 if (res) { 32 setCustomers(customers.filter((customer) =\u0026gt; { 33 // @ts-ignore 34 return customer.id !== id; 35 })) 36 setFlashMsg({ 37 ...flashMsg, 38 \u0026#39;success\u0026#39;: \u0026#39;Deleted user: \u0026#39; + id 39 }) 40 } else { 41 alert(\u0026#39;Error in delete!\u0026#39;) 42 } 43 }) 44 } 45 46 const onSubmit = (e: any) =\u0026gt; { 47 e.preventDefault() 48 if (!customer.firstName || !customer.lastName) { 49 alert(\u0026#39;Please enter the values\u0026#39;) 50 return 51 } 52 addCustomer(customer) 53 setCustomer({ 54 firstName: \u0026#39;\u0026#39;, 55 lastName: \u0026#39;\u0026#39; 56 }) 57 setFlashMsg({ 58 ...flashMsg, 59 \u0026#39;success\u0026#39;: \u0026#39;Successfully added user by: \u0026#39; + AuthService.getUser() 60 }) 61 } 62 63 const addCustomer = async (customer: any) =\u0026gt; { 64 RestService.addCustomer(customer).then((data) =\u0026gt; { 65 // @ts-ignore 66 setCustomers([...customers, data]) 67 }) 68 } 69 70 const handleChange = (e: any) =\u0026gt; { 71 setCustomer({ 72 ...customer, 73 [e.target.name]: e.target.value 74 }); 75 } 76 77 useEffect(() =\u0026gt; { 78 if (!AuthService.isAuthenticated()) { 79 navigate(\u0026#39;/login\u0026#39;); 80 return 81 } 82 setFlashMsg({ 83 success: \u0026#39;\u0026#39;, 84 error: \u0026#39;\u0026#39; 85 }) 86 RestService.getTime().then(res =\u0026gt; setTime(res)) 87 getCustomers() 88 }, []) 89 90 // @ts-ignore 91 Home.propTypes = { 92 title: PropTypes.string, 93 onClick: PropTypes.func, 94 } 95 96 return ( 97 \u0026lt;\u0026gt; 98 \u0026lt;MenuBar/\u0026gt; 99 \u0026lt;br/\u0026gt; 100 \u0026lt;Container\u0026gt; 101 \u0026lt;Row\u0026gt; 102 \u0026lt;Col className={\u0026#34;text-center\u0026#34;}\u0026gt; 103 \u0026lt;p className=\u0026#34;text-end\u0026#34;\u0026gt;Server Time : {time}\u0026lt;/p\u0026gt; 104 \u0026lt;/Col\u0026gt; 105 \u0026lt;/Row\u0026gt; 106 \u0026lt;br/\u0026gt; 107 108 {flashMsg.success \u0026amp;\u0026amp; ( 109 \u0026lt;Row\u0026gt; 110 \u0026lt;Col\u0026gt; 111 \u0026lt;Alert key=\u0026#34;home-flash\u0026#34; variant=\u0026#34;success\u0026#34;\u0026gt; 112 {flashMsg.success} 113 \u0026lt;/Alert\u0026gt; 114 \u0026lt;/Col\u0026gt; 115 \u0026lt;/Row\u0026gt; 116 )} 117 118 \u0026lt;Row\u0026gt; 119 \u0026lt;Col className={\u0026#34;text-center\u0026#34;}\u0026gt; 120 \u0026lt;h2\u0026gt;Customers\u0026lt;/h2\u0026gt; 121 \u0026lt;/Col\u0026gt; 122 \u0026lt;/Row\u0026gt; 123 \u0026lt;br/\u0026gt; 124 125 \u0026lt;Row\u0026gt; 126 \u0026lt;Col md={\u0026#34;4\u0026#34;}\u0026gt; 127 \u0026lt;Form onSubmit={onSubmit}\u0026gt; 128 \u0026lt;Form.Group controlId=\u0026#34;formFirstName\u0026#34; className={\u0026#34;mb-3\u0026#34;}\u0026gt; 129 \u0026lt;Form.Label\u0026gt;First Name\u0026lt;/Form.Label\u0026gt; 130 \u0026lt;Form.Control type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Enter First Name\u0026#34; name=\u0026#34;firstName\u0026#34; 131 value={customer.firstName} onChange={handleChange}/\u0026gt; 132 \u0026lt;Form.Text className=\u0026#34;text-muted\u0026#34;\u0026gt; 133 Enter first name! 134 \u0026lt;/Form.Text\u0026gt; 135 \u0026lt;/Form.Group\u0026gt; 136 137 \u0026lt;Form.Group controlId=\u0026#34;formLastName\u0026#34; className={\u0026#34;mb-3\u0026#34;}\u0026gt; 138 \u0026lt;Form.Label\u0026gt;LastName\u0026lt;/Form.Label\u0026gt; 139 \u0026lt;Form.Control type=\u0026#34;text\u0026#34; placeholder=\u0026#34;LastName\u0026#34; name=\u0026#34;lastName\u0026#34; 140 value={customer.lastName} onChange={handleChange}/\u0026gt; 141 \u0026lt;/Form.Group\u0026gt; 142 143 \u0026lt;Button variant=\u0026#34;primary\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt; 144 Submit 145 \u0026lt;/Button\u0026gt; 146 \u0026lt;/Form\u0026gt; 147 \u0026lt;/Col\u0026gt; 148 \u0026lt;Col md={\u0026#34;8\u0026#34;}\u0026gt; 149 \u0026lt;Table striped bordered hover\u0026gt; 150 \u0026lt;thead\u0026gt; 151 \u0026lt;tr\u0026gt; 152 \u0026lt;th\u0026gt;First Name\u0026lt;/th\u0026gt; 153 \u0026lt;th\u0026gt;Last Name\u0026lt;/th\u0026gt; 154 \u0026lt;th\u0026gt;Action\u0026lt;/th\u0026gt; 155 \u0026lt;/tr\u0026gt; 156 \u0026lt;/thead\u0026gt; 157 \u0026lt;tbody\u0026gt; 158 {customers.map((customer: any) =\u0026gt; ( 159 \u0026lt;tr key={customer.id}\u0026gt; 160 \u0026lt;td\u0026gt;{customer.firstName}\u0026lt;/td\u0026gt; 161 \u0026lt;td\u0026gt;{customer.lastName}\u0026lt;/td\u0026gt; 162 \u0026lt;td\u0026gt;\u0026lt;Trash onClick={() =\u0026gt; deleteCustomer(customer.id)} 163 style={{color: \u0026#39;red\u0026#39;, cursor: \u0026#39;pointer\u0026#39;}}/\u0026gt;\u0026lt;/td\u0026gt; 164 \u0026lt;/tr\u0026gt; 165 ))} 166 \u0026lt;/tbody\u0026gt; 167 \u0026lt;/Table\u0026gt; 168 \u0026lt;/Col\u0026gt; 169 \u0026lt;/Row\u0026gt; 170 \u0026lt;/Container\u0026gt; 171 \u0026lt;/\u0026gt; 172 ) 173} 174 175export default Home 1import MenuBar from \u0026#34;../components/MenuBar\u0026#34;; 2import {Col, Container, Row} from \u0026#34;react-bootstrap\u0026#34;; 3import {useEffect, useState} from \u0026#34;react\u0026#34;; 4import RestService from \u0026#34;../services/RestService\u0026#34; 5import {useNavigate} from \u0026#39;react-router-dom\u0026#39;; 6import {Chart} from \u0026#34;react-google-charts\u0026#34;; 7import AuthService from \u0026#34;../services/AuthService\u0026#34;; 8 9function ChartApp() { 10 11 let navigate = useNavigate(); 12 const [pieData, setPieData] = useState\u0026lt;any\u0026gt;([]) 13 const [barData, setBarData] = useState\u0026lt;any\u0026gt;([]) 14 const [lineData, setLineData] = useState\u0026lt;any\u0026gt;([]) 15 const [columnData, setColumnData] = useState\u0026lt;any\u0026gt;([]) 16 17 const pieOptions = { 18 title: \u0026#39;My Pie Chart\u0026#39;, 19 }; 20 21 const barOptions = { 22 title: \u0026#39;My Bar Chart\u0026#39;, 23 }; 24 25 const lineOptions = { 26 title: \u0026#39;My Line Chart\u0026#39;, 27 } 28 29 const columnOptions = { 30 title: \u0026#39;My Column Chart\u0026#39;, 31 } 32 33 const pieChart = () =\u0026gt; { 34 RestService.getPieDataFromServer().then(res =\u0026gt; { 35 const chartData = [[\u0026#39;Region\u0026#39;, \u0026#39;Amount\u0026#39;]] 36 for (let i = 0; i \u0026lt; res[1].length; i += 1) { 37 chartData.push([res[0][i], res[1][i]]) 38 } 39 setPieData({data: chartData}) 40 }) 41 } 42 43 const barChart = () =\u0026gt; { 44 RestService.getPieDataFromServer().then(res =\u0026gt; { 45 const chartData = [[\u0026#39;Region\u0026#39;, \u0026#39;Amount\u0026#39;]] 46 for (let i = 0; i \u0026lt; res[1].length; i += 1) { 47 chartData.push([res[0][i], res[1][i]]) 48 } 49 setBarData({data: chartData}) 50 }) 51 } 52 53 const lineChart = () =\u0026gt; { 54 RestService.getPieDataFromServer().then(res =\u0026gt; { 55 const chartData = [[\u0026#39;Region\u0026#39;, \u0026#39;Amount\u0026#39;]] 56 for (let i = 0; i \u0026lt; res[1].length; i += 1) { 57 chartData.push([res[0][i], res[1][i]]) 58 } 59 setLineData({data: chartData}) 60 }) 61 } 62 63 const columnChart = () =\u0026gt; { 64 RestService.getColumnDataFromServer().then(res =\u0026gt; { 65 const chartData = [] 66 const rowData = [] 67 rowData.push(\u0026#34;Fruit\u0026#34;) 68 for (let i = 0; i \u0026lt; res[0][\u0026#34;data\u0026#34;].length; i++) { 69 rowData.push(res[0][\u0026#34;data\u0026#34;][i]); 70 } 71 chartData.push(rowData) 72 for (let i = 1; i \u0026lt; res.length; i++) { 73 const rowValData = [] 74 rowValData.push(res[i][\u0026#34;name\u0026#34;]); 75 for(let j = 0; j\u0026lt; res[i][\u0026#34;data\u0026#34;].length; j++) { 76 rowValData.push(res[i][\u0026#34;data\u0026#34;][j]); 77 } 78 chartData.push(rowValData) 79 } 80 setColumnData({data: chartData}) 81 }) 82 } 83 84 useEffect(() =\u0026gt; { 85 if (!AuthService.isAuthenticated()) { 86 navigate(\u0026#34;/login\u0026#34;); 87 return 88 } 89 pieChart() 90 barChart() 91 lineChart() 92 columnChart() 93 }, []) 94 95 return ( 96 \u0026lt;\u0026gt; 97 \u0026lt;MenuBar/\u0026gt; 98 \u0026lt;Container\u0026gt; 99 \u0026lt;br/\u0026gt; 100 \u0026lt;Row\u0026gt; 101 \u0026lt;Col md={\u0026#34;6\u0026#34;}\u0026gt; 102 \u0026lt;Chart 103 chartType=\u0026#34;PieChart\u0026#34; 104 data={pieData.data} 105 options={pieOptions} 106 width=\u0026#34;100%\u0026#34; 107 height=\u0026#34;400px\u0026#34; 108 legendToggle 109 /\u0026gt; 110 \u0026lt;/Col\u0026gt; 111 \u0026lt;Col md={\u0026#34;6\u0026#34;}\u0026gt; 112 \u0026lt;Chart 113 chartType=\u0026#34;BarChart\u0026#34; 114 data={barData.data} 115 options={barOptions} 116 width=\u0026#34;100%\u0026#34; 117 height=\u0026#34;400px\u0026#34; 118 legendToggle 119 /\u0026gt; 120 \u0026lt;/Col\u0026gt; 121 \u0026lt;/Row\u0026gt; 122 \u0026lt;br/\u0026gt; 123 \u0026lt;br/\u0026gt; 124 \u0026lt;Row\u0026gt; 125 \u0026lt;Col md={\u0026#34;6\u0026#34;}\u0026gt; 126 \u0026lt;Chart 127 chartType=\u0026#34;LineChart\u0026#34; 128 data={lineData.data} 129 options={lineOptions} 130 width=\u0026#34;100%\u0026#34; 131 height=\u0026#34;400px\u0026#34; 132 legendToggle 133 /\u0026gt; 134 \u0026lt;/Col\u0026gt; 135 \u0026lt;Col md={\u0026#34;6\u0026#34;}\u0026gt; 136 \u0026lt;Chart 137 chartType=\u0026#34;ColumnChart\u0026#34; 138 data={columnData.data} 139 options={columnOptions} 140 width=\u0026#34;100%\u0026#34; 141 height=\u0026#34;400px\u0026#34; 142 legendToggle 143 /\u0026gt; 144 \u0026lt;/Col\u0026gt; 145 \u0026lt;/Row\u0026gt; 146 \u0026lt;/Container\u0026gt; 147 \u0026lt;/\u0026gt; 148 ) 149} 150 151export default ChartApp We will use the bootstrap 5 library and use the many components it provides.\n1import {Alert, Button, Col, Container, Form, Row} from \u0026#34;react-bootstrap\u0026#34;; 2import LoginBar from \u0026#34;../components/LoginBar\u0026#34;; 3import {useState} from \u0026#39;react\u0026#39; 4 5import AuthService from \u0026#34;../services/AuthService\u0026#34;; 6import {useNavigate} from \u0026#34;react-router-dom\u0026#34;; 7 8function Login() { 9 let navigate = useNavigate(); 10 11 const [cred, setCred] = useState({ 12 username: \u0026#39;\u0026#39;, 13 password: \u0026#39;\u0026#39;, 14 }) 15 16 const [flashMsg, setFlashMsg] = useState({ 17 success: \u0026#39;\u0026#39;, 18 error: \u0026#39;\u0026#39; 19 }) 20 21 const handleChange = (e: any) =\u0026gt; { 22 const value = e.target.value; 23 setCred({ 24 ...cred, 25 [e.target.name]: value 26 }); 27 } 28 29 const onSubmit = (e: any) =\u0026gt; { 30 e.preventDefault() 31 if (!cred.username || !cred.password) { 32 alert(\u0026#39;Please enter the values\u0026#39;) 33 return 34 } 35 AuthService.login(cred).then((status) =\u0026gt; { 36 if (status) { 37 setCred({ 38 username: \u0026#39;\u0026#39;, 39 password: \u0026#39;\u0026#39; 40 }) 41 navigate(\u0026#39;/\u0026#39;); 42 } else { 43 setFlashMsg({ 44 ...flashMsg, 45 \u0026#39;error\u0026#39;: \u0026#39;Login Failed!\u0026#39; 46 }) 47 } 48 }, error =\u0026gt; { 49 console.log(\u0026#34;Error on login submit!\u0026#34;) 50 }) 51 } 52 53 return ( 54 \u0026lt;\u0026gt; 55 \u0026lt;LoginBar/\u0026gt; 56 \u0026lt;Container\u0026gt; 57 \u0026lt;Form style={{maxWidth: \u0026#39;400px\u0026#39;, margin: \u0026#39;auto\u0026#39;}} onSubmit={onSubmit}\u0026gt; 58 \u0026lt;br/\u0026gt; 59 \u0026lt;br/\u0026gt; 60 \u0026lt;h2\u0026gt;Login\u0026lt;/h2\u0026gt; 61 62 \u0026lt;Form.Group controlId=\u0026#34;formUsername\u0026#34; className={\u0026#34;mb-3\u0026#34;}\u0026gt; 63 \u0026lt;Form.Label\u0026gt;Username\u0026lt;/Form.Label\u0026gt; 64 \u0026lt;Form.Control type=\u0026#34;username\u0026#34; placeholder=\u0026#34;Enter Username\u0026#34; name=\u0026#34;username\u0026#34; value={cred.username} 65 onChange={handleChange}/\u0026gt; 66 \u0026lt;Form.Text className=\u0026#34;text-muted\u0026#34;\u0026gt; 67 Enter AD user name! 68 \u0026lt;/Form.Text\u0026gt; 69 \u0026lt;/Form.Group\u0026gt; 70 71 \u0026lt;Form.Group controlId=\u0026#34;formBasicPassword\u0026#34; className={\u0026#34;mb-3\u0026#34;}\u0026gt; 72 \u0026lt;Form.Label\u0026gt;Password\u0026lt;/Form.Label\u0026gt; 73 \u0026lt;Form.Control type=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34; name=\u0026#34;password\u0026#34; value={cred.password} 74 onChange={handleChange}/\u0026gt; 75 \u0026lt;/Form.Group\u0026gt; 76 77 \u0026lt;Button variant=\u0026#34;primary\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt; 78 Submit 79 \u0026lt;/Button\u0026gt; 80 \u0026lt;br/\u0026gt; 81 \u0026lt;br/\u0026gt; 82 {flashMsg.error \u0026amp;\u0026amp; ( 83 \u0026lt;Row\u0026gt; 84 \u0026lt;Col\u0026gt; 85 \u0026lt;Alert key=\u0026#34;home-flash\u0026#34; variant=\u0026#34;danger\u0026#34;\u0026gt; 86 {flashMsg.error} 87 \u0026lt;/Alert\u0026gt; 88 \u0026lt;/Col\u0026gt; 89 \u0026lt;/Row\u0026gt; 90 )} 91 \u0026lt;/Form\u0026gt; 92 \u0026lt;/Container\u0026gt; 93 \u0026lt;/\u0026gt; 94 ) 95} 96 97export default Login Setup Project 89 SpringBoot Web + JWT + React.js + Bootstrap + Postgres + Google Charts\nhttps://gitorko.github.io/spring-boot-reactjs/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the backend in dev mode.\n1./gradlew clean build 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:3000\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd build/libs 3java -jar project89-1.0.0.jar Open http://localhost:8080/\n1user: admin 2pwd: admin@123 3 4user: user 5pwd: user@123 Docker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project89:1.0.0 . 3docker images |grep project89 4docker tag project89:1.0.0 gitorko/project89:1.0.0 5docker push gitorko/project89:1.0.0 6docker-compose -f docker/docker-compose.yml up Commands Commands to create new ui project if needed\n1yarn create react-app ui --template typescript 2yarn add jsonwebtoken types/jsonwebtoken 3yarn add react-router-dom 4yarn add react-bootstrap bootstrap 5yarn add react-chartjs-2 chart.js 6yarn add react-bootstrap-icons 7yarn add prop-types proxy is added to package.json to allow the requests to be redirected to the backend\n1\u0026#34;proxy\u0026#34;: \u0026#34;http://localhost:8080/\u0026#34; Testing 1curl --location --request POST \u0026#39;http://localhost:8080/api/login\u0026#39; \\ 2--header \u0026#39;Content-Type: application/json\u0026#39; \\ 3--data-raw \u0026#39;{ 4 \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, 5 \u0026#34;password\u0026#34;: \u0026#34;admin@123\u0026#34; 6}\u0026#39; 1curl --location --request GET \u0026#39;http://localhost:8080/api/time\u0026#39; \\ 2--header \u0026#39;Authorization: Bearer \u0026lt;TOKEN\u0026gt;\u0026#39; References https://react-bootstrap.github.io/\nhttps://react-google-charts.com/\n","link":"https://gitorko.github.io/post/spring-boot-reactjs/","section":"post","tags":["spring","jwt","reactjs","google-chart","bootstrap","spring-security"],"title":"Spring Boot - ReactJS"},{"body":"","link":"https://gitorko.github.io/tags/spring-security/","section":"tags","tags":null,"title":"spring-security"},{"body":"","link":"https://gitorko.github.io/tags/angular/","section":"tags","tags":null,"title":"angular"},{"body":"Chat Server developed with Spring Boot, Websocket and Angular (Clarity) frontend.\nGithub: https://github.com/gitorko/project92\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project92 2cd project92 3docker-compose -f docker/docker-compose.yml up Requirements Realtime data fetch from server via bi-directional communication is one of the key requirements for a chat server. To fetch information from the server continuously we can use the following approaches.\nShort Polling - Periodic polling from the client. Costly. Long Polling - Poll from client but server responds only when it has data. Server-Sent Events (SSE) - Half duplex channel to send one way data. Client subscribes to a stream of events generated by a server, receiving updates whenever a new event occurs. Keeps the HTTP stream connection and keeps the connection open. Server pushes the events to the client. Transported over simple HTTP instead of a custom protocol. Does not support binary data. WebSockets - Full duplex 2 way channel to send and receive data. HTTP/2 - Multiple data stream in a single connection via Request multiplexing, header compression reduces size. Works at browser level \u0026amp; not application. Loads entire resources, not bits of application data Websocket Http/2 Server Send Event Long-Poll Full-duplex Half-duplex Half-duplex Half-duplex Bidirectional Unidirectional Unidirectional Unidirectional Text + Binary Text + Binary Text Text + Binary 1024 parallel connections 6-8 parallel connections 6-8 parallel connections Based on threads available Connect will open the websocket connection \u0026amp; disconnect should terminate the session. Two users should be able to send and receive messages. Design Code You can enable plain websockets via @EnableWebSocket however in the example below we are using STOMP over WebSocket protocol by using @EnableWebSocketMessageBroker. STOMP is a subprotocol operating on top of the lower-level WebSocket. Here we create an in-memory message broker for sending and receiving messages. Instead of the annotation @SendTo, you can also use SimpMessagingTemplate which you can autowire inside your controller.\n1package com.demo.project92.controller; 2 3import java.time.LocalDateTime; 4 5import com.demo.project92.domain.ChatMessage; 6import lombok.RequiredArgsConstructor; 7import lombok.extern.slf4j.Slf4j; 8import org.springframework.messaging.handler.annotation.MessageMapping; 9import org.springframework.messaging.handler.annotation.SendTo; 10import org.springframework.messaging.simp.SimpMessageHeaderAccessor; 11import org.springframework.messaging.simp.SimpMessagingTemplate; 12import org.springframework.web.bind.annotation.RestController; 13 14@RestController 15@RequiredArgsConstructor 16@Slf4j 17class HomeController { 18 19 @MessageMapping(\u0026#34;/send/message\u0026#34;) 20 @SendTo(\u0026#34;/message\u0026#34;) 21 public ChatMessage broadcastMessage(SimpMessageHeaderAccessor sha, ChatMessage chat) { 22 chat.setFrom(sha.getUser().getName()); 23 chat.setSentAt(LocalDateTime.now().toString()); 24 log.info(\u0026#34;Received message: {}\u0026#34;, chat); 25 return chat; 26 } 27} 1package com.demo.project92.config; 2 3import org.springframework.context.annotation.Configuration; 4import org.springframework.messaging.simp.config.MessageBrokerRegistry; 5import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker; 6import org.springframework.web.socket.config.annotation.StompEndpointRegistry; 7import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer; 8 9@Configuration 10@EnableWebSocketMessageBroker 11public class WebSocketConfig implements WebSocketMessageBrokerConfigurer { 12 13 @Override 14 public void configureMessageBroker(MessageBrokerRegistry config) { 15 config.setApplicationDestinationPrefixes(\u0026#34;/app\u0026#34;) 16 .enableSimpleBroker(\u0026#34;/message\u0026#34;); 17 } 18 19 @Override 20 public void registerStompEndpoints(StompEndpointRegistry registry) { 21 //SockJS is used to enable fallback options if browsers don’t support websocket. 22 registry.addEndpoint(\u0026#34;/chat-app\u0026#34;) 23 .setAllowedOrigins(\u0026#34;http://localhost:4200\u0026#34;) 24 .setHandshakeHandler(new CustomHandshakeHandler()) // Set custom handshake handler 25 .withSockJS(); 26 } 27} 1\u0026lt;div class=\u0026#34;content-container\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;content-area\u0026#34;\u0026gt; 3 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 4 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 5 \u0026lt;p\u0026gt;Online status: {{chatStatus}}\u0026lt;/p\u0026gt; 6 \u0026lt;button class=\u0026#34;btn\u0026#34; (click)=\u0026#34;connect()\u0026#34; [disabled]=\u0026#34;chatStatus === \u0026#39;Connected\u0026#39;\u0026#34;\u0026gt;Connect\u0026lt;/button\u0026gt; 7 \u0026lt;button class=\u0026#34;btn\u0026#34; (click)=\u0026#34;disconnect()\u0026#34; [disabled]=\u0026#34;chatStatus !== \u0026#39;Connected\u0026#39;\u0026#34;\u0026gt;Disconnect\u0026lt;/button\u0026gt; 8 \u0026lt;br/\u0026gt; 9 \u0026lt;form class=\u0026#34;clr-form clr-form-horizontal\u0026#34;\u0026gt; 10 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 11 12 \u0026lt;label for=\u0026#34;message\u0026#34; class=\u0026#34;clr-control-label\u0026#34;\u0026gt;Message\u0026lt;/label\u0026gt; 13 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 14 \u0026lt;div class=\u0026#34;clr-input-wrapper\u0026#34;\u0026gt; 15 \u0026lt;input [(ngModel)]=\u0026#34;message\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;message\u0026#34; name=\u0026#34;message\u0026#34; size=\u0026#34;50\u0026#34; 16 placeholder=\u0026#34;message\u0026#34; class=\u0026#34;clr-input\u0026#34;/\u0026gt; 17 \u0026lt;/div\u0026gt; 18 \u0026lt;/div\u0026gt; 19 \u0026lt;/div\u0026gt; 20 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 21 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 22 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary btn-block\u0026#34; (click)=\u0026#34;sendMessage()\u0026#34; 23 [disabled]=\u0026#34;chatStatus !== \u0026#39;Connected\u0026#39;\u0026#34;\u0026gt;Send 24 \u0026lt;/button\u0026gt; 25 \u0026lt;/div\u0026gt; 26 \u0026lt;/div\u0026gt; 27 \u0026lt;/form\u0026gt; 28 29 \u0026lt;table class=\u0026#34;table\u0026#34;\u0026gt; 30 \u0026lt;caption\u0026gt; 31 Chat Messages 32 \u0026lt;/caption\u0026gt; 33 \u0026lt;thead\u0026gt; 34 \u0026lt;th class=\u0026#34;left\u0026#34;\u0026gt;From\u0026lt;/th\u0026gt; 35 \u0026lt;th class=\u0026#34;left\u0026#34;\u0026gt;Message\u0026lt;/th\u0026gt; 36 \u0026lt;th class=\u0026#34;left\u0026#34;\u0026gt;Sent At\u0026lt;/th\u0026gt; 37 \u0026lt;/thead\u0026gt; 38 \u0026lt;tbody\u0026gt; 39 \u0026lt;tr *ngFor=\u0026#34;let msg of messageList\u0026#34;\u0026gt; 40 \u0026lt;td class=\u0026#34;left\u0026#34;\u0026gt;{{msg.from}}\u0026lt;/td\u0026gt; 41 \u0026lt;td class=\u0026#34;left\u0026#34;\u0026gt;{{msg.text}}\u0026lt;/td\u0026gt; 42 \u0026lt;td class=\u0026#34;left\u0026#34;\u0026gt;{{msg.sentAt}}\u0026lt;/td\u0026gt; 43 \u0026lt;/tr\u0026gt; 44 \u0026lt;/tbody\u0026gt; 45 \u0026lt;/table\u0026gt; 46 47 \u0026lt;/div\u0026gt; 48 \u0026lt;/div\u0026gt; 49 \u0026lt;/div\u0026gt; 50\u0026lt;/div\u0026gt; 1import {Component, OnInit} from \u0026#39;@angular/core\u0026#39;; 2import {Chat} from \u0026#34;../models/chat\u0026#34;; 3import * as SockJS from \u0026#34;sockjs-client\u0026#34;; 4import {Stomp} from \u0026#34;@stomp/stompjs\u0026#34;; 5 6@Component({ 7 selector: \u0026#39;app-home\u0026#39;, 8 templateUrl: \u0026#39;./home.component.html\u0026#39;, 9 styleUrls: [\u0026#39;./home.component.css\u0026#39;] 10}) 11export class HomeComponent implements OnInit { 12 13 message: string = \u0026#39;\u0026#39;; 14 chatStatus: string = \u0026#39;Disconnected\u0026#39;; 15 16 stompClient: any; 17 public messageList: Chat[] = []; 18 19 constructor() { 20 } 21 22 ngOnInit(): void { 23 } 24 25 connect() { 26 console.log(window.location.href); 27 const serverUrl = \u0026#39;http://localhost:8080/chat-app\u0026#39;; 28 const ws = new SockJS(serverUrl); 29 this.stompClient = Stomp.over(ws); 30 const that = this; 31 this.stompClient.connect({}, function (frame: any) { 32 that.chatStatus = \u0026#39;Connected\u0026#39;; 33 that.stompClient.subscribe(\u0026#39;/message\u0026#39;, (message: any) =\u0026gt; { 34 if (message.body) { 35 that.messageList.push(JSON.parse(message.body)); 36 } 37 }); 38 }, this.errorCallBack); 39 } 40 41 disconnect() { 42 if (this.stompClient !== null) { 43 this.stompClient.disconnect(); 44 } 45 this.chatStatus = \u0026#39;Disconnected\u0026#39;; 46 console.log(\u0026#34;Disconnected\u0026#34;); 47 } 48 49 sendMessage() { 50 if (this.message) { 51 let chat: Chat = new Chat(); 52 chat.text = this.message; 53 console.log(\u0026#34;Sending chat: \u0026#34; + chat); 54 this.stompClient.send(\u0026#39;/app/send/message\u0026#39;, {}, JSON.stringify(chat)); 55 this.message = \u0026#39;\u0026#39;; 56 } 57 } 58 59 errorCallBack(error: any) { 60 console.log(\u0026#34;errorCallBack -\u0026gt; \u0026#34; + error) 61 setTimeout(() =\u0026gt; { 62 this.connect(); 63 }, 5000); 64 } 65} Setup Project 92 Chat Server\nhttps://gitorko.github.io/chat-server/\nVersion Check version\n1$java -version 2openjdk version \u0026#34;17.0.3\u0026#34; 2022-04-19 LTS 3 4$node --version 5v16.16.0 6 7$yarn --version 81.22.18 Dev To Run backend in dev mode\n1./gradlew clean build 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:4200\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd project92/build/libs 3java -jar project92-1.0.0.jar Open http://localhost:8080\nDocker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project92:1.0.0 . 3docker images |grep project92 4docker tag project92:1.0.0 gitorko/project92:1.0.0 5docker push gitorko/project92:1.0.0 6docker-compose -f docker/docker-compose.yml up References https://spring.io/guides/gs/messaging-stomp-websocket/\nhttps://linuxhint.com/websockets-http-2-sse-compared/\nhttps://www.toptal.com/java/stomp-spring-boot-websocket\n","link":"https://gitorko.github.io/post/chat-server/","section":"post","tags":["websocket","server-sent-event","angular","clarity","springboot"],"title":"Chat Server"},{"body":"","link":"https://gitorko.github.io/tags/clarity/","section":"tags","tags":null,"title":"clarity"},{"body":"","link":"https://gitorko.github.io/tags/server-sent-event/","section":"tags","tags":null,"title":"server-sent-event"},{"body":"","link":"https://gitorko.github.io/tags/springboot/","section":"tags","tags":null,"title":"springboot"},{"body":"","link":"https://gitorko.github.io/tags/websocket/","section":"tags","tags":null,"title":"websocket"},{"body":"","link":"https://gitorko.github.io/categories/websocket/","section":"categories","tags":null,"title":"WebSocket"},{"body":"Apache Superset is a modern data exploration and visualization platform.\nGithub: https://github.com/gitorko/project93\nWe will use a postgres db with a sample db and then create some charts around it in apache superset.\nPostgres Setup postgres \u0026amp; seed the employee database with some data.\n1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6GRANT ALL PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container 1docker exec -i pg-container psql -U postgres \u0026lt; employees.sql 2docker exec -it pg-container psql -U postgres -W postgres 3\\c test-db; 4GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO \u0026#34;test\u0026#34;; 1pwd: password Download the employee.sql file https://github.com/gitorko/project93/blob/main/employees.sql.zip\nApache Superset Create the Dockerfile. Pick the python database driver you need to install. In this case its postgres.\n{% ghcode https://github.com/gitorko/project93/blob/main/Dockerfile %}\nRun the following commands to bring up the superset server\n1docker build -t superset-image . 2docker run -d -p 8080:8088 --name my-superset superset-image 3docker exec -it my-superset superset fab create-admin \\ 4 --username admin \\ 5 --firstname Superset \\ 6 --lastname Admin \\ 7 --email admin@superset.com \\ 8 --password admin 9docker exec -it my-superset superset db upgrade 10docker exec -it my-superset superset init If the docker build fails during pip install, update the dns configuration on docker \u0026amp; restart docker\nLogin to the server\nhttp://localhost:8080/login/\n1user: admin 2pwd: admin You can also load sample database and charts\n1docker exec -it my-superset superset load_examples For the next restart you just need to start the container\n1docker start my-superset Goto Data -\u0026gt; Databases and add the postgres db. Ensure to give the IP address of the machine and not localhost.\n1postgresql://test:test@123@10.104.66.186:5432/test-db Click on datasets and add the tables.\nCreate a new chart, save the chart and create a dashboard from the chart.\nReferences https://hub.docker.com/r/apache/superset\nhttps://superset.apache.org/\n","link":"https://gitorko.github.io/post/apache-superset/","section":"post","tags":["apache-superset","visualization","postgres"],"title":"Apache Superset"},{"body":"","link":"https://gitorko.github.io/tags/apache-superset/","section":"tags","tags":null,"title":"apache-superset"},{"body":"","link":"https://gitorko.github.io/tags/postgres/","section":"tags","tags":null,"title":"postgres"},{"body":"","link":"https://gitorko.github.io/tags/visualization/","section":"tags","tags":null,"title":"visualization"},{"body":"","link":"https://gitorko.github.io/categories/visualization/","section":"categories","tags":null,"title":"Visualization"},{"body":"","link":"https://gitorko.github.io/tags/etl/","section":"tags","tags":null,"title":"ETL"},{"body":"","link":"https://gitorko.github.io/categories/etl/","section":"categories","tags":null,"title":"ETL"},{"body":"","link":"https://gitorko.github.io/tags/jenkins/","section":"tags","tags":null,"title":"jenkins"},{"body":"Jenkins is mostly used to setup CI/CD pipelines. Here we will use it to setup a data pipeline that can be used to orchestrate data processing jobs.\nGithub: https://github.com/gitorko/project84\nRequirement Lets consider a company sells paint.\nSTAGE1: They get their orders from the field in file format to their FTP server. This has to be processed and uploaded to the db. As these are large files ability re-run jobs after fixing files is required. STAGE2: They receive their material supplier in file format to their FTP server. This has to be processed and uploaded to the db. As these are large files ability re-run jobs after fixing files is required. STAGE3: Once the order and material is uploaded to db, if the order can be fulfilled the paint color and quantity need to be grouped by city. STAGE4: Additional buffer needs to be added to cover any shortages. This job is a small job and can be run in parallel. STAGE5: Sales rep bonus point need to be added in case the offer is active. This job is a small job and can be run in parallel. STAGE6: Order needs to be sent to factory in each city. The features of jenkins that make it friendly for data processing are:\nLog view - Ability to look at logs across different stages Graph view - Ability to look at a run graphically. Input - Ability to provide input to job at run time. Scheduling - Ability to schedule jobs at periodic interval. Parallel execution - Ability to run jobs in parallel Agents load distribution - Ability to run the job on other agent machines distributing the load. Time to complete - Ability to see which job is running and history of runs. Time taken - Ability to view each stage time taken over long periods to identify trends in execution. Re-Run - Ability to re-run a particular stage of the failed job. Slack - Ability to notify users on slack after job completion. Pull from maven - Ability to download the jar from maven. Plugin support - Numerous plugin are available for jenkins. Code The backend job that needs to do the processing. It takes the input as arguments and processes each stage and writes the results to a postgres db.\nEnsure that each job can run in isolation and updates just one table. 2 stages should never update the same table. Ensure that it throws runtime exception in case of failure. Ensure logging is correctly added to identify the issue. Ensure the stage can be re-run many times. This is done by resetting the data. Change the value of BASE_PATH accordingly. 1package com.demo.project84; 2 3import java.io.BufferedReader; 4import java.io.Serializable; 5import java.nio.file.Files; 6import java.nio.file.Path; 7import java.nio.file.Paths; 8import java.time.LocalDate; 9import java.util.HashMap; 10import java.util.List; 11import java.util.Map; 12import javax.persistence.Column; 13import javax.persistence.Entity; 14import javax.persistence.GeneratedValue; 15import javax.persistence.GenerationType; 16import javax.persistence.Id; 17 18import lombok.AllArgsConstructor; 19import lombok.Builder; 20import lombok.Data; 21import lombok.NoArgsConstructor; 22import lombok.RequiredArgsConstructor; 23import lombok.SneakyThrows; 24import lombok.extern.slf4j.Slf4j; 25import org.springframework.boot.CommandLineRunner; 26import org.springframework.boot.SpringApplication; 27import org.springframework.boot.autoconfigure.SpringBootApplication; 28import org.springframework.data.jpa.repository.JpaRepository; 29 30@SpringBootApplication 31@RequiredArgsConstructor 32@Slf4j 33public class Main implements CommandLineRunner { 34 private static final String BASE_PATH = \u0026#34;/Users/asurendra/code/pet/project84/\u0026#34;; 35 36 final OrderRepo orderRepo; 37 final MaterialRepo materialRepo; 38 final ProcessedRepo processedRepo; 39 final BonusRepo bonusRepo; 40 final FactoryRepo factoryRepo; 41 42 public static void main(String[] args) { 43 SpringApplication.run(Main.class, args); 44 } 45 46 @Override 47 public void run(String... args) throws Exception { 48 String caseType = args[0]; 49 switch (caseType) { 50 case \u0026#34;STAGE1\u0026#34;: 51 stage1(); 52 break; 53 case \u0026#34;STAGE2\u0026#34;: 54 stage2(); 55 break; 56 case \u0026#34;STAGE3\u0026#34;: 57 stage3(); 58 break; 59 case \u0026#34;STAGE4\u0026#34;: 60 stage4(); 61 break; 62 case \u0026#34;STAGE5\u0026#34;: 63 stage5(); 64 break; 65 case \u0026#34;STAGE6\u0026#34;: 66 stage6(); 67 break; 68 default: 69 throw new IllegalStateException(\u0026#34;Unexpected value: \u0026#34; + caseType); 70 } 71 } 72 73 /** 74 * Load order file to db. 75 */ 76 @SneakyThrows 77 private void stage1() { 78 log.info(\u0026#34;Loading orders to db\u0026#34;); 79 try { 80 orderRepo.deleteAll(); 81 Path path = Paths.get(BASE_PATH + \u0026#34;order-file.txt\u0026#34;); 82 try (BufferedReader reader = Files.newBufferedReader(path)) { 83 while (reader.ready()) { 84 String line = reader.readLine(); 85 log.info(line); 86 String[] split = line.split(\u0026#34;,\u0026#34;); 87 OrderDetail order = OrderDetail.builder() 88 .color(split[0]) 89 .quantity(Double.valueOf(split[1])) 90 .city(split[2]) 91 .salesRep(split[3]) 92 .orderDate(LocalDate.parse(split[4])) 93 .build(); 94 orderRepo.save(order); 95 } 96 } 97 log.info(\u0026#34;Loading orders completed\u0026#34;); 98 } catch (Exception ex) { 99 log.error(\u0026#34;ERROR: stage1\u0026#34;, ex); 100 throw new RuntimeException(\u0026#34;ERROR: stage1\u0026#34;); 101 } 102 } 103 104 /** 105 * Load material file to db. 106 */ 107 @SneakyThrows 108 private void stage2() { 109 log.info(\u0026#34;Loading materials to db\u0026#34;); 110 try { 111 materialRepo.deleteAll(); 112 Path path = Paths.get(BASE_PATH + \u0026#34;material-file.txt\u0026#34;); 113 try (BufferedReader reader = Files.newBufferedReader(path)) { 114 while (reader.ready()) { 115 String line = reader.readLine(); 116 log.info(line); 117 String[] split = line.split(\u0026#34;,\u0026#34;); 118 MaterialDetail material = MaterialDetail.builder() 119 .color(split[0]) 120 .quantity(Double.valueOf(split[1])) 121 .orderDate(LocalDate.parse(split[2])) 122 .build(); 123 materialRepo.save(material); 124 } 125 } 126 log.info(\u0026#34;Loading orders completed\u0026#34;); 127 } catch (Exception ex) { 128 log.error(\u0026#34;ERROR: stage2\u0026#34;, ex); 129 throw new RuntimeException(\u0026#34;ERROR: stage2\u0026#34;); 130 } 131 } 132 133 /** 134 * Process orders if it can be fulfilled. 135 */ 136 private void stage3() { 137 log.info(\u0026#34;Processing orders\u0026#34;); 138 try { 139 processedRepo.deleteAll(); 140 bonusRepo.deleteAll(); 141 factoryRepo.deleteAll(); 142 Map\u0026lt;String, Double\u0026gt; cache = new HashMap\u0026lt;\u0026gt;(); 143 materialRepo.findAll().forEach(m -\u0026gt; { 144 cache.put(m.getColor(), m.getQuantity()); 145 }); 146 Map\u0026lt;String, Double\u0026gt; result = new HashMap\u0026lt;\u0026gt;(); 147 List\u0026lt;OrderDetail\u0026gt; orders = orderRepo.findAll(); 148 for (OrderDetail order : orders) { 149 Double balance = cache.get(order.getColor()); 150 if (order.getQuantity() \u0026lt; balance) { 151 balance = balance - order.getQuantity(); 152 cache.put(order.getColor(), balance); 153 String key = order.getColor() + \u0026#34;:\u0026#34; + order.getCity(); 154 Double count = result.containsKey(key) ? result.get(key) + order.getQuantity() : order.getQuantity(); 155 result.put(key, count); 156 //add to processed. 157 } else { 158 log.info(\u0026#34;ERROR: stage3, will not be able to complete all order!\u0026#34;); 159 throw new RuntimeException(\u0026#34;ERROR: stage3, will not be able to complete all order!\u0026#34;); 160 } 161 } 162 result.forEach((k, v) -\u0026gt; { 163 String[] split = k.split(\u0026#34;\\\\:\u0026#34;); 164 processedRepo.save(ProcessedDetail.builder() 165 .color(split[0]) 166 .quantity(v) 167 .processDate(LocalDate.now()) 168 .city(split[1]) 169 .build()); 170 }); 171 log.info(\u0026#34;Processing orders completed\u0026#34;); 172 } catch (Exception ex) { 173 log.error(\u0026#34;ERROR: stage3\u0026#34;, ex); 174 throw new RuntimeException(\u0026#34;ERROR: stage3\u0026#34;); 175 } 176 } 177 178 /** 179 * Add buffer to order quantity to ensure no shortage. 180 */ 181 private void stage4() { 182 log.info(\u0026#34;Adding buffer\u0026#34;); 183 try { 184 factoryRepo.deleteAll(); 185 List\u0026lt;ProcessedDetail\u0026gt; processedDetail = processedRepo.findAll(); 186 processedDetail.forEach(p -\u0026gt; { 187 FactoryDetail factory = FactoryDetail.builder() 188 .color(p.getColor()) 189 .city(p.getCity()) 190 .processDate(LocalDate.now()) 191 .build(); 192 if (p.getQuantity() \u0026gt; 500) { 193 factory.setQuantity(p.getQuantity() + (p.getQuantity() * 0.30)); 194 } else if (p.getQuantity() \u0026gt; 200) { 195 factory.setQuantity(p.getQuantity() + (p.getQuantity() * 0.20)); 196 } else if (p.getQuantity() \u0026gt; 100) { 197 factory.setQuantity(p.getQuantity() + (p.getQuantity() * 0.10)); 198 p.setQuantity(p.getQuantity() + (p.getQuantity() * 0.10)); 199 } else { 200 p.setQuantity(p.getQuantity()); 201 } 202 factoryRepo.save(factory); 203 204 }); 205 log.info(\u0026#34;Adding buffer completed\u0026#34;); 206 } catch (Exception ex) { 207 log.error(\u0026#34;ERROR: stage4\u0026#34;, ex); 208 throw new RuntimeException(\u0026#34;ERROR: stage4\u0026#34;); 209 } 210 } 211 212 /** 213 * Add bonus points for sales rep. 214 */ 215 private void stage5() { 216 log.info(\u0026#34;Adding Sales bonus\u0026#34;); 217 try { 218 bonusRepo.deleteAll(); 219 Map\u0026lt;String, Double\u0026gt; result = new HashMap\u0026lt;\u0026gt;(); 220 List\u0026lt;OrderDetail\u0026gt; orders = orderRepo.findAll(); 221 for (OrderDetail order : orders) { 222 String key = order.getSalesRep(); 223 Double count = result.containsKey(key) ? result.get(key) + order.getQuantity() : order.getQuantity(); 224 result.put(key, count); 225 } 226 227 result.forEach((k, v) -\u0026gt; { 228 if (v \u0026gt; 200) { 229 bonusRepo.save(BonusDetail.builder() 230 .salesRep(k) 231 .bonusPoints(5) 232 .orderDate(LocalDate.now()) 233 .build()); 234 } 235 if (v \u0026gt; 500) { 236 bonusRepo.save(BonusDetail.builder() 237 .salesRep(k) 238 .bonusPoints(15) 239 .orderDate(LocalDate.now()) 240 .build()); 241 } 242 }); 243 log.info(\u0026#34;Adding Sales bonus completed\u0026#34;); 244 } catch (Exception ex) { 245 log.error(\u0026#34;ERROR: stage5\u0026#34;, ex); 246 throw new RuntimeException(\u0026#34;ERROR: stage5\u0026#34;); 247 } 248 } 249 250 /** 251 * Notify factory to start production. 252 */ 253 private void stage6() { 254 log.info(\u0026#34;Notifying factory\u0026#34;); 255 try { 256 List\u0026lt;ProcessedDetail\u0026gt; processedDetail = processedRepo.findAll(); 257 processedDetail.forEach(p -\u0026gt; { 258 log.info(\u0026#34;Notifiying factory: {}\u0026#34;, p); 259 }); 260 log.info(\u0026#34;Notifying factory completed\u0026#34;); 261 } catch (Exception ex) { 262 log.error(\u0026#34;ERROR: stage6\u0026#34;, ex); 263 throw new RuntimeException(\u0026#34;ERROR: stage6\u0026#34;); 264 } 265 } 266} 267 268interface BonusRepo extends JpaRepository\u0026lt;BonusDetail, Long\u0026gt; { 269} 270 271interface MaterialRepo extends JpaRepository\u0026lt;MaterialDetail, Long\u0026gt; { 272} 273 274interface OrderRepo extends JpaRepository\u0026lt;OrderDetail, Long\u0026gt; { 275} 276 277interface ProcessedRepo extends JpaRepository\u0026lt;ProcessedDetail, Long\u0026gt; { 278} 279 280interface FactoryRepo extends JpaRepository\u0026lt;FactoryDetail, Long\u0026gt; { 281} 282 283@Entity 284@Data 285@Builder 286@AllArgsConstructor 287@NoArgsConstructor 288class BonusDetail { 289 @Id 290 @GeneratedValue(strategy = GenerationType.AUTO) 291 @Column(name = \u0026#34;id\u0026#34;) 292 private Long id; 293 private String salesRep; 294 private Integer bonusPoints; 295 private LocalDate orderDate; 296} 297 298@Entity 299@Data 300@Builder 301@AllArgsConstructor 302@NoArgsConstructor 303class MaterialDetail implements Serializable { 304 305 @Id 306 @GeneratedValue(strategy = GenerationType.AUTO) 307 @Column(name = \u0026#34;id\u0026#34;) 308 private Long id; 309 private String color; 310 private Double quantity; 311 private LocalDate orderDate; 312 313} 314 315@Entity 316@Data 317@Builder 318@AllArgsConstructor 319@NoArgsConstructor 320class OrderDetail { 321 @Id 322 @GeneratedValue(strategy = GenerationType.AUTO) 323 @Column(name = \u0026#34;id\u0026#34;) 324 private Long id; 325 private String color; 326 private Double quantity; 327 private String city; 328 private String salesRep; 329 private LocalDate orderDate; 330} 331 332@Entity 333@Data 334@Builder 335@AllArgsConstructor 336@NoArgsConstructor 337class ProcessedDetail { 338 @Id 339 @GeneratedValue(strategy = GenerationType.AUTO) 340 @Column(name = \u0026#34;id\u0026#34;) 341 private Long id; 342 private String color; 343 private Double quantity; 344 private String city; 345 private LocalDate processDate; 346} 347 348@Entity 349@Data 350@Builder 351@AllArgsConstructor 352@NoArgsConstructor 353class FactoryDetail { 354 @Id 355 @GeneratedValue(strategy = GenerationType.AUTO) 356 @Column(name = \u0026#34;id\u0026#34;) 357 private Long id; 358 private String color; 359 private Double quantity; 360 private String city; 361 private LocalDate processDate; 362} The properties file\n1spring: 2 main: 3 banner-mode: \u0026#34;off\u0026#34; 4 web-application-type: none 5 datasource: 6 driver-class-name: org.postgresql.Driver 7 url: jdbc:postgresql://localhost:5432/test-db 8 username: test 9 password: test@123 10 jpa: 11 show-sql: false 12 hibernate.ddl-auto: update 13 properties.hibernate.temp.use_jdbc_metadata_defaults: false 14 database-platform: org.hibernate.dialect.PostgreSQLDialect Jenkins To setup jenkins download the jenkins.war from https://www.jenkins.io/download/ and start the server. Once the server starts you will see the admin password in the console log. This will be used to setup jenkins for the first time. This will be a one time activity.\n1java -jar jenkins.war Open the below url\nhttp://localhost:8080/\nAlternate way to setup jenkins via docker\n1docker run --name my-jenkins -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts-jdk11 Follow the steps to finish the configuration\nInstall the 'Pipeline Implementation for Blue Ocean plugin' to look at graphs\n1user: admin 2pwd: admin@123 Go to Dashboard and click on 'New Item' and create a pipeline, enter the script below and click on 'Build Now' and ensure it is successful.\n1pipeline { 2 agent any 3 4 stages { 5 stage(\u0026#39;STAGE1\u0026#39;) { 6 steps { 7 echo \u0026#39;STAGE1..\u0026#39; 8 } 9 } 10 stage(\u0026#39;STAGE2\u0026#39;) { 11 steps { 12 echo \u0026#39;STAGE2..\u0026#39; 13 } 14 } 15 } 16} If the setup is correct this test job should be successful.\nNow create 6 pipeline jobs and a master pipeline job. All stage jobs will be same as below but input param will change.\nstage1-job - STAGE1 stage2-job - STAGE2 stage3-job - STAGE3 stage4-job - STAGE4 stage5-job - STAGE5 stage6-job - STAGE6\nChange param accordingly\n1pipeline { 2 agent any 3 4 stages { 5 stage(\u0026#39;STAGE1\u0026#39;) { 6 steps { 7 dir (\u0026#34;/Users/asurendra/code/pet/project84/build/libs\u0026#34;) { 8 sh \u0026#34;java -jar project84-1.0.0.jar STAGE1\u0026#34; 9 } 10 } 11 } 12 } 13} data-job-pipeline job\n1pipeline { 2 agent any 3 parameters { 4 booleanParam(name: \u0026#34;BONUS_OFFER\u0026#34;, defaultValue: true) 5 } 6 stages { 7 stage(\u0026#39;STAGE1\u0026#39;) { 8 steps { 9 build job: \u0026#39;stage1-job\u0026#39; 10 } 11 } 12 stage(\u0026#39;STAGE2\u0026#39;) { 13 steps { 14 build job: \u0026#39;stage2-job\u0026#39; 15 } 16 } 17 stage(\u0026#39;STAGE3\u0026#39;) { 18 steps { 19 build job: \u0026#39;stage3-job\u0026#39; 20 } 21 } 22 stage(\u0026#34;FORK\u0026#34;) { 23 parallel { 24 stage(\u0026#39;STAGE4\u0026#39;) { 25 steps { 26 build job: \u0026#39;stage4-job\u0026#39; 27 } 28 } 29 stage(\u0026#39;STAGE5\u0026#39;) { 30 //If bonus points are counted for sales then run this job. 31 when { expression { params.BONUS_OFFER } } 32 steps { 33 build job: \u0026#39;stage5-job\u0026#39; 34 } 35 } 36 } 37 } 38 stage(\u0026#39;STAGE6\u0026#39;) { 39 steps { 40 build job: \u0026#39;stage6-job\u0026#39; 41 } 42 } 43 44 } 45} Click on 'Build with Parameters' and select the input checkbox. If bonus offer is applicable STAGE5 is executed else it wont be executed.\nMonitor the job\nOnce the job is complete click on 'Pipeline graph' this shows the path taken graphically. You can also see the time take for each stage to complete. This can be useful to monitor the job over long time periods.\nRerun the job without the bonus offer checkbox, once completed you will see the graph shows the node with STAGE5 as skipped.\nLook at the 'Console Output' that track each jobs log output. You can drill down to each stage job and look at the log specific to that.\nNow lets make a stage fail and then fix the issue and re-run the stage.\nModify the material-file.txt and reduce the quantity to 10. Run the 'data-job-pipeline' job.\nSince the materials are less and order cant be fulfilled the pipeline will fail, you can now look at the logs and identify the issue.\nFix the file again by changing the value back to what it was. Click on 'Restart from Stage' and select STAGE2. We need to seed the material file again hence restarting at STAGE2.\nOnce the job is successful you will notice that it didnt run the STAGE1 job and only ran STAGE2 and onwards.\nYou can even schedule this job to run daily.\nSetup Project61 Jenkins Pipeline + Data processing\nhttps://gitorko.github.io/jenkins-data-processing/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev Build the project \u0026amp; test if the jar works.\n1./gradlew clean build 2cd project84/build/libs 3java -jar project84-1.0.0.jar STAGE1 4java -jar project84-1.0.0.jar STAGE2 5java -jar project84-1.0.0.jar STAGE3 6java -jar project84-1.0.0.jar STAGE4 7java -jar project84-1.0.0.jar STAGE5 8java -jar project84-1.0.0.jar STAGE6 To truncate the tables\n1truncate order_detail; 2truncate material_detail; 3truncate processed_detail; 4truncate bonus_detail; 5truncate factory_detail; References https://github.com/jenkinsci/docker\nhttps://www.jenkins.io/doc/book/pipeline/\n","link":"https://gitorko.github.io/post/jenkins-data-processing/","section":"post","tags":["pipeline","ETL","jenkins"],"title":"Jenkins - Data Processing"},{"body":"","link":"https://gitorko.github.io/tags/pipeline/","section":"tags","tags":null,"title":"pipeline"},{"body":"","link":"https://gitorko.github.io/tags/mongodb/","section":"tags","tags":null,"title":"mongodb"},{"body":"","link":"https://gitorko.github.io/tags/r2dbc/","section":"tags","tags":null,"title":"r2dbc"},{"body":"","link":"https://gitorko.github.io/categories/r2dbc/","section":"categories","tags":null,"title":"R2DBC"},{"body":"Spring Reactive web application with angular clarity and \u0026amp; reactive mongo db. Creates uber jar to deploy.\nGithub: https://github.com/gitorko/project60\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project60 2cd project60 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nFeatures Clarity is an open source library that provides various Angular components.\nCode 1package com.demo.project60; 2 3import static org.springframework.web.reactive.function.server.RequestPredicates.GET; 4import static org.springframework.web.reactive.function.server.RouterFunctions.route; 5import static org.springframework.web.reactive.function.server.ServerResponse.ok; 6 7import java.util.Arrays; 8import java.util.List; 9import java.util.Random; 10 11import com.demo.project60.domain.Customer; 12import com.demo.project60.repository.CustomerRepository; 13import lombok.extern.slf4j.Slf4j; 14import org.springframework.beans.factory.annotation.Value; 15import org.springframework.boot.CommandLineRunner; 16import org.springframework.boot.SpringApplication; 17import org.springframework.boot.autoconfigure.SpringBootApplication; 18import org.springframework.context.annotation.Bean; 19import org.springframework.core.io.Resource; 20import org.springframework.http.MediaType; 21import org.springframework.web.reactive.function.server.RouterFunction; 22import org.springframework.web.reactive.function.server.ServerResponse; 23import reactor.core.publisher.Flux; 24 25@SpringBootApplication 26@Slf4j 27public class Main { 28 public static void main(String[] args) { 29 SpringApplication.run(Main.class, args); 30 } 31 32 @Bean 33 public CommandLineRunner seedData(CustomerRepository customerRepository) { 34 return args -\u0026gt; { 35 log.info(\u0026#34;Initializing repo!\u0026#34;); 36 List\u0026lt;String\u0026gt; city = Arrays.asList(\u0026#34;London\u0026#34;, \u0026#34;New York\u0026#34;, \u0026#34;Bangalore\u0026#34;); 37 Flux\u0026lt;Customer\u0026gt; customers = Flux.range(1, 5).map(i -\u0026gt; { 38 int randomIndex = new Random().nextInt(2 - 0 + 1) + 0; 39 return new Customer(null, \u0026#34;first_\u0026#34; + i, \u0026#34;last_\u0026#34; + i, city.get(randomIndex)); 40 }); 41 customerRepository.deleteAll() 42 .thenMany(customers.flatMap(customerRepository::save) 43 .thenMany(customerRepository.findAll())) 44 .subscribe(e -\u0026gt; log.info(e.toString())); 45 log.info(\u0026#34;Data seed completed!\u0026#34;); 46 }; 47 } 48} 1package com.demo.project60.repository; 2 3import com.demo.project60.domain.Customer; 4import org.springframework.data.mongodb.repository.ReactiveMongoRepository; 5 6public interface CustomerRepository extends ReactiveMongoRepository\u0026lt;Customer, String\u0026gt; { 7} 1spring: 2 main: 3 banner-mode: \u0026#34;off\u0026#34; 4 data: 5 mongodb: 6 database: test-db 7 username: test 8 password: test@123 9 host: localhost 10 port: 27017 11 authentication-database: admin 1import {Injectable} from \u0026#39;@angular/core\u0026#39;; 2import {HttpClient} from \u0026#39;@angular/common/http\u0026#39;; 3import {Observable} from \u0026#39;rxjs\u0026#39;; 4import {Customer} from \u0026#34;../models/customer\u0026#34;; 5 6@Injectable({ 7 providedIn: \u0026#39;root\u0026#39; 8}) 9export class RestService { 10 11 constructor(private http: HttpClient) { 12 } 13 14 public getCustomers(): Observable\u0026lt;Customer[]\u0026gt; { 15 return this.http.get\u0026lt;Customer[]\u0026gt;(\u0026#39;/api/customer\u0026#39;); 16 } 17 18 public saveCustomer(customer: Customer) { 19 return this.http.post(\u0026#39;/api/customer\u0026#39;, customer); 20 } 21 22 public deleteCustomer(id: any): Observable\u0026lt;any\u0026gt; { 23 return this.http.delete(\u0026#39;/api/customer/\u0026#39; + id); 24 } 25 26 public getTime(): Observable\u0026lt;string\u0026gt; { 27 return this.http.get\u0026lt;string\u0026gt;(\u0026#39;/api/time\u0026#39;); 28 } 29} 1\u0026lt;div class=\u0026#34;content-container\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;content-area\u0026#34;\u0026gt; 3 4 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 5 6 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 7 \u0026lt;p style=\u0026#34;text-align: center\u0026#34;\u0026gt; 8 \u0026lt;!-- interpolation \u0026amp; pipe --\u0026gt; 9 Server Time: {{currentTime | date:\u0026#39;dd-MM-yyyy\u0026#39; }} 10 \u0026lt;/p\u0026gt; 11 12 \u0026lt;h2 style=\u0026#34;text-align: center\u0026#34;\u0026gt;Customers\u0026lt;/h2\u0026gt; 13 14 \u0026lt;clr-datagrid\u0026gt; 15 \u0026lt;clr-dg-placeholder class=\u0026#34;content-center\u0026#34;\u0026gt;No Customers!\u0026lt;/clr-dg-placeholder\u0026gt; 16 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;id\u0026#39;\u0026#34;\u0026gt;ID\u0026lt;/clr-dg-column\u0026gt; 17 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;firstName\u0026#39;\u0026#34;\u0026gt;First Name\u0026lt;/clr-dg-column\u0026gt; 18 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;lastName\u0026#39;\u0026#34;\u0026gt;Last Name\u0026lt;/clr-dg-column\u0026gt; 19 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;city\u0026#39;\u0026#34;\u0026gt;City\u0026lt;/clr-dg-column\u0026gt; 20 \u0026lt;clr-dg-column\u0026gt;Action\u0026lt;/clr-dg-column\u0026gt; 21 \u0026lt;!-- structural directive --\u0026gt; 22 \u0026lt;clr-dg-row clr-dg-row *clrDgItems=\u0026#34;let customer of customers\u0026#34;\u0026gt; 23 \u0026lt;clr-dg-cell\u0026gt;{{customer.id}}\u0026lt;/clr-dg-cell\u0026gt; 24 \u0026lt;clr-dg-cell\u0026gt;{{customer.firstName}}\u0026lt;/clr-dg-cell\u0026gt; 25 \u0026lt;clr-dg-cell\u0026gt;{{customer.lastName}}\u0026lt;/clr-dg-cell\u0026gt; 26 \u0026lt;clr-dg-cell\u0026gt;{{customer.city}}\u0026lt;/clr-dg-cell\u0026gt; 27 \u0026lt;clr-dg-cell\u0026gt; 28 \u0026lt;cds-icon shape=\u0026#34;trash\u0026#34; style=\u0026#34;cursor: pointer; color: blue\u0026#34; (click)=\u0026#34;deleteCustomer(customer)\u0026#34;\u0026gt; 29 \u0026lt;/cds-icon\u0026gt; 30 \u0026lt;/clr-dg-cell\u0026gt; 31 \u0026lt;/clr-dg-row\u0026gt; 32 \u0026lt;clr-dg-footer\u0026gt;{{customers.length}} customers\u0026lt;/clr-dg-footer\u0026gt; 33 \u0026lt;/clr-datagrid\u0026gt; 34 35 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 36 \u0026lt;form class=\u0026#34;clr-form clr-form-horizontal\u0026#34;\u0026gt; 37 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 38 \u0026lt;label for=\u0026#34;firstName\u0026#34; class=\u0026#34;clr-control-label\u0026#34;\u0026gt;First Name\u0026lt;/label\u0026gt; 39 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 40 \u0026lt;div class=\u0026#34;clr-input-wrapper\u0026#34;\u0026gt; 41 \u0026lt;!-- two way data binding --\u0026gt; 42 \u0026lt;input type=\u0026#34;text\u0026#34; [(ngModel)]=\u0026#34;customer.firstName\u0026#34; id=\u0026#34;firstName\u0026#34; name=\u0026#34;firstName\u0026#34; 43 placeholder=\u0026#34;Placeholder\u0026#34; class=\u0026#34;clr-input\u0026#34;/\u0026gt; 44 \u0026lt;/div\u0026gt; 45 \u0026lt;/div\u0026gt; 46 \u0026lt;/div\u0026gt; 47 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 48 \u0026lt;label for=\u0026#34;lastName\u0026#34; class=\u0026#34;clr-control-label\u0026#34;\u0026gt;Last Name\u0026lt;/label\u0026gt; 49 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 50 \u0026lt;div class=\u0026#34;clr-input-wrapper\u0026#34;\u0026gt; 51 \u0026lt;input [(ngModel)]=\u0026#34;customer.lastName\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;lastName\u0026#34; name=\u0026#34;lastName\u0026#34; 52 placeholder=\u0026#34;Placeholder\u0026#34; class=\u0026#34;clr-input\u0026#34;/\u0026gt; 53 \u0026lt;/div\u0026gt; 54 \u0026lt;/div\u0026gt; 55 \u0026lt;/div\u0026gt; 56 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 57 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 58 \u0026lt;!-- event binding --\u0026gt; 59 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; (click)=\u0026#34;saveCustomer()\u0026#34;\u0026gt;Save\u0026lt;/button\u0026gt; 60 \u0026lt;/div\u0026gt; 61 \u0026lt;/div\u0026gt; 62 \u0026lt;/form\u0026gt; 63 \u0026lt;/div\u0026gt; 64 65 \u0026lt;/div\u0026gt; 66 \u0026lt;/div\u0026gt; 67 \u0026lt;/div\u0026gt; 68\u0026lt;/div\u0026gt; 1import {Component, OnInit} from \u0026#39;@angular/core\u0026#39;; 2import {Customer} from \u0026#34;../models/customer\u0026#34;; 3import {RestService} from \u0026#34;../services/rest.service\u0026#34;; 4import {ClarityIcons, trashIcon} from \u0026#34;@cds/core/icon\u0026#34;; 5 6@Component({ 7 selector: \u0026#39;app-home\u0026#39;, 8 templateUrl: \u0026#39;./home.component.html\u0026#39;, 9 styleUrls: [\u0026#39;./home.component.css\u0026#39;] 10}) 11export class HomeComponent implements OnInit { 12 13 customers: Customer[] = []; 14 customer: Customer = new Customer(); 15 currentTime = \u0026#39;\u0026#39;; 16 17 constructor(private restService: RestService) { 18 ClarityIcons.addIcons(trashIcon); 19 } 20 21 ngOnInit() { 22 this.getCustomers(); 23 } 24 25 getCustomers(): void { 26 this.customer = new Customer(); 27 this.restService.getCustomers().subscribe(data =\u0026gt; { 28 this.customers = data; 29 }); 30 this.restService.getTime().subscribe(data =\u0026gt; { 31 this.currentTime = data; 32 }); 33 } 34 35 saveCustomer(): void { 36 this.restService.saveCustomer(this.customer) 37 .subscribe(data =\u0026gt; { 38 this.getCustomers(); 39 }, error =\u0026gt; { 40 console.log(error); 41 }); 42 } 43 44 deleteCustomer(customer: Customer): void { 45 console.log(\u0026#39;delete: \u0026#39; + customer.id); 46 this.restService.deleteCustomer(customer.id) 47 .subscribe(data =\u0026gt; { 48 this.getCustomers(); 49 }, error =\u0026gt; { 50 console.log(error); 51 }); 52 } 53 54} Setup Project 60 Spring WebFlux \u0026amp; Angular, Reactive MongoDB, Clarity, Docker\nhttps://gitorko.github.io/spring-webflux-angular/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Mongo DB 1docker run --name my-mongo -e MONGO_INITDB_ROOT_USERNAME=test -e MONGO_INITDB_ROOT_PASSWORD=test@123 -p 27017:27017 -d mongo 2docker ps Dev To run the backend in dev mode.\n1./gradlew clean build 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:4200/\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd build/libs 3java -jar project60-1.0.0.jar Open http://localhost:8080/\nDocker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project60:1.0.0 . 3docker images |grep project60 4docker tag project60:1.0.0 gitorko/project60:1.0.0 5docker push gitorko/project60:1.0.0 6docker-compose -f docker/docker-compose.yml up Commands 1ng new ui 2cd ui 3yarn add @cds/core @clr/icons @clr/angular @clr/ui proxy.config.json redirects the client calls\n1{ 2 \u0026#34;/api/*\u0026#34;: { 3 \u0026#34;target\u0026#34;: \u0026#34;http://localhost:8080/\u0026#34;, 4 \u0026#34;secure\u0026#34;: false, 5 \u0026#34;logLevel\u0026#34;: \u0026#34;debug\u0026#34; 6 } 7} Modify package.json file, change the start \u0026amp; build command to\n1\u0026#34;start\u0026#34;: \u0026#34;ng serve --proxy-config proxy.config.json --open\u0026#34;, 2\u0026#34;build\u0026#34;: \u0026#34;ng build --prod\u0026#34;, Update the routing.The useHash:true will be useful when we deploy the application in a single uber jar later. If we dont use this then the back button on the application will run into errors. It uses a hash based routing instead of the default location based routing.\nIf you run into the error\n1Error: initial exceeded maximum budget. Update the budget in angular.json file\n1\u0026#34;maximumWarning\u0026#34;: \u0026#34;4mb\u0026#34;, 2\u0026#34;maximumError\u0026#34;: \u0026#34;5mb\u0026#34; References Angular Clartiy Spring Boot Spring Webflux\n","link":"https://gitorko.github.io/post/spring-webflux-angular/","section":"post","tags":["webflux","clarity","angular","mongodb"],"title":"Spring Webflux \u0026 Angular"},{"body":"Webflux integration with reactive R2DBC. R2DBC stands for Reactive Relational Database Connectivity, It provides a reactive driver to connect to relational database.\nGithub: https://github.com/gitorko/project65\nSpring Data R2DBC Spring Data R2DBC aims at being conceptually easy. In order to achieve this it does NOT offer caching, lazy loading, write behind or many other features of ORM frameworks. This makes Spring Data R2DBC a simple, limited, opinionated object mapper. Currently, its use in production is not recommended.\nThe following databases are supported via r2dbc libraries\nH2 (io.r2dbc:r2dbc-h2) MariaDB (org.mariadb:r2dbc-mariadb) Microsoft SQL Server (io.r2dbc:r2dbc-mssql) MySQL (dev.miku:r2dbc-mysql) jasync-sql MySQL (com.github.jasync-sql:jasync-r2dbc-mysql) Postgres (io.r2dbc:r2dbc-postgresql) Oracle (com.oracle.database.r2dbc:oracle-r2dbc) Code 1package com.demo.project65; 2 3import java.time.Duration; 4 5import com.demo.project65.config.DataSourceConfig; 6import com.demo.project65.domain.Customer; 7import com.demo.project65.repository.CustomerRepository; 8import lombok.extern.slf4j.Slf4j; 9import org.springframework.boot.CommandLineRunner; 10import org.springframework.boot.SpringApplication; 11import org.springframework.boot.autoconfigure.SpringBootApplication; 12import org.springframework.boot.context.properties.EnableConfigurationProperties; 13import org.springframework.context.annotation.Bean; 14import reactor.core.publisher.Flux; 15 16@SpringBootApplication 17@Slf4j 18@EnableConfigurationProperties(DataSourceConfig.class) 19public class Main { 20 21 public static void main(String[] args) { 22 SpringApplication.run(Main.class, args); 23 } 24 25 @Bean 26 public CommandLineRunner seedData(CustomerRepository customerRepository) { 27 return args -\u0026gt; { 28 log.info(\u0026#34;Seeding data!\u0026#34;); 29 Flux\u0026lt;String\u0026gt; names = Flux.just(\u0026#34;raj\u0026#34;, \u0026#34;david\u0026#34;, \u0026#34;pam\u0026#34;).delayElements(Duration.ofSeconds(1)); 30 Flux\u0026lt;Integer\u0026gt; ages = Flux.just(25, 27, 30).delayElements(Duration.ofSeconds(1)); 31 Flux\u0026lt;Customer\u0026gt; customers = Flux.zip(names, ages).map(tupple -\u0026gt; { 32 return new Customer(null, tupple.getT1(), tupple.getT2()); 33 }); 34 customerRepository.deleteAll() 35 .thenMany(customers.flatMap(c -\u0026gt; customerRepository.save(c)) 36 .thenMany(customerRepository.findAll()) 37 ).subscribe(System.out::println); 38 }; 39 } 40 41} 42 1package com.demo.project65.controller; 2 3import com.demo.project65.domain.Customer; 4import com.demo.project65.repository.CustomerRepository; 5import org.springframework.beans.factory.annotation.Autowired; 6import org.springframework.web.bind.annotation.GetMapping; 7import org.springframework.web.bind.annotation.PathVariable; 8import org.springframework.web.bind.annotation.PostMapping; 9import org.springframework.web.bind.annotation.RequestBody; 10import org.springframework.web.bind.annotation.RequestMapping; 11import org.springframework.web.bind.annotation.RequestParam; 12import org.springframework.web.bind.annotation.RestController; 13import reactor.core.publisher.Flux; 14import reactor.core.publisher.Mono; 15 16@RestController 17@RequestMapping(\u0026#34;/api\u0026#34;) 18public class HomeController { 19 20 @Autowired 21 CustomerRepository repo; 22 23 @GetMapping(\u0026#34;/all\u0026#34;) 24 public Flux\u0026lt;Customer\u0026gt; findAll() { 25 return repo.findAll(); 26 } 27 28 @GetMapping(\u0026#34;/id/{customerId}\u0026#34;) 29 public Mono\u0026lt;Customer\u0026gt; findById(@PathVariable Long customerId) { 30 return repo.findById(customerId); 31 } 32 33 @PostMapping(value = \u0026#34;/save\u0026#34;) 34 public Mono\u0026lt;Customer\u0026gt; save(@RequestBody Customer customer) { 35 return repo.save(customer); 36 } 37 38 @GetMapping(\u0026#34;/find\u0026#34;) 39 public Flux\u0026lt;Customer\u0026gt; findById(@RequestParam String name, @RequestParam Integer age) { 40 return repo.findByNameAndAge(name, age); 41 } 42} 1package com.demo.project65.config; 2 3import lombok.Data; 4import org.springframework.boot.context.properties.ConfigurationProperties; 5import org.springframework.stereotype.Component; 6 7@Data 8@Component 9@ConfigurationProperties(\u0026#34;spring.datasource\u0026#34;) 10public class DataSourceConfig { 11 String host; 12 String username; 13 String password; 14 String name; 15} Setup Project 65 Spring Webflux \u0026amp; R2DBC\nhttps://gitorko.github.io/spring-webflux-r2dbc/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6GRANT ALL PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Ensure you login with test user and create the table.\n1docker exec -it pg-container psql -U test -W test-db 2\\dt Create the table\n1CREATE TABLE customer ( 2 id SERIAL PRIMARY KEY, 3 name VARCHAR(50) NOT NULL, 4 age INT NOT NULL 5); Dev To run the code.\n1./gradlew clean build 2./gradlew bootRun Testing Postman collection https://raw.githubusercontent.com/gitorko/project65/main/postman/Project65.postman_collection.json\nErrors If you encounter any of the error mentioned below it could probably be because the data type in postgres cant be mapped by r2dbc. Eg: CHAR is not supported, changing to VARCHAR will fix the issue.\n1org.springframework.data.mapping.MappingException: Could not read property public java.lang.String com.demo.project65.Customer.name from result set! 2org.springframework.data.r2dbc.function.convert.EntityRowMapper.readFrom(EntityRowMapper.java:103) ~[spring-data-r2dbc-1.0.0.M1.jar:1.0.0.M1] 3Caused by: java.lang.IllegalArgumentException: Cannot decode value of type java.lang.Object 4org.springframework.data.r2dbc.function.convert.EntityRowMapper.readFrom(EntityRowMapper.java:99) ~[spring-data-r2dbc-1.0.0.M1.jar:1.0.0.M1] References https://spring.io/projects/spring-data-r2dbc\n","link":"https://gitorko.github.io/post/spring-webflux-r2dbc/","section":"post","tags":["r2dbc","webflux"],"title":"Spring Webflux \u0026 R2DBC"},{"body":"","link":"https://gitorko.github.io/categories/spring-webflux/","section":"categories","tags":null,"title":"Spring-Webflux"},{"body":"","link":"https://gitorko.github.io/tags/webflux/","section":"tags","tags":null,"title":"webflux"},{"body":"Flash sale system developed with Spring Boot, Spring JPA, RabbitMQ and Angular (Clarity) frontend.\nGithub: https://github.com/gitorko/project90\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project90 2cd project90 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nRequirements A flash sale system that supports one item per user and reserving the item in a large scale flash sale.\nFunctional Requirements A flash sale system goes live on a particular date \u0026amp; time. Users should not be able to add to cart before that. There will be large number of users requesting to add the item to the cart at the specific moment in time. The items will be limited in stock. The 'add to cart' action must be honored in the order they were received. The first user to click on add to cart must get the item. As long as there are products each user requesting should get the item in the cart. Once the item is added to the cart rest of the process of checkout is beyond scope of this demo. A user can get just one item they should not be able to buy more than one item. User must be able to delete the item from the cart after which it should be available for other users. The authentication can be mocked to randomly assign a user to each browser instance. So each time you open the url in a different browser/tab it is assigned a unique user. User can logout and it will assign a new user. Non-Functional Requirements Latency to place the request should be low. System should be highly available \u0026amp; be able to handle burst of request traffic in short duration. System should scale well when number of users increases Design We will use a rabbitmq to queue the incoming burst of requests. Each request response time window will be kept as minimal as possible to avoid crashing the system under heavy load. Each user after placing the request to add to cart will be in wait state and query the status of his request. The backend and frontend bundle into a single uber jar that can be deployed on many servers there by providing ability to horizontally scale. The max limit of requests that can be served by a single instance then depend on the default tomcat thread pool size of 200 and the server configurations. If the user tries to book the item before sale begin date, it will fail. Add to cart will work only after the sale begins.\nIf the same user tries to book the item in 2 tabs only one will succeed, one user can buy only 1 item in the sale.\nTwo users can try to book the item at the same time each will be alloted a different item if its available.\nAfter adding item to cart user can remove the item from cart.\nAfter adding an item the client waits for the action to complete.\nCode 1package com.demo.project90.controller; 2 3import static com.demo.project90.config.Constant.ITEM_QUEUE; 4import static com.demo.project90.config.Constant.ITEM_SALE_NOT_STARTED_MSG; 5import static com.demo.project90.config.Constant.TOKEN_QUEUE; 6import static org.springframework.http.HttpStatus.NOT_FOUND; 7 8import java.time.Duration; 9import java.time.Instant; 10import java.util.UUID; 11 12import com.demo.project90.domain.Audit; 13import com.demo.project90.domain.Item; 14import com.demo.project90.model.QEvent; 15import com.demo.project90.model.QItem; 16import com.demo.project90.repo.AuditRepository; 17import com.demo.project90.repo.ItemRepository; 18import com.demo.project90.service.AuditService; 19import lombok.RequiredArgsConstructor; 20import lombok.extern.slf4j.Slf4j; 21import org.springframework.amqp.rabbit.connection.ConnectionFactory; 22import org.springframework.amqp.rabbit.core.RabbitTemplate; 23import org.springframework.web.bind.annotation.DeleteMapping; 24import org.springframework.web.bind.annotation.GetMapping; 25import org.springframework.web.bind.annotation.PathVariable; 26import org.springframework.web.bind.annotation.RestController; 27import org.springframework.web.server.ResponseStatusException; 28 29@RestController 30@Slf4j 31@RequiredArgsConstructor 32public class HomeController { 33 34 private final RabbitTemplate template; 35 private final ItemRepository itemRepo; 36 private final AuditRepository auditRepo; 37 private final AuditService auditService; 38 private final ConnectionFactory connectionFactory; 39 40 @GetMapping(value = \u0026#34;/api/user\u0026#34;) 41 public String getUser() { 42 return UUID.randomUUID().toString().substring(0, 7); 43 } 44 45 @GetMapping(value = \u0026#34;/api/items/count\u0026#34;) 46 public long getFreeItemCount() { 47 return itemRepo.countAllByCartOfIsNull(); 48 } 49 50 @GetMapping(value = \u0026#34;/api/cart/items/{username}\u0026#34;) 51 public Iterable\u0026lt;Item\u0026gt; getCartItems(@PathVariable String username) { 52 return itemRepo.findAllByCartOf(username); 53 } 54 55 @GetMapping(value = \u0026#34;/api/cart/{username}\u0026#34;) 56 public QEvent addCartItem(@PathVariable String username) { 57 Instant start = Instant.now(); 58 log.info(\u0026#34;username: {}\u0026#34;, username); 59 String token = UUID.randomUUID().toString(); 60 QEvent qEvent = QEvent.builder() 61 .user(username) 62 .token(token) 63 .attemptCount(0) 64 .build(); 65 if (!auditService.checkIfSaleStarted()) { 66 auditService.saveAudit(ITEM_SALE_NOT_STARTED_MSG, qEvent.getUser(), qEvent.getToken(), -1l, \u0026#34;FAIL\u0026#34;); 67 Instant finish = Instant.now(); 68 log.info(\u0026#34;Request rejected in: {} ms\u0026#34;, username, Duration.between(start, finish).toMillis()); 69 return qEvent; 70 } else { 71 template.convertAndSend(TOKEN_QUEUE, qEvent); 72 Instant finish = Instant.now(); 73 log.info(\u0026#34;Add to cart for {} took: {} ms\u0026#34;, username, Duration.between(start, finish).toMillis()); 74 return qEvent; 75 } 76 } 77 78 @DeleteMapping(value = \u0026#34;/api/cart/{username}/{id}\u0026#34;) 79 public boolean deleteCartItem(@PathVariable String username, @PathVariable Long id) { 80 itemRepo.findById(id).ifPresent(e -\u0026gt; { 81 //only user who owns the cart can delete 82 if (e.getCartOf().equals(username)) { 83 e.setCartOf(null); 84 e.setAddedOn(null); 85 itemRepo.save(e); 86 pushAvailableItem(QItem.builder().itemId(id).build()); 87 } 88 }); 89 90 return true; 91 } 92 93 @GetMapping(value = \u0026#34;/api/audit/{token}\u0026#34;) 94 public Audit getTokenMessage(@PathVariable String token) { 95 if (auditRepo.findByToken(token).isPresent()) { 96 return auditRepo.findByToken(token).get(); 97 } else { 98 throw new ResponseStatusException(NOT_FOUND, \u0026#34;token not found!\u0026#34;); 99 } 100 } 101 102 private void pushAvailableItem(QItem qItem) { 103 template.convertAndSend(ITEM_QUEUE, qItem); 104 } 105} 1package com.demo.project90.queue; 2 3import static com.demo.project90.config.Constant.ITEM_ADDED_TO_CART_MSG; 4import static com.demo.project90.config.Constant.ITEM_ALREADY_IN_CART_MSG; 5import static com.demo.project90.config.Constant.ITEM_MISMATCH_MSG; 6import static com.demo.project90.config.Constant.ITEM_QUEUE; 7import static com.demo.project90.config.Constant.ITEM_SALE_NOT_STARTED_MSG; 8import static com.demo.project90.config.Constant.ITEM_SOLD_OUT_MSG; 9import static com.demo.project90.config.Constant.ITEM_TYPE; 10import static com.demo.project90.config.Constant.TOKEN_QUEUE; 11 12import java.time.LocalDateTime; 13 14import com.demo.project90.domain.Item; 15import com.demo.project90.model.QEvent; 16import com.demo.project90.model.QItem; 17import com.demo.project90.repo.AuditRepository; 18import com.demo.project90.repo.ItemRepository; 19import com.demo.project90.service.AuditService; 20import com.fasterxml.jackson.databind.ObjectMapper; 21import com.rabbitmq.client.Channel; 22import com.rabbitmq.client.GetResponse; 23import lombok.RequiredArgsConstructor; 24import lombok.SneakyThrows; 25import lombok.extern.slf4j.Slf4j; 26import org.springframework.amqp.rabbit.annotation.RabbitListener; 27import org.springframework.amqp.rabbit.connection.Connection; 28import org.springframework.amqp.rabbit.connection.ConnectionFactory; 29import org.springframework.stereotype.Component; 30 31@Component 32@Slf4j 33@RequiredArgsConstructor 34public class EventListener { 35 36 private final ItemRepository itemRepo; 37 private final AuditRepository auditRepo; 38 private final AuditService auditService; 39 private final ConnectionFactory connectionFactory; 40 private ObjectMapper objectMapper = new ObjectMapper(); 41 42 @SneakyThrows 43 @RabbitListener(queues = TOKEN_QUEUE) 44 public void processRequest(QEvent qEvent) { 45 log.info(\u0026#34;Received qEvent: {}\u0026#34;, qEvent); 46 if (!auditService.checkIfSaleStarted()) { 47 auditService.saveAudit(ITEM_SALE_NOT_STARTED_MSG, qEvent.getUser(), qEvent.getToken(), -1l, \u0026#34;FAIL\u0026#34;); 48 return; 49 } 50 //check if user already has item in cart. 51 if (itemRepo.countByCartOfAndType(qEvent.getUser(), ITEM_TYPE) == 0) { 52 //Find the first available item. 53 QItem qItem = popAvailableItem(); 54 if (qItem == null) { 55 //sold out. 56 auditService.saveAudit(ITEM_SOLD_OUT_MSG, qEvent.getUser(), qEvent.getToken(), -1l, \u0026#34;FAIL\u0026#34;); 57 return; 58 } 59 Item item = itemRepo.findByIdAndCartOfIsNull(qItem.getItemId()); 60 if (item != null) { 61 //add to cart of user. 62 item.setCartOf(qEvent.getUser()); 63 item.setAddedOn(LocalDateTime.now()); 64 itemRepo.save(item); 65 auditService.saveAudit(String.format(ITEM_ADDED_TO_CART_MSG, item.getName()), qEvent.getUser(), qEvent.getToken(), item.getId(), \u0026#34;SUCCESS\u0026#34;); 66 } else { 67 auditService.saveAudit(ITEM_MISMATCH_MSG, qEvent.getUser(), qEvent.getToken(), -1l, \u0026#34;FAIL\u0026#34;); 68 } 69 } else { 70 //sold out. 71 auditService.saveAudit(ITEM_ALREADY_IN_CART_MSG, qEvent.getUser(), qEvent.getToken(), -1l, \u0026#34;FAIL\u0026#34;); 72 } 73 } 74 75 @SneakyThrows 76 private QItem popAvailableItem() { 77 try (Connection connection = connectionFactory.createConnection()) { 78 Channel channel = connection.createChannel(true); 79 GetResponse resp = channel.basicGet(ITEM_QUEUE, true); 80 if (resp != null) { 81 String message = new String(resp.getBody(), \u0026#34;UTF-8\u0026#34;); 82 return objectMapper.readValue(message, QItem.class); 83 } 84 return null; 85 } 86 } 87 88} 1package com.demo.project90.service; 2 3import static com.demo.project90.config.Constant.SALE_BEGINS_AFTER; 4 5import java.time.LocalDateTime; 6 7import com.demo.project90.domain.Audit; 8import com.demo.project90.repo.AuditRepository; 9import lombok.RequiredArgsConstructor; 10import lombok.extern.slf4j.Slf4j; 11import org.springframework.stereotype.Component; 12 13@Component 14@RequiredArgsConstructor 15@Slf4j 16public class AuditService { 17 private final AuditRepository auditRepo; 18 19 public void saveAudit(String message, String username, String token, Long itemId, String type) { 20 log.info(message); 21 //Note: Audit tables are always insert and no updates should happen. 22 auditRepo.save(Audit.builder() 23 .username(username) 24 .itemId(itemId) 25 .message(message) 26 .token(token) 27 .logDate(LocalDateTime.now()) 28 .type(type) 29 .build()); 30 } 31 32 public boolean checkIfSaleStarted() { 33 if (LocalDateTime.now().isAfter(SALE_BEGINS_AFTER)) { 34 return true; 35 } else { 36 return false; 37 } 38 } 39} 1\u0026lt;div class=\u0026#34;content-container\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;content-area\u0026#34;\u0026gt; 3 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 4 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 5 \u0026lt;div class=\u0026#34;alert-section\u0026#34;\u0026gt; 6 \u0026lt;app-alert\u0026gt;\u0026lt;/app-alert\u0026gt; 7 \u0026lt;/div\u0026gt; 8 9 \u0026lt;h2 style=\u0026#34;text-align: center\u0026#34;\u0026gt;Flash Sale: {{itemCount}} items available\u0026lt;/h2\u0026gt; 10 \u0026lt;div style=\u0026#34;text-align: center;\u0026#34;\u0026gt; 11 \u0026lt;img src=\u0026#34;assets/flashsale.png\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34; style=\u0026#34;text-align: center;\u0026#34;\u0026gt; 12 \u0026lt;br/\u0026gt; 13 \u0026lt;clr-spinner [clrMedium]=\u0026#34;true\u0026#34; *ngIf=\u0026#34;spinner\u0026#34; id=\u0026#34;spinner\u0026#34;\u0026gt;\u0026lt;/clr-spinner\u0026gt; 14 \u0026lt;p *ngIf=\u0026#34;spinner\u0026#34;\u0026gt;\u0026lt;b style=\u0026#34;color:red;\u0026#34;\u0026gt;Dont Refresh\u0026lt;/b\u0026gt;\u0026lt;/p\u0026gt; 15 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; (click)=\u0026#34;addToCart()\u0026#34; *ngIf=\u0026#34;showAddToCartButton\u0026#34; 16 id=\u0026#34;addToCart\u0026#34;\u0026gt; 17 Add to cart 18 \u0026lt;/button\u0026gt; 19 \u0026lt;/div\u0026gt; 20 \u0026lt;br/\u0026gt; 21 \u0026lt;br/\u0026gt; 22 \u0026lt;h2 style=\u0026#34;text-align: center\u0026#34;\u0026gt;My Cart\u0026lt;/h2\u0026gt; 23 \u0026lt;clr-datagrid\u0026gt; 24 \u0026lt;clr-dg-column\u0026gt;Name\u0026lt;/clr-dg-column\u0026gt; 25 \u0026lt;clr-dg-column\u0026gt;Price\u0026lt;/clr-dg-column\u0026gt; 26 \u0026lt;clr-dg-column\u0026gt;Cart Of\u0026lt;/clr-dg-column\u0026gt; 27 \u0026lt;clr-dg-column\u0026gt;Added On\u0026lt;/clr-dg-column\u0026gt; 28 \u0026lt;clr-dg-column\u0026gt;Action\u0026lt;/clr-dg-column\u0026gt; 29 \u0026lt;!-- structural directive --\u0026gt; 30 \u0026lt;clr-dg-row clr-dg-row *clrDgItems=\u0026#34;let item of items\u0026#34;\u0026gt; 31 \u0026lt;clr-dg-placeholder class=\u0026#34;content-center\u0026#34;\u0026gt;No Items in Cart!\u0026lt;/clr-dg-placeholder\u0026gt; 32 \u0026lt;clr-dg-cell\u0026gt;{{item.name}}\u0026lt;/clr-dg-cell\u0026gt; 33 \u0026lt;clr-dg-cell\u0026gt;{{item.price}}\u0026lt;/clr-dg-cell\u0026gt; 34 \u0026lt;clr-dg-cell\u0026gt;{{item.cartOf}}\u0026lt;/clr-dg-cell\u0026gt; 35 \u0026lt;clr-dg-cell\u0026gt;{{item.addedOn}}\u0026lt;/clr-dg-cell\u0026gt; 36 \u0026lt;clr-dg-cell\u0026gt; 37 \u0026lt;cds-icon shape=\u0026#34;trash\u0026#34; style=\u0026#34;cursor: pointer; color: blue\u0026#34; (click)=\u0026#34;deleteCartFor(item.id)\u0026#34;\u0026gt; 38 \u0026lt;/cds-icon\u0026gt; 39 \u0026lt;/clr-dg-cell\u0026gt; 40 \u0026lt;/clr-dg-row\u0026gt; 41 42 \u0026lt;clr-dg-footer\u0026gt; 43 \u0026lt;clr-dg-pagination #pagination [clrDgPageSize]=\u0026#34;10\u0026#34;\u0026gt; 44 \u0026lt;clr-dg-page-size [clrPageSizeOptions]=\u0026#34;[10,20,50,100]\u0026#34;\u0026gt;Items per page\u0026lt;/clr-dg-page-size\u0026gt; 45 {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} items 46 \u0026lt;/clr-dg-pagination\u0026gt; 47 \u0026lt;/clr-dg-footer\u0026gt; 48 \u0026lt;/clr-datagrid\u0026gt; 49 50 \u0026lt;/div\u0026gt; 51 \u0026lt;/div\u0026gt; 52 \u0026lt;/div\u0026gt; 53\u0026lt;/div\u0026gt; 54 1import {Component, OnInit, ViewChild} from \u0026#39;@angular/core\u0026#39;; 2import {RestService} from \u0026#39;../../services/rest.service\u0026#39;; 3import {Router} from \u0026#39;@angular/router\u0026#39;; 4import {AlertComponent} from \u0026#39;../alert/alert.component\u0026#39;; 5import {ClarityIcons, trashIcon} from \u0026#39;@cds/core/icon\u0026#39;; 6import {Item} from \u0026#34;../../models/item\u0026#34;; 7 8@Component({ 9 selector: \u0026#39;app-home\u0026#39;, 10 templateUrl: \u0026#39;./home.component.html\u0026#39;, 11 styleUrls: [] 12}) 13export class HomeComponent implements OnInit { 14 15 items: Item[] = []; 16 itemCount = 0; 17 // @ts-ignore 18 @ViewChild(AlertComponent, {static: true}) private alert: AlertComponent; 19 spinner = false; 20 showAddToCartButton = true; 21 token = \u0026#39;\u0026#39;; 22 23 constructor(private restService: RestService, private router: Router) { 24 ClarityIcons.addIcons(trashIcon); 25 } 26 27 ngOnInit(): void { 28 this.refresh(); 29 this.token = \u0026#39;\u0026#39;; 30 } 31 32 refresh(): void { 33 this.getCartItems(); 34 this.getItemCount(); 35 } 36 37 getCartItems(): void { 38 const username = sessionStorage.getItem(\u0026#39;user\u0026#39;); 39 this.restService.getCartItems(username).subscribe(data =\u0026gt; { 40 this.items = data; 41 if (this.items.length \u0026gt; 0) { 42 this.showAddToCartButton = false; 43 } 44 }); 45 } 46 47 getItemCount(): void { 48 this.restService.getFreeItemCount().subscribe(data =\u0026gt; { 49 this.itemCount = data; 50 if (this.itemCount === 0) { 51 this.showAddToCartButton = false; 52 } 53 }); 54 } 55 56 addToCart(): void { 57 const username = sessionStorage.getItem(\u0026#39;user\u0026#39;); 58 this.showAddToCartButton = false; 59 this.spinner = true; 60 this.restService.addCartItem(username) 61 .subscribe(data =\u0026gt; { 62 if (data) { 63 this.token = data.token; 64 this.alert.showSuccess(\u0026#39;In Queue!\u0026#39;); 65 } else { 66 this.alert.showError(\u0026#39;Failed to enter Queue!\u0026#39;); 67 } 68 this.checkIfComplete(); 69 }); 70 } 71 72 checkIfComplete(): void { 73 this.restService.getAuditToken(this.token) 74 .subscribe(data =\u0026gt; { 75 if (data) { 76 if (data.type === \u0026#39;SUCCESS\u0026#39;) { 77 this.alert.showSuccess(data.message); 78 } else { 79 this.alert.showError(data.message); 80 } 81 this.refresh(); 82 this.spinner = false; 83 } 84 }, 85 error =\u0026gt; { 86 setTimeout( 87 () =\u0026gt; { 88 this.checkIfComplete(); 89 }, 90 5000 91 ); 92 }); 93 } 94 95 deleteCartFor(id: any): void { 96 const username = sessionStorage.getItem(\u0026#39;user\u0026#39;); 97 this.restService.deleteCartItem(username, id) 98 .subscribe(data =\u0026gt; { 99 if (data) { 100 this.items = []; 101 this.alert.showSuccess(\u0026#39;Deleted from cart!\u0026#39;); 102 } else { 103 this.alert.showError(\u0026#39;Failed to delete from cart!\u0026#39;); 104 } 105 this.refresh(); 106 }); 107 } 108 109} Setup Project 90 Flash Sale + RabbitMQ + Postgres + Jmeter\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container RabbitMQ 1docker run -d -p 5672:5672 -p 15672:15672 --name my-rabbit rabbitmq:3-management Open http://localhost:15672/\n1user: guest 2pwd: guest Dev To run the backend in dev mode Postgres DB is needed to run the integration tests during build.\n1./gradlew clean build 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:4200/\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd build/libs 3java -jar project90-1.0.0.jar Open http://localhost:8080/\nJMeter \u0026amp; Selenium To test for concurrent requests and load test the UI you can use JMeter with selenium plugin\n1brew install jmeter 2xattr -d com.apple.quarantine chromedriver Install the selenium plugin for JMeter\nhttps://jmeter-plugins.org/\nDownload the chrome driver\nhttps://chromedriver.chromium.org/downloads\nDocker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project90:1.0.0 . 3docker images |grep project90 4docker tag project90:1.0.0 gitorko/project90:1.0.0 5docker push gitorko/project90:1.0.0 6docker-compose -f docker/docker-compose.yml up Testing Click on start button to test multiple requests to add to cart. The resources of the system are\nTomcat server has default 200 worker threads. Each 'add to cart' request takes average 20 ms for the above resources. 200/0.02 = 10,000 requests can be handled per second. Reducing this by load factor due to GC and context switching of 0.8 (80%) gives us 10000 x 0.8 = 8000 requests per second.\nThis setup can be deployed on multi node scenario, as the tokens are fetched from RabbitMQ queue it will scale on a distributed setup. Further optimization can be done by having region dedicated queue sharding and region specific event processor.\nFor authenticated sessions DOS (Denial Of Service) attacks are not a concern, if you still need to ensure against DOS attacks you can use a Captcha.\nOnce you add more servers to handle the request the bottleneck shifts to RabbitMQ capability to handle load and we can then explore clustering in RabbitMQ. The queue can be made persistent so that events survive a restart.\nReferences https://clarity.design/\nhttps://spring.io/projects/spring-boot\nhttps://www.rabbitmq.com/\nhttps://hackernoon.com/developing-a-flash-sale-system-7481f6ede0a3\n","link":"https://gitorko.github.io/post/flash-sale-system/","section":"post","tags":["flash-sale","rabbitmq","clarity","jmeter","selenium"],"title":"Flash Sale System"},{"body":"","link":"https://gitorko.github.io/tags/flash-sale/","section":"tags","tags":null,"title":"flash-sale"},{"body":"","link":"https://gitorko.github.io/categories/jmeter/","section":"categories","tags":null,"title":"JMeter"},{"body":"","link":"https://gitorko.github.io/categories/jpa/","section":"categories","tags":null,"title":"JPA"},{"body":"","link":"https://gitorko.github.io/tags/rabbitmq/","section":"tags","tags":null,"title":"rabbitmq"},{"body":"","link":"https://gitorko.github.io/tags/selenium/","section":"tags","tags":null,"title":"selenium"},{"body":"","link":"https://gitorko.github.io/categories/selenium/","section":"categories","tags":null,"title":"Selenium"},{"body":"","link":"https://gitorko.github.io/categories/springboot/","section":"categories","tags":null,"title":"SpringBoot"},{"body":"Clarity provides Server-Driven DataGrid. Using Query DSL we will fetch page by page data and render it in clarity server-driven data grid\nGithub: https://github.com/gitorko/project86\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project86 2cd project86 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nServer-Driven DataGrid When dealing with large amounts of data or heavy processing, a DataGrid often has to access the currently displayed data only, requesting only the necessary pieces of data from the server.\nDesign Code 1package com.demo.project86.controller; 2 3import com.demo.project86.domain.Customer; 4import com.demo.project86.domain.CustomerBinderCustomizer; 5import com.demo.project86.repo.CustomerRepository; 6import lombok.RequiredArgsConstructor; 7import lombok.extern.slf4j.Slf4j; 8import org.springframework.beans.factory.annotation.Autowired; 9import org.springframework.data.domain.Page; 10import org.springframework.data.domain.Pageable; 11import org.springframework.data.querydsl.binding.QuerydslPredicate; 12import org.springframework.data.web.PageableDefault; 13import org.springframework.web.bind.annotation.DeleteMapping; 14import org.springframework.web.bind.annotation.GetMapping; 15import org.springframework.web.bind.annotation.PathVariable; 16import org.springframework.web.bind.annotation.PostMapping; 17import org.springframework.web.bind.annotation.RequestBody; 18import org.springframework.web.bind.annotation.RestController; 19 20@RestController 21@Slf4j 22@RequiredArgsConstructor 23public class HomeController { 24 25 @Autowired 26 CustomerRepository customerRepo; 27 28 @GetMapping(value = \u0026#34;/api/customer\u0026#34;) 29 public Page\u0026lt;Customer\u0026gt; getCustomers(@PageableDefault(size = 20) Pageable pageRequest, 30 @QuerydslPredicate(root = Customer.class, bindings = CustomerBinderCustomizer.class) com.querydsl.core.types.Predicate predicate) { 31 return customerRepo.findAll(predicate, pageRequest); 32 } 33 34 @PostMapping(value = \u0026#34;/api/customer\u0026#34;) 35 public Customer saveCustomer(@RequestBody Customer customer) { 36 log.info(\u0026#34;Saving customer!\u0026#34;); 37 return customerRepo.save(customer); 38 } 39 40 @DeleteMapping(value = \u0026#34;/api/customer/{id}\u0026#34;) 41 public void deleteCustomer(@PathVariable Long id) { 42 log.info(\u0026#34;Deleting customer: {}\u0026#34;, id); 43 customerRepo.deleteById(id); 44 } 45 46} 1package com.demo.project86.domain; 2 3import java.io.Serializable; 4import javax.persistence.Basic; 5import javax.persistence.Column; 6import javax.persistence.Entity; 7import javax.persistence.GeneratedValue; 8import javax.persistence.GenerationType; 9import javax.persistence.Id; 10import javax.persistence.Table; 11import javax.validation.constraints.Size; 12 13import lombok.AllArgsConstructor; 14import lombok.Builder; 15import lombok.Data; 16import lombok.NoArgsConstructor; 17 18@Entity 19@Table(name = \u0026#34;customer\u0026#34;) 20@Data 21@Builder 22@AllArgsConstructor 23@NoArgsConstructor 24public class Customer implements Serializable { 25 26 private static final long serialVersionUID = 1L; 27 @Id 28 @GeneratedValue(strategy = GenerationType.AUTO) 29 @Basic(optional = false) 30 @Column(name = \u0026#34;id\u0026#34;) 31 private Long id; 32 @Size(max = 45) 33 @Column(name = \u0026#34;first_name\u0026#34;) 34 private String firstName; 35 @Size(max = 45) 36 @Column(name = \u0026#34;last_name\u0026#34;) 37 private String lastName; 38 private String city; 39 40} 1package com.demo.project86.domain; 2 3import java.util.Collection; 4import java.util.Optional; 5 6import com.querydsl.core.BooleanBuilder; 7import com.querydsl.core.types.Predicate; 8import com.querydsl.core.types.dsl.StringPath; 9import org.springframework.data.querydsl.binding.MultiValueBinding; 10import org.springframework.data.querydsl.binding.QuerydslBinderCustomizer; 11import org.springframework.data.querydsl.binding.QuerydslBindings; 12 13public class CustomerBinderCustomizer implements QuerydslBinderCustomizer\u0026lt;QCustomer\u0026gt; { 14 15 @Override 16 public void customize(QuerydslBindings querydslBindings, QCustomer qCustomer) { 17 querydslBindings.including( 18 qCustomer.id, 19 qCustomer.firstName, 20 qCustomer.lastName, 21 qCustomer.city 22 ); 23 24 StringPath[] multiPropertySearchPaths = new StringPath[]{qCustomer.firstName, qCustomer.lastName, qCustomer.city}; 25 26 querydslBindings.bind(multiPropertySearchPaths).all(new MultiValueBinding\u0026lt;\u0026gt;() { 27 @Override 28 public Optional\u0026lt;Predicate\u0026gt; bind(StringPath path, Collection\u0026lt;? extends String\u0026gt; values) { 29 BooleanBuilder predicate = new BooleanBuilder(); 30 values.forEach(value -\u0026gt; predicate.or(path.containsIgnoreCase(value))); 31 return Optional.of(predicate); 32 } 33 }); 34 35 } 36} 1package com.demo.project86.repo; 2 3import com.demo.project86.domain.Customer; 4import org.springframework.data.jpa.repository.JpaRepository; 5import org.springframework.data.querydsl.QuerydslPredicateExecutor; 6 7public interface CustomerRepository extends JpaRepository\u0026lt;Customer, Long\u0026gt;, QuerydslPredicateExecutor\u0026lt;Customer\u0026gt; { 8} 1\u0026lt;div class=\u0026#34;content-container\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;content-area\u0026#34;\u0026gt; 3 \u0026lt;div class=\u0026#34;alert-section\u0026#34;\u0026gt; 4 \u0026lt;app-alert\u0026gt;\u0026lt;/app-alert\u0026gt; 5 \u0026lt;/div\u0026gt; 6 7 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 8 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 9 \u0026lt;h2 style=\u0026#34;text-align: center\u0026#34;\u0026gt;Customers\u0026lt;/h2\u0026gt; 10 \u0026lt;clr-datagrid [clrDgLoading]=\u0026#34;loading\u0026#34; (clrDgRefresh)=\u0026#34;refresh($event)\u0026#34;\u0026gt; 11 \u0026lt;clr-dg-placeholder class=\u0026#34;content-center\u0026#34;\u0026gt;No Customers!\u0026lt;/clr-dg-placeholder\u0026gt; 12 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;id\u0026#39;\u0026#34;\u0026gt;ID\u0026lt;/clr-dg-column\u0026gt; 13 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;firstName\u0026#39;\u0026#34;\u0026gt; 14 \u0026lt;ng-container *clrDgHideableColumn=\u0026#34;{hidden: false}\u0026#34;\u0026gt;First Name\u0026lt;/ng-container\u0026gt; 15 \u0026lt;/clr-dg-column\u0026gt; 16 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;lastName\u0026#39;\u0026#34;\u0026gt; 17 \u0026lt;ng-container *clrDgHideableColumn=\u0026#34;{hidden: false}\u0026#34;\u0026gt;Last Name\u0026lt;/ng-container\u0026gt; 18 \u0026lt;/clr-dg-column\u0026gt; 19 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;city\u0026#39;\u0026#34;\u0026gt; 20 \u0026lt;ng-container *clrDgHideableColumn=\u0026#34;{hidden: false}\u0026#34;\u0026gt;City\u0026lt;/ng-container\u0026gt; 21 \u0026lt;clr-dg-filter [clrDgFilter]=\u0026#34;cityFilter\u0026#34;\u0026gt; 22 \u0026lt;app-checkbox-filter 23 #cityFilter 24 [filterValues]=\u0026#34;cityFilterValues\u0026#34; 25 filterKey=\u0026#34;city\u0026#34;\u0026gt;\u0026lt;/app-checkbox-filter\u0026gt; 26 \u0026lt;/clr-dg-filter\u0026gt; 27 \u0026lt;/clr-dg-column\u0026gt; 28 \u0026lt;clr-dg-column\u0026gt;Action\u0026lt;/clr-dg-column\u0026gt; 29 \u0026lt;!-- structural directive --\u0026gt; 30 \u0026lt;clr-dg-row *ngFor=\u0026#34;let customer of customerPage?.content\u0026#34;\u0026gt; 31 \u0026lt;clr-dg-cell\u0026gt;{{customer.id}}\u0026lt;/clr-dg-cell\u0026gt; 32 \u0026lt;clr-dg-cell\u0026gt;{{customer.firstName}}\u0026lt;/clr-dg-cell\u0026gt; 33 \u0026lt;clr-dg-cell\u0026gt;{{customer.lastName}}\u0026lt;/clr-dg-cell\u0026gt; 34 \u0026lt;clr-dg-cell\u0026gt;{{customer.city}}\u0026lt;/clr-dg-cell\u0026gt; 35 \u0026lt;clr-dg-cell\u0026gt; 36 \u0026lt;cds-icon shape=\u0026#34;trash\u0026#34; style=\u0026#34;cursor: pointer; color: blue\u0026#34; (click)=\u0026#34;deleteCustomer(customer)\u0026#34;\u0026gt; 37 \u0026lt;/cds-icon\u0026gt; 38 \u0026lt;/clr-dg-cell\u0026gt; 39 \u0026lt;/clr-dg-row\u0026gt; 40 41 \u0026lt;clr-dg-footer\u0026gt; 42 \u0026lt;clr-dg-pagination #pagination [clrDgPageSize]=\u0026#34;10\u0026#34; [(clrDgPage)]=\u0026#34;page\u0026#34; 43 [clrDgTotalItems]=\u0026#34;total\u0026#34;\u0026gt; 44 \u0026lt;clr-dg-page-size [clrPageSizeOptions]=\u0026#34;[10,20,50,100]\u0026#34;\u0026gt;Customers per page\u0026lt;/clr-dg-page-size\u0026gt; 45 {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} customers 46 \u0026lt;/clr-dg-pagination\u0026gt; 47 \u0026lt;/clr-dg-footer\u0026gt; 48 49 \u0026lt;/clr-datagrid\u0026gt; 50 \u0026lt;/div\u0026gt; 51 \u0026lt;/div\u0026gt; 52 53 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 54 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 55 \u0026lt;form class=\u0026#34;clr-form clr-form-horizontal\u0026#34;\u0026gt; 56 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 57 \u0026lt;label for=\u0026#34;firstName\u0026#34; class=\u0026#34;clr-control-label\u0026#34;\u0026gt;First Name\u0026lt;/label\u0026gt; 58 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 59 \u0026lt;div class=\u0026#34;clr-input-wrapper\u0026#34;\u0026gt; 60 \u0026lt;!-- two way data binding --\u0026gt; 61 \u0026lt;input type=\u0026#34;text\u0026#34; [(ngModel)]=\u0026#34;customer.firstName\u0026#34; id=\u0026#34;firstName\u0026#34; name=\u0026#34;firstName\u0026#34; 62 placeholder=\u0026#34;Placeholder\u0026#34; class=\u0026#34;clr-input\u0026#34;/\u0026gt; 63 \u0026lt;/div\u0026gt; 64 \u0026lt;/div\u0026gt; 65 \u0026lt;/div\u0026gt; 66 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 67 \u0026lt;label for=\u0026#34;lastName\u0026#34; class=\u0026#34;clr-control-label\u0026#34;\u0026gt;Last Name\u0026lt;/label\u0026gt; 68 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 69 \u0026lt;div class=\u0026#34;clr-input-wrapper\u0026#34;\u0026gt; 70 \u0026lt;input [(ngModel)]=\u0026#34;customer.lastName\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;lastName\u0026#34; name=\u0026#34;lastName\u0026#34; 71 placeholder=\u0026#34;Placeholder\u0026#34; class=\u0026#34;clr-input\u0026#34;/\u0026gt; 72 \u0026lt;/div\u0026gt; 73 \u0026lt;/div\u0026gt; 74 \u0026lt;/div\u0026gt; 75 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 76 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 77 \u0026lt;!-- event binding --\u0026gt; 78 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; (click)=\u0026#34;saveCustomer()\u0026#34;\u0026gt;Save\u0026lt;/button\u0026gt; 79 \u0026lt;/div\u0026gt; 80 \u0026lt;/div\u0026gt; 81 \u0026lt;/form\u0026gt; 82 \u0026lt;/div\u0026gt; 83 \u0026lt;/div\u0026gt; 84 85 \u0026lt;/div\u0026gt; 86\u0026lt;/div\u0026gt; The debounceTime added to debounce the events so that rest api doesn't get called for every keystroke.\n1import {Component, OnInit, ViewChild} from \u0026#39;@angular/core\u0026#39;; 2import {Customer} from \u0026#39;../../models/customer\u0026#39;; 3import {RestService} from \u0026#39;../../services/rest.service\u0026#39;; 4import {Router} from \u0026#39;@angular/router\u0026#39;; 5import {ClarityIcons, trashIcon} from \u0026#39;@cds/core/icon\u0026#39;; 6import {ClrDatagridStateInterface} from \u0026#39;@clr/angular\u0026#39;; 7import {CustomerPage} from \u0026#34;../../models/customer-page\u0026#34;; 8import {AlertComponent} from \u0026#34;../alert/alert.component\u0026#34;; 9import {Subject} from \u0026#34;rxjs\u0026#34;; 10import {debounceTime} from \u0026#34;rxjs/operators\u0026#34;; 11 12@Component({ 13 selector: \u0026#39;app-home\u0026#39;, 14 templateUrl: \u0026#39;./home.component.html\u0026#39;, 15 styleUrls: [] 16}) 17export class HomeComponent implements OnInit { 18 19 customerPage: CustomerPage = new CustomerPage(); 20 customer: Customer = new Customer(); 21 loading = false; 22 page: number = 1; 23 total: number = 1; 24 cityFilterValues: string[] = []; 25 tableState: ClrDatagridStateInterface = {page: {current: 1, from: 1, size: 10, to: 10}}; 26 debouncer: Subject\u0026lt;any\u0026gt; = new Subject\u0026lt;any\u0026gt;(); 27 28 // @ts-ignore 29 @ViewChild(AlertComponent, {static: true}) private alert: AlertComponent; 30 31 constructor(private restService: RestService, private router: Router) { 32 ClarityIcons.addIcons(trashIcon); 33 this.cityFilterValues.push(\u0026#34;Bangalore\u0026#34;); 34 this.cityFilterValues.push(\u0026#34;New York\u0026#34;); 35 this.cityFilterValues.push(\u0026#34;London\u0026#34;); 36 } 37 38 ngOnInit(): void { 39 this.loading = true; 40 this.debouncer 41 .pipe(debounceTime(700)) 42 .subscribe(state =\u0026gt; { 43 this.tableState = state; 44 this.loading = true; 45 if (!state.page) { 46 state.page = { 47 from: 1, 48 to: 10, 49 size: 10, 50 }; 51 } 52 // @ts-ignore 53 let pageStart = state.page.current - 1; 54 let pageSize = state.page.size; 55 this.restService.getCustomers(pageStart, pageSize, state.filters, state.sort).subscribe(data =\u0026gt; { 56 this.customerPage = data; 57 this.total = this.customerPage?.totalElements; 58 this.loading = false; 59 }, 60 error =\u0026gt; { 61 this.loading = false; 62 }); 63 } 64 ); 65 } 66 67 saveCustomer(): void { 68 console.log(\u0026#39;save customer!\u0026#39;); 69 this.restService.saveCustomer(this.customer) 70 .subscribe(data =\u0026gt; { 71 this.alert.showSuccess(\u0026#39;Saved customer: \u0026#39; + this.customer.firstName); 72 this.refresh(this.tableState); 73 }); 74 } 75 76 deleteCustomer(customer: Customer): void { 77 console.log(\u0026#39;deleting customer : \u0026#39; + customer.id); 78 this.restService.deleteCustomer(customer.id) 79 .subscribe(data =\u0026gt; { 80 this.alert.showSuccess(\u0026#39;Deleted customer: \u0026#39; + customer.id); 81 this.refresh(this.tableState); 82 }); 83 } 84 85 refresh(state: ClrDatagridStateInterface) { 86 this.debouncer.next(state); 87 } 88 89} Setup Project 86 Clarity - Server Driven Data Grid with QueryDSL\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To Run backend in dev mode\n1cd project86 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:4200/\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd project86/build/libs 3java -jar project86-1.0.0.jar Open http://localhost:8080/\nDocker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project86:1.0.0 . 3docker images |grep project86 4docker tag project86:1.0.0 gitorko/project86:1.0.0 5docker push gitorko/project86:1.0.0 6docker-compose -f docker/docker-compose.yml up References https://clarity.design/\nhttps://clarity.design/angular-components/datagrid/#server-driven-datagrid\n","link":"https://gitorko.github.io/post/clarity-server-driven-datagrid/","section":"post","tags":["server-driven","clarity","datagrid","querydsl"],"title":"Clarity Server-Driven DataGrid"},{"body":"","link":"https://gitorko.github.io/tags/datagrid/","section":"tags","tags":null,"title":"datagrid"},{"body":"","link":"https://gitorko.github.io/tags/jpa/","section":"tags","tags":null,"title":"JPA"},{"body":"","link":"https://gitorko.github.io/tags/optimistic-locking/","section":"tags","tags":null,"title":"optimistic-locking"},{"body":"","link":"https://gitorko.github.io/categories/optimistic-locking/","section":"categories","tags":null,"title":"Optimistic-Locking"},{"body":"","link":"https://gitorko.github.io/tags/querydsl/","section":"tags","tags":null,"title":"querydsl"},{"body":"","link":"https://gitorko.github.io/categories/querydsl/","section":"categories","tags":null,"title":"QueryDSL"},{"body":"","link":"https://gitorko.github.io/tags/server-driven/","section":"tags","tags":null,"title":"server-driven"},{"body":"A Ticket Booking system developed with Spring Boot, Spring JPA, Redis and Angular (Clarity) frontend.\nGithub: https://github.com/gitorko/project87\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project87 2cd project87 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nFeatures A ticket booking application that support concurrent ticket booking for multiple users along with automatic unlock of blocked tickets. Provide QR code ticket and completes the ticketing flow on admit.\nFunctional Requirements A ticket booking system where users can book tickets. Two users cant book the same ticket. Authentication can be simulated to randomly assign a user to each browser instance. Each browser session considered as a unique user. Logout should assign a new user to the session. User should be able to block a ticket before making payment. Other user should not be able to block the same ticket. If the user doesnt complete the payment in 30 seconds the ticket which is blocked should be released back to the free pool. After blocking a ticket user can cancel the ticket, this should release the ticket back to the free pool. If the user tries to confirm the ticket after blocking wait for 30 seconds the booking should fail. Same user should be able to book the same ticket twice from two different browser sessions. Only user who has blocked the ticket can confirm the ticket. If user is looking at stale data, the ticket is already booked by other user then the transaction should fail. Should generate QR code as ticket Scanning the QR code should indicate that user is admitted into the venue. A single booking can book N tickets. Non-Functional Requirements Latency should be low. System should be highly available. System should scale well when number of users increases. We will use a fixed rate scheduler to release any tickets held for more than 30 seconds. Design We will postgres DB to persist the booking data. We will use optimistic locking as it scales well without locking the db rows. Two users can try to book the same ticket at the same time. It uses optimistic locking to RESERVE a ticket for one user and throws ObjectOptimisticLockingFailureException for the other user.\nWhile the first user is waiting to confirm, if the second user tries to book the same ticket it fails.\nIf the first user doesn't complete the payment confirmation within 30 seconds the lock on the ticket is released. If the first user presses cancel button then also the lock on the RESERVED ticket is released.\nIf the first user tries to confirm the ticket after 30 seconds then the booking fails as ticket is held in RESERVED state for a user only for 30 seconds.\nIf the same user tries to book the same seat from 2 different windows, one will succeed while other will throw error\nBackend api ensure that only user who RESERVED the ticket can book the ticket. So a ticket RESERVED by first user cant be booked by second user.\nIf the second user hasn't refreshed his screen and tries to book already BOOKED tickets it will fail\nQR code is generated for each ticket, clicking on the ticket takes you to the QR code.\nCan also be fetched via postman\nOn scanning the QR code in your mobile and visiting the uri provided the state is marked as entered completing the ticketing flow.\nEntered indicates that user has been admitted to the event on showing the QR code ticket. You can now track who booked the ticket and if they visited the event using the QR code ticket.\nCode 1package com.demo.project87.controller; 2 3import java.io.ByteArrayOutputStream; 4import java.io.IOException; 5import java.net.InetAddress; 6import java.time.LocalDateTime; 7import java.util.HashSet; 8import java.util.Set; 9import java.util.UUID; 10import javax.transaction.Transactional; 11 12import com.demo.project87.domain.BookingRequest; 13import com.demo.project87.domain.Ticket; 14import com.demo.project87.repository.TicketRepository; 15import com.google.zxing.BarcodeFormat; 16import com.google.zxing.WriterException; 17import com.google.zxing.client.j2se.MatrixToImageWriter; 18import com.google.zxing.common.BitMatrix; 19import com.google.zxing.qrcode.QRCodeWriter; 20import lombok.RequiredArgsConstructor; 21import lombok.extern.slf4j.Slf4j; 22import org.springframework.beans.factory.annotation.Autowired; 23import org.springframework.http.MediaType; 24import org.springframework.orm.ObjectOptimisticLockingFailureException; 25import org.springframework.scheduling.annotation.Scheduled; 26import org.springframework.web.bind.annotation.GetMapping; 27import org.springframework.web.bind.annotation.PathVariable; 28import org.springframework.web.bind.annotation.PostMapping; 29import org.springframework.web.bind.annotation.RequestBody; 30import org.springframework.web.bind.annotation.ResponseBody; 31import org.springframework.web.bind.annotation.RestController; 32 33@RestController 34@Slf4j 35@RequiredArgsConstructor 36public class HomeController { 37 38 private static final Integer EXPIRY_TTL_SECS = 30; 39 40 @Autowired 41 TicketRepository ticketRepo; 42 43 @GetMapping(value = \u0026#34;/api/user\u0026#34;) 44 public String getUser() { 45 return UUID.randomUUID().toString().substring(0, 7); 46 } 47 48 @GetMapping(value = \u0026#34;/api/tickets\u0026#34;) 49 public Iterable\u0026lt;Ticket\u0026gt; getTickets() { 50 return ticketRepo.findAllByOrderByIdAsc(); 51 } 52 53 @PostMapping(value = \u0026#34;/api/ticket\u0026#34;) 54 public Boolean bookTicket(@RequestBody BookingRequest bookingRequest) { 55 log.info(\u0026#34;Confirming Booking! {}\u0026#34;, bookingRequest); 56 return confirmBooking(bookingRequest); 57 } 58 59 @PostMapping(value = \u0026#34;/api/hold\u0026#34;) 60 public Boolean holdBooking(@RequestBody BookingRequest bookingRequest) { 61 log.info(\u0026#34;Holding booking tickets! {}\u0026#34;, bookingRequest); 62 return bookingHoldCall(bookingRequest, true); 63 } 64 65 @PostMapping(value = \u0026#34;/api/cancel\u0026#34;) 66 public Boolean cancelBooking(@RequestBody BookingRequest bookingRequest) { 67 log.info(\u0026#34;Cancelling booking tickets! {}\u0026#34;, bookingRequest); 68 return bookingHoldCall(bookingRequest, false); 69 } 70 71 @GetMapping(value = \u0026#34;/api/admit/{entryToken}\u0026#34;) 72 public String admit(@PathVariable String entryToken) { 73 Ticket ticket = ticketRepo.findByEntryTokenIs(entryToken); 74 if (ticketRepo.findByEntryTokenIs(entryToken) != null) { 75 ticket.setEntered(true); 76 ticketRepo.save(ticket); 77 return \u0026#34;ADMIT\u0026#34;; 78 } else { 79 return \u0026#34;INVALID\u0026#34;; 80 } 81 } 82 83 @GetMapping(value = \u0026#34;/api/qrcode/{entryToken}\u0026#34;, produces = MediaType.IMAGE_JPEG_VALUE) 84 public @ResponseBody byte[] getQRCode(@PathVariable String entryToken) { 85 Ticket ticket = ticketRepo.findByEntryTokenIs(entryToken); 86 if (ticketRepo.findByEntryTokenIs(entryToken) != null) { 87 return ticket.getQrCode(); 88 } else { 89 return null; 90 } 91 } 92 93 @Transactional 94 public Boolean confirmBooking(BookingRequest bookingRequest) { 95 try { 96 Iterable\u0026lt;Ticket\u0026gt; ticketSet = ticketRepo.findAllById(bookingRequest.getTicketIds()); 97 Set\u0026lt;Ticket\u0026gt; tickets = new HashSet\u0026lt;\u0026gt;(); 98 for (Ticket ticket : ticketSet) { 99 tickets.add(ticket); 100 //Only person who held the lock can complete the booking. 101 if (ticket.getLockedBy().equals(bookingRequest.getUser())) { 102 ticket.setLockedBy(\u0026#34;\u0026#34;); 103 ticket.setBooked(true); 104 ticket.setBookedBy(bookingRequest.getUser()); 105 106 //Create the QR code for the ticket and store to DB. 107 String entryToken = UUID.randomUUID().toString(); 108 ticket.setEntryToken(entryToken); 109 String hostName = InetAddress.getLocalHost().getHostAddress(); 110 String entryUri = \u0026#34;http://\u0026#34; + hostName + \u0026#34;:8080/api/admit/\u0026#34; + entryToken; 111 QRCodeWriter qrCodeWriter = new QRCodeWriter(); 112 BitMatrix bitMatrix = qrCodeWriter.encode(entryUri, BarcodeFormat.QR_CODE, 200, 200); 113 try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) { 114 MatrixToImageWriter.writeToStream(bitMatrix, \u0026#34;PNG\u0026#34;, baos); 115 byte[] png = baos.toByteArray(); 116 ticket.setQrCode(png); 117 } 118 119 } else { 120 log.info(\u0026#34;Ticket: {} lock is held by other user!\u0026#34;, ticket); 121 return false; 122 } 123 } 124 ticketRepo.saveAll(tickets); 125 return true; 126 } catch (ObjectOptimisticLockingFailureException ex) { 127 log.error(\u0026#34;Booking confirmation failed due to lock, {}\u0026#34;, ex.getMessage()); 128 return false; 129 } catch (WriterException | IOException ex) { 130 log.error(\u0026#34;Failed to generate QR code, {}\u0026#34;, ex.getMessage()); 131 return false; 132 } catch (Exception ex) { 133 log.error(\u0026#34;Booking confirmation failed, {}\u0026#34;, ex.getMessage()); 134 return false; 135 } 136 137 } 138 139 @Transactional 140 public Boolean bookingHoldCall(BookingRequest bookingRequest, Boolean start) { 141 try { 142 Iterable\u0026lt;Ticket\u0026gt; ticketSet = ticketRepo.findAllById(bookingRequest.getTicketIds()); 143 Set\u0026lt;Ticket\u0026gt; tickets = new HashSet\u0026lt;\u0026gt;(); 144 for (Ticket ticket : ticketSet) { 145 tickets.add(ticket); 146 //Reserve the ticket till the time payment is done. 147 if (start) { 148 if (ticket.getBooked()) { 149 log.info(\u0026#34;Ticket: {} is already booked!\u0026#34;, ticket); 150 return false; 151 } 152 //Only if ticket is free it can be booked. 153 if (ticket.getLockedBy().equals(\u0026#34;\u0026#34;)) { 154 ticket.setLockedBy(bookingRequest.getUser()); 155 //TTL to release lock after 30 seconds. 156 ticket.setLockExpiry(LocalDateTime.now().plusSeconds(EXPIRY_TTL_SECS)); 157 log.info(\u0026#34;Ticket: {} is reserved!\u0026#34;, ticket); 158 } else { 159 log.info(\u0026#34;Ticket: {} is already locked by other user!\u0026#34;, ticket); 160 return false; 161 } 162 } else { 163 //Only person who held the lock can release it. 164 if (ticket.getLockedBy().equals(bookingRequest.getUser())) { 165 ticket.setLockedBy(\u0026#34;\u0026#34;); 166 log.info(\u0026#34;Ticket: {} is released!\u0026#34;, ticket); 167 } else { 168 log.info(\u0026#34;Ticket: {} is already locked by other user!\u0026#34;, ticket); 169 return false; 170 } 171 } 172 } 173 ticketRepo.saveAll(tickets); 174 return true; 175 } catch (ObjectOptimisticLockingFailureException ex) { 176 log.error(\u0026#34;Error reserving flow: {}\u0026#34;, ex.getMessage()); 177 return false; 178 } 179 180 } 181 182 //Runs every 1 min. 183 @Scheduled(fixedRate = 60000) 184 public void scheduleFixedRateTask() { 185 log.info(\u0026#34;Running lock cleanup job!\u0026#34;); 186 Iterable\u0026lt;Ticket\u0026gt; ticketSet = ticketRepo.findAllByLockExpiryIsNotNull(); 187 Set\u0026lt;Ticket\u0026gt; tickets = new HashSet\u0026lt;\u0026gt;(); 188 ticketSet.forEach(t -\u0026gt; { 189 if (t.getLockExpiry().isBefore(LocalDateTime.now())) { 190 t.setLockedBy(\u0026#34;\u0026#34;); 191 t.setLockExpiry(null); 192 ticketRepo.save(t); 193 log.info(\u0026#34;Ticket: {} lock released!\u0026#34;, t); 194 } 195 }); 196 log.info(\u0026#34;Lock cleanup job completed!\u0026#34;); 197 } 198 199} 1import {Injectable} from \u0026#39;@angular/core\u0026#39;; 2import {HttpClient} from \u0026#39;@angular/common/http\u0026#39;; 3import {Observable} from \u0026#39;rxjs\u0026#39;; 4import {Ticket} from \u0026#39;../models/ticket\u0026#39;; 5import {BookingRequest} from \u0026#39;../models/booking-request\u0026#39;; 6 7@Injectable({ 8 providedIn: \u0026#39;root\u0026#39; 9}) 10export class RestService { 11 12 constructor(private http: HttpClient) { 13 } 14 15 public getTickets(): Observable\u0026lt;Ticket[]\u0026gt; { 16 return this.http.get\u0026lt;Ticket[]\u0026gt;(\u0026#39;/api/tickets\u0026#39;); 17 } 18 19 public bookTicket(bookingRequest: BookingRequest): Observable\u0026lt;any\u0026gt; { 20 return this.http.post(\u0026#39;/api/ticket\u0026#39;, bookingRequest); 21 } 22 23 public holdBooking(bookingRequest: BookingRequest): Observable\u0026lt;any\u0026gt; { 24 return this.http.post(\u0026#39;/api/hold\u0026#39;, bookingRequest); 25 } 26 27 public cancelBooking(bookingRequest: BookingRequest): Observable\u0026lt;any\u0026gt; { 28 return this.http.post(\u0026#39;/api/cancel\u0026#39;, bookingRequest); 29 } 30 31 public getUser(): Observable\u0026lt;string\u0026gt; { 32 return this.http.get\u0026lt;string\u0026gt;(\u0026#39;/api/user\u0026#39;, {responseType: \u0026#39;text\u0026#39; as \u0026#39;json\u0026#39;}); 33 } 34 35} 1\u0026lt;div class=\u0026#34;content-container\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;content-area\u0026#34;\u0026gt; 3 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 4 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 5 \u0026lt;div class=\u0026#34;alert-section\u0026#34;\u0026gt; 6 \u0026lt;app-alert\u0026gt;\u0026lt;/app-alert\u0026gt; 7 \u0026lt;/div\u0026gt; 8 \u0026lt;h2 style=\u0026#34;text-align: center\u0026#34;\u0026gt;Tickets\u0026lt;/h2\u0026gt; 9 \u0026lt;clr-datagrid [(clrDgSelected)]=\u0026#34;selected\u0026#34;\u0026gt; 10 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;seatNumber\u0026#39;\u0026#34;\u0026gt;Seat Number\u0026lt;/clr-dg-column\u0026gt; 11 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;eventDate\u0026#39;\u0026#34;\u0026gt;Date\u0026lt;/clr-dg-column\u0026gt; 12 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;price\u0026#39;\u0026#34;\u0026gt;Price\u0026lt;/clr-dg-column\u0026gt; 13 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;booked\u0026#39;\u0026#34;\u0026gt;Status\u0026lt;/clr-dg-column\u0026gt; 14 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;bookedBy\u0026#39;\u0026#34;\u0026gt;Booked By\u0026lt;/clr-dg-column\u0026gt; 15 \u0026lt;clr-dg-column\u0026gt;QR Code\u0026lt;/clr-dg-column\u0026gt; 16 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;entered\u0026#39;\u0026#34;\u0026gt;Entered\u0026lt;/clr-dg-column\u0026gt; 17 \u0026lt;!-- structural directive --\u0026gt; 18 \u0026lt;clr-dg-row clr-dg-row *clrDgItems=\u0026#34;let ticket of tickets\u0026#34; [clrDgItem]=\u0026#34;ticket\u0026#34; 19 [clrDgSelectable]=\u0026#34;getSeatStatus(ticket) === \u0026#39;AVAILABLE\u0026#39;\u0026#34;\u0026gt; 20 \u0026lt;clr-dg-placeholder class=\u0026#34;content-center\u0026#34;\u0026gt;No Tickets!\u0026lt;/clr-dg-placeholder\u0026gt; 21 \u0026lt;clr-dg-cell\u0026gt;{{ticket.seatNumber}}\u0026lt;/clr-dg-cell\u0026gt; 22 \u0026lt;clr-dg-cell\u0026gt;{{ticket.eventDate}}\u0026lt;/clr-dg-cell\u0026gt; 23 \u0026lt;clr-dg-cell\u0026gt;{{ticket.price}}\u0026lt;/clr-dg-cell\u0026gt; 24 \u0026lt;clr-dg-cell\u0026gt;{{getSeatStatus(ticket)}}\u0026lt;/clr-dg-cell\u0026gt; 25 \u0026lt;clr-dg-cell\u0026gt;{{ticket.bookedBy}}\u0026lt;/clr-dg-cell\u0026gt; 26 \u0026lt;clr-dg-cell \u0026gt; 27 \u0026lt;a *ngIf=\u0026#34;getSeatStatus(ticket) === \u0026#39;BOOKED\u0026#39;\u0026#34; href=\u0026#34;/api/qrcode/{{ticket.entryToken}}\u0026#34; 28 target=\u0026#34;_blank\u0026#34;\u0026gt;Ticket\u0026lt;/a\u0026gt; 29 \u0026lt;/clr-dg-cell\u0026gt; 30 \u0026lt;clr-dg-cell\u0026gt; 31 \u0026lt;cds-icon *ngIf=\u0026#34;ticket.entered\u0026#34; shape=\u0026#34;success-standard\u0026#34; status=\u0026#34;success\u0026#34; title=\u0026#34;Admitted\u0026#34; 32 class=\u0026#34;action-icon\u0026#34; solid\u0026gt;\u0026lt;/cds-icon\u0026gt; 33 \u0026lt;/clr-dg-cell\u0026gt; 34 \u0026lt;/clr-dg-row\u0026gt; 35 36 \u0026lt;clr-dg-footer\u0026gt; 37 \u0026lt;clr-dg-pagination #pagination [clrDgPageSize]=\u0026#34;10\u0026#34;\u0026gt; 38 \u0026lt;clr-dg-page-size [clrPageSizeOptions]=\u0026#34;[10,20,50,100]\u0026#34;\u0026gt;Tickets per page\u0026lt;/clr-dg-page-size\u0026gt; 39 {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} tickets 40 \u0026lt;/clr-dg-pagination\u0026gt; 41 \u0026lt;/clr-dg-footer\u0026gt; 42 \u0026lt;/clr-datagrid\u0026gt; 43 \u0026lt;br/\u0026gt; 44 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary btn-block\u0026#34; (click)=\u0026#34;holdBooking()\u0026#34; 45 *ngIf=\u0026#34;selected.length \u0026gt; 0\u0026#34;\u0026gt;Book 46 Ticket 47 \u0026lt;/button\u0026gt; 48 \u0026lt;/div\u0026gt; 49 \u0026lt;/div\u0026gt; 50 \u0026lt;/div\u0026gt; 51\u0026lt;/div\u0026gt; 52 53\u0026lt;!--Pay Modal--\u0026gt; 54\u0026lt;clr-modal [(clrModalOpen)]=\u0026#34;payModal\u0026#34; [clrModalClosable]=\u0026#34;false\u0026#34;\u0026gt; 55 \u0026lt;h3 class=\u0026#34;modal-title\u0026#34;\u0026gt;Pay \u0026amp; Confirm\u0026lt;/h3\u0026gt; 56 \u0026lt;div class=\u0026#34;modal-body\u0026#34;\u0026gt; 57 \u0026lt;p\u0026gt;You have 30 Secs to complete the payment!\u0026lt;/p\u0026gt; 58 \u0026lt;p *ngFor=\u0026#34;let item of selected;index as i\u0026#34;\u0026gt;{{i + 1}}. {{item.seatNumber}}\u0026lt;/p\u0026gt; 59 \u0026lt;p\u0026gt;Total Amount: {{getTotal()}} Rs.\u0026lt;/p\u0026gt; 60 \u0026lt;/div\u0026gt; 61 \u0026lt;div class=\u0026#34;modal-footer\u0026#34;\u0026gt; 62 \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-outline\u0026#34; (click)=\u0026#34;cancelBooking()\u0026#34;\u0026gt;Cancel\u0026lt;/button\u0026gt; 63 \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; (click)=\u0026#34;confirmBooking()\u0026#34;\u0026gt;Confirm\u0026lt;/button\u0026gt; 64 \u0026lt;/div\u0026gt; 65\u0026lt;/clr-modal\u0026gt; 1import {Component, OnInit, ViewChild} from \u0026#39;@angular/core\u0026#39;; 2import {Ticket} from \u0026#39;../../models/ticket\u0026#39;; 3import {RestService} from \u0026#39;../../services/rest.service\u0026#39;; 4import {Router} from \u0026#39;@angular/router\u0026#39;; 5import {ClarityIcons, trashIcon} from \u0026#39;@cds/core/icon\u0026#39;; 6import {AlertComponent} from \u0026#39;../alert/alert.component\u0026#39;; 7import {BookingRequest} from \u0026#39;../../models/booking-request\u0026#39;; 8 9@Component({ 10 selector: \u0026#39;app-home\u0026#39;, 11 templateUrl: \u0026#39;./home.component.html\u0026#39;, 12 styleUrls: [] 13}) 14export class HomeComponent implements OnInit { 15 16 tickets: Ticket[] = []; 17 ticket: Ticket = new Ticket(); 18 selected: Ticket[] = []; 19 // @ts-ignore 20 @ViewChild(AlertComponent, {static: true}) private alert: AlertComponent; 21 payModal = false; 22 23 constructor(private restService: RestService, private router: Router) { 24 ClarityIcons.addIcons(trashIcon); 25 } 26 27 ngOnInit(): void { 28 this.getTickets(); 29 } 30 31 getTickets(): void { 32 this.ticket = new Ticket(); 33 this.restService.getTickets().subscribe(data =\u0026gt; { 34 this.tickets = data; 35 }); 36 } 37 38 holdBooking(): void { 39 const request = new BookingRequest(); 40 request.ticketIds = []; 41 request.user = sessionStorage.getItem(\u0026#39;user\u0026#39;); 42 this.selected.forEach(item =\u0026gt; { 43 request.ticketIds.push(Number(item.id)); 44 }); 45 this.restService.holdBooking(request) 46 .subscribe(data =\u0026gt; { 47 if (data) { 48 this.payModal = true; 49 } else { 50 this.alert.showError(\u0026#39;Ticket is already reserved, Try again!\u0026#39;); 51 this.getTickets(); 52 } 53 }, 54 error =\u0026gt; { 55 this.alert.showError(\u0026#39;Ticket is already reserved, Try again!\u0026#39;); 56 this.getTickets(); 57 }); 58 59 } 60 61 cancelBooking(): void { 62 const request = new BookingRequest(); 63 request.ticketIds = []; 64 request.user = sessionStorage.getItem(\u0026#39;user\u0026#39;); 65 this.selected.forEach(item =\u0026gt; { 66 request.ticketIds.push(Number(item.id)); 67 }); 68 this.restService.cancelBooking(request) 69 .subscribe(data =\u0026gt; { 70 this.payModal = false; 71 }); 72 } 73 74 confirmBooking(): void { 75 const request = new BookingRequest(); 76 request.ticketIds = []; 77 request.user = sessionStorage.getItem(\u0026#39;user\u0026#39;); 78 this.selected.forEach(item =\u0026gt; { 79 request.ticketIds.push(Number(item.id)); 80 }); 81 this.restService.bookTicket(request) 82 .subscribe(data =\u0026gt; { 83 if (data) { 84 this.alert.showSuccess(\u0026#39;Ticket booked successfully!\u0026#39;); 85 } else { 86 this.alert.showError(\u0026#39;Ticket booking failed!\u0026#39;); 87 } 88 this.payModal = false; 89 this.getTickets(); 90 }); 91 } 92 93 getTotal(): number { 94 let sum = 0; 95 this.selected.forEach(item =\u0026gt; { 96 // @ts-ignore 97 sum += item.price; 98 }); 99 return sum; 100 } 101 102 getSeatStatus(ticket: Ticket): string { 103 // @ts-ignore 104 if (ticket.lockedBy !== \u0026#39;\u0026#39;) { 105 return \u0026#39;RESERVED\u0026#39;; 106 } 107 if (ticket.booked) { 108 return \u0026#39;BOOKED\u0026#39;; 109 } else { 110 return \u0026#39;AVAILABLE\u0026#39;; 111 } 112 } 113 114} Setup Project 87 Ticket Booking Application with QR code tickets.\nhttps://gitorko.github.io/ticket-booking-system/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the backend in dev mode.\n1./gradlew clean build 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:4200/\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd build/libs 3java -jar project87-1.0.0.jar Open http://localhost:8080/\nDocker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project87:1.0.0 . 3docker images |grep project87 4docker tag project87:1.0.0 gitorko/project87:1.0.0 5docker push gitorko/project87:1.0.0 6docker-compose -f docker/docker-compose.yml up References https://clarity.design/\nhttps://spring.io/projects/spring-boot\n","link":"https://gitorko.github.io/post/ticket-booking-system/","section":"post","tags":["optimistic-locking","jpa"],"title":"Ticket Booking System"},{"body":"","link":"https://gitorko.github.io/tags/completable-future/","section":"tags","tags":null,"title":"completable-future"},{"body":"","link":"https://gitorko.github.io/categories/completablefuture/","section":"categories","tags":null,"title":"CompletableFuture"},{"body":"Async Programming using CompletableFuture\nGithub: https://github.com/gitorko/project83\nBasics Methods demonstrating how to use CompletableFuture\n1package com.demo.project83; 2 3import java.util.ArrayList; 4import java.util.Date; 5import java.util.List; 6import java.util.Objects; 7import java.util.concurrent.CompletableFuture; 8import java.util.concurrent.ExecutorService; 9import java.util.concurrent.Executors; 10import java.util.concurrent.Future; 11import java.util.concurrent.TimeUnit; 12import java.util.concurrent.TimeoutException; 13import java.util.concurrent.atomic.AtomicInteger; 14import java.util.stream.Collectors; 15 16import lombok.SneakyThrows; 17import lombok.extern.slf4j.Slf4j; 18import org.junit.jupiter.api.Assertions; 19import org.junit.jupiter.api.Test; 20 21@Slf4j 22public class CompletableFutureTest { 23 24 static AtomicInteger counter = new AtomicInteger(); 25 26 /** 27 * get() is blocking call. So main thread has to wait. 28 * Old way with Future. Dont use it. 29 */ 30 @Test 31 @SneakyThrows 32 void blockingChain_test() { 33 counter = new AtomicInteger(); 34 List\u0026lt;Future\u0026lt;String\u0026gt;\u0026gt; futureLst = new ArrayList\u0026lt;\u0026gt;(); 35 ExecutorService executor = Executors.newCachedThreadPool(); 36 for (int i = 0; i \u0026lt; 5; i++) { 37 int finalI = i; 38 Future\u0026lt;String\u0026gt; future = executor.submit(() -\u0026gt; greetHello(\u0026#34;Jack_\u0026#34; + finalI)); 39 futureLst.add(future); 40 } 41 for (Future\u0026lt;String\u0026gt; future : futureLst) { 42 //get is blocking the main thread here. 43 String message = future.get(); 44 finishedGreetHello(message); 45 } 46 executor.shutdown(); 47 Assertions.assertEquals(5, counter.get()); 48 } 49 50 /** 51 * Callback attached so non blocking. 52 * 53 * Ability to provide call back functionality. 54 * You can manually set the return response on a CompletableFuture which you cant do on Future. You can cancel it as well. 55 * You can chain \u0026amp; combine CompletableFutures which is not possible with Future. 56 * Exception handling support in CompletableFutures which is not available in Future. 57 * 58 * Although chaining can be done manually but not advised to use this approach. 59 * This example is for reference only. 60 */ 61 @Test 62 @SneakyThrows 63 void nonBlockingChain_test() { 64 counter = new AtomicInteger(); 65 ExecutorService executor = Executors.newCachedThreadPool(); 66 for (int i = 0; i \u0026lt; 5; i++) { 67 int finalI = i; 68 executor.submit(() -\u0026gt; { 69 CompletableFutureTest.greetHelloChain(\u0026#34;Jack_\u0026#34; + finalI, new CompletableFuture\u0026lt;\u0026gt;()); 70 }); 71 } 72 //Give enough time for all threads to complete and return back with results. 73 TimeUnit.SECONDS.sleep(10); 74 executor.shutdown(); 75 Assertions.assertEquals(5, counter.get()); 76 } 77 78 /** 79 * When function does not return anything then use CompletableFuture.runAsync() 80 * returns CompletableFuture\u0026lt;Void\u0026gt; 81 */ 82 @Test 83 @SneakyThrows 84 void runAsync_test() { 85 counter = new AtomicInteger(); 86 for (int i = 0; i \u0026lt; 5; i++) { 87 int finalI = i; 88 CompletableFuture.runAsync(() -\u0026gt; { 89 greetHello(\u0026#34;Jack_\u0026#34; + finalI); 90 }).thenRun(() -\u0026gt; { 91 counter.incrementAndGet(); 92 log.info(\u0026#34;Completed!\u0026#34;); 93 }); 94 } 95 //Give enough time for all threads to complete and return back with results. 96 TimeUnit.SECONDS.sleep(5); 97 Assertions.assertEquals(5, counter.get()); 98 } 99 100 /** 101 * Returns CompletableFuture\u0026lt;T\u0026gt; 102 */ 103 @Test 104 @SneakyThrows 105 void supplyAsync_test() { 106 counter = new AtomicInteger(); 107 for (int i = 0; i \u0026lt; 5; i++) { 108 int finalI = i; 109 CompletableFuture.supplyAsync(() -\u0026gt; { 110 return greetHello(\u0026#34;Jack_\u0026#34; + finalI); 111 }).thenAccept(message -\u0026gt; { 112 counter.incrementAndGet(); 113 log.info(\u0026#34;Greeting: {}\u0026#34;, message); 114 }); 115 } 116 //Give enough time for all threads to complete and return back with results. 117 TimeUnit.SECONDS.sleep(5); 118 Assertions.assertEquals(5, counter.get()); 119 } 120 121 /** 122 * thenApply will return a nested CompletionStage. 123 * thenApply returns CompletionStage \u0026amp; return value of the function. 124 */ 125 @Test 126 @SneakyThrows 127 void thenApply_test() { 128 CompletableFuture\u0026lt;String\u0026gt; completableFuture = CompletableFuture.supplyAsync(() -\u0026gt; { 129 //Do some computation \u0026amp; return the result 130 return \u0026#34;hello \u0026#34;; 131 }).thenApply(message -\u0026gt; { 132 return message + \u0026#34;world\u0026#34;; 133 }).thenApply(message -\u0026gt; { 134 return message.toUpperCase(); 135 }); 136 // Returns type CompletionStage\u0026lt;CompletionStage\u0026lt;CompletionStage\u0026lt;String\u0026gt;\u0026gt;\u0026gt;. 137 Assertions.assertEquals(\u0026#34;HELLO WORLD\u0026#34;, completableFuture.get()); 138 } 139 140 /** 141 * thenAccept will return a single CompletionStage, flattening effect like a flatMap 142 * thenAccept takes a Consumer and returns a Void \u0026amp; only the completion state. 143 */ 144 @Test 145 @SneakyThrows 146 void thenAccept_test() { 147 counter = new AtomicInteger(); 148 CompletableFuture\u0026lt;Void\u0026gt; completableFuture = CompletableFuture.supplyAsync(() -\u0026gt; { 149 //Do some computation \u0026amp; return the result 150 return \u0026#34;hello world\u0026#34;; 151 }).thenAccept(message -\u0026gt; { 152 log.info(\u0026#34;Got Message: {}\u0026#34;, message); 153 }).thenRun(() -\u0026gt; { 154 counter.incrementAndGet(); 155 log.info(\u0026#34;Cant access previous result, just running!\u0026#34;); 156 }); 157 completableFuture.get(); 158 Assertions.assertEquals(1, counter.get()); 159 } 160 161 /** 162 * thenCompose() combines two futures where one future is dependent on the other 163 * thenCompose will return a single CompletionStage, flattening effect like a flatMap 164 */ 165 @Test 166 @SneakyThrows 167 void thenCompose_test() { 168 //Notice the flattened return type. Combines 2 dependent future. 169 CompletableFuture\u0026lt;String\u0026gt; completableFuture = getGreeting(\u0026#34;Jack\u0026#34;) 170 .thenCompose(message -\u0026gt; CompletableFutureTest.transformMessage(message)); 171 Assertions.assertEquals(\u0026#34;HELLO JACK\u0026#34;, completableFuture.get()); 172 } 173 174 /** 175 * thenCombine() combines two independent futures. 176 */ 177 @Test 178 @SneakyThrows 179 void thenCombine_test() { 180 //Combines the 2 independent futures. 181 CompletableFuture\u0026lt;String\u0026gt; completableFuture = getGreeting(\u0026#34;Jack\u0026#34;) 182 .thenCombine(CompletableFutureTest.getCurrentDate(), (message, currentDate) -\u0026gt; { 183 return CompletableFutureTest.addDateToMessage(message, currentDate); 184 }); 185 Assertions.assertTrue(completableFuture.get().contains(\u0026#34;Hello Jack was sent on\u0026#34;)); 186 } 187 188 @Test 189 @SneakyThrows 190 void exceptionally_test() { 191 CompletableFuture\u0026lt;String\u0026gt; completableFuture = CompletableFuture.supplyAsync(() -\u0026gt; { 192 //Do some computation \u0026amp; return the result 193 return \u0026#34;Stage 0\u0026#34;; 194 }).thenApply(result -\u0026gt; { 195 return result + \u0026#34; -\u0026gt; Stage 1\u0026#34;; 196 }).exceptionally(ex -\u0026gt; { 197 return \u0026#34;Error in stage 1 : \u0026#34; + ex.getMessage(); 198 }).thenApply(result -\u0026gt; { 199 if (true) { 200 throw new RuntimeException(\u0026#34;My custom error!\u0026#34;); 201 } 202 return result + \u0026#34; -\u0026gt; Stage 2\u0026#34;; 203 }).exceptionally(ex -\u0026gt; { 204 return \u0026#34;Error in stage 2 : \u0026#34; + ex.getMessage(); 205 }); 206 Assertions.assertTrue(completableFuture.get().contains(\u0026#34;Error in stage 2\u0026#34;)); 207 } 208 209 @Test 210 @SneakyThrows 211 void allOf_test() { 212 counter = new AtomicInteger(); 213 List\u0026lt;CompletableFuture\u0026lt;Void\u0026gt;\u0026gt; tasks = getListOfTasks(); 214 CompletableFuture\u0026lt;Void\u0026gt; allTasks = CompletableFuture.allOf(tasks.get(0), tasks.get(1), tasks.get(2)); 215 allTasks.get(); 216 log.info(\u0026#34;Waited for all tasks to complete and then returned!\u0026#34;); 217 Assertions.assertEquals(3, counter.get()); 218 } 219 220 @Test 221 @SneakyThrows 222 void anyOf_test() { 223 counter = new AtomicInteger(); 224 List\u0026lt;CompletableFuture\u0026lt;Void\u0026gt;\u0026gt; tasks = getListOfTasks(); 225 CompletableFuture\u0026lt;Object\u0026gt; allTasks = CompletableFuture.anyOf(tasks.get(0), tasks.get(1), tasks.get(2)); 226 allTasks.get(); 227 log.info(\u0026#34;Waited for any one task to complete and then returned!\u0026#34;); 228 Assertions.assertTrue(counter.get() \u0026gt;= 1); 229 } 230 231 @Test 232 @SneakyThrows 233 void allOf_withTimeLimit_test() { 234 counter = new AtomicInteger(); 235 List\u0026lt;CompletableFuture\u0026lt;Void\u0026gt;\u0026gt; tasks = getListOfTasks(); 236 CompletableFuture\u0026lt;Void\u0026gt; allTasks = CompletableFuture.allOf(tasks.get(0), tasks.get(1), tasks.get(2)); 237 try { 238 allTasks.get(4, TimeUnit.SECONDS); 239 } catch (TimeoutException ex) { 240 log.error(\u0026#34;timeout!\u0026#34;, ex); 241 } 242 log.info(\u0026#34;Waited for 4 seconds and returned!\u0026#34;); 243 Assertions.assertTrue(counter.get() \u0026gt;= 2); 244 } 245 246 @Test 247 @SneakyThrows 248 void allOf_iterate() { 249 List\u0026lt;String\u0026gt; names = List.of(\u0026#34;Jack\u0026#34;, \u0026#34;Adam\u0026#34;, \u0026#34;Ram\u0026#34;, \u0026#34;Ajay\u0026#34;); 250 List\u0026lt;CompletableFuture\u0026lt;String\u0026gt;\u0026gt; customersFuture = names.stream() 251 .map(userName -\u0026gt; checkName(userName)) 252 .collect(Collectors.toList()); 253 254 CompletableFuture\u0026lt;Void\u0026gt; allFutures = CompletableFuture.allOf(customersFuture.toArray(new CompletableFuture[customersFuture.size()])); 255 256 CompletableFuture\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; allCustomersFuture = allFutures.thenApply(v -\u0026gt; customersFuture.stream() 257 .map(pageContentFuture -\u0026gt; pageContentFuture.join()) 258 .filter(Objects::isNull) 259 .collect(Collectors.toList())); 260 261 List\u0026lt;String\u0026gt; customers = allCustomersFuture.get(); 262 Assertions.assertEquals(2, customers.size()); 263 } 264 265 private static CompletableFuture\u0026lt;String\u0026gt; checkName(String userName) { 266 return CompletableFuture.supplyAsync(() -\u0026gt; { 267 if (userName.startsWith(\u0026#34;A\u0026#34;)) return userName; 268 return null; 269 }); 270 } 271 272 private static String greetHello(String name) { 273 log.info(\u0026#34;Got name: {}\u0026#34;, name); 274 return \u0026#34;Hello \u0026#34; + name; 275 } 276 277 private static void finishedGreetHello(String result) { 278 counter.incrementAndGet(); 279 log.info(\u0026#34;Finished greet chain: {}\u0026#34;, result); 280 } 281 282 private static void greetHelloChain(String name, CompletableFuture\u0026lt;String\u0026gt; completableFuture) { 283 log.info(\u0026#34;Got name: {}\u0026#34;, name); 284 completableFuture.complete(\u0026#34;Hello \u0026#34; + name); 285 completableFuture.whenComplete(CompletableFutureTest::finishedGreetHelloChain); 286 } 287 288 private static void finishedGreetHelloChain(String result, Throwable t) { 289 counter.incrementAndGet(); 290 log.info(\u0026#34;Finished greet chain: {}\u0026#34;, result); 291 } 292 293 private static CompletableFuture\u0026lt;String\u0026gt; getGreeting(String userName) { 294 return CompletableFuture.supplyAsync(() -\u0026gt; { 295 return \u0026#34;Hello \u0026#34; + userName; 296 }); 297 } 298 299 private static CompletableFuture\u0026lt;Date\u0026gt; getCurrentDate() { 300 return CompletableFuture.supplyAsync(() -\u0026gt; { 301 return new Date(); 302 }); 303 } 304 305 private static CompletableFuture\u0026lt;String\u0026gt; transformMessage(String message) { 306 return CompletableFuture.supplyAsync(() -\u0026gt; { 307 return message.toUpperCase(); 308 }); 309 } 310 311 private static String addDateToMessage(String message, Date currentDate) { 312 return message + \u0026#34; was sent on \u0026#34; + currentDate; 313 } 314 315 //Each task is delayed by few seconds 316 private static List\u0026lt;CompletableFuture\u0026lt;Void\u0026gt;\u0026gt; getListOfTasks() { 317 List\u0026lt;CompletableFuture\u0026lt;Void\u0026gt;\u0026gt; tasks = new ArrayList\u0026lt;\u0026gt;(); 318 tasks.add(CompletableFuture.supplyAsync(() -\u0026gt; { 319 return greetHello(\u0026#34;Jack\u0026#34;); 320 }).thenAccept(message -\u0026gt; { 321 counter.incrementAndGet(); 322 try { 323 TimeUnit.SECONDS.sleep(1); 324 } catch (InterruptedException e) { 325 } 326 log.info(\u0026#34;Greeting: {}\u0026#34;, message); 327 })); 328 tasks.add(CompletableFuture.supplyAsync(() -\u0026gt; { 329 return greetHello(\u0026#34;Raj\u0026#34;); 330 }).thenAccept(message -\u0026gt; { 331 counter.incrementAndGet(); 332 try { 333 TimeUnit.SECONDS.sleep(3); 334 } catch (InterruptedException e) { 335 } 336 log.info(\u0026#34;Greeting: {}\u0026#34;, message); 337 })); 338 tasks.add(CompletableFuture.supplyAsync(() -\u0026gt; { 339 return greetHello(\u0026#34;Dan\u0026#34;); 340 }).thenAccept(message -\u0026gt; { 341 counter.incrementAndGet(); 342 try { 343 TimeUnit.SECONDS.sleep(5); 344 } catch (InterruptedException e) { 345 } 346 log.info(\u0026#34;Greeting: {}\u0026#34;, message); 347 })); 348 return tasks; 349 } 350 351} References https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/CompletableFuture.html\n","link":"https://gitorko.github.io/post/completable-future-basics/","section":"post","tags":["completable-future","future"],"title":"CompletableFuture - Basics"},{"body":"","link":"https://gitorko.github.io/tags/future/","section":"tags","tags":null,"title":"future"},{"body":"ModelMapper is an intelligent, refactoring safe object mapping library that automatically maps objects to each other. It uses a convention based approach.\nGithub: https://github.com/gitorko/project85\nModel Mapper Methods demonstrating how to use model mapper\n1package com.demo.project85; 2 3import java.util.ArrayList; 4import java.util.List; 5 6import lombok.AllArgsConstructor; 7import lombok.Builder; 8import lombok.Data; 9import lombok.NoArgsConstructor; 10import lombok.extern.slf4j.Slf4j; 11import org.junit.jupiter.api.Assertions; 12import org.junit.jupiter.api.Test; 13import org.modelmapper.Converter; 14import org.modelmapper.ModelMapper; 15import org.modelmapper.PropertyMap; 16 17@Slf4j 18public class ModelMapperTest { 19 20 @Test 21 public void test_directCall() { 22 Person person = getPerson(); 23 ModelMapper modelMapper = new ModelMapper(); 24 modelMapper.addMappings(personMap); 25 PersonView personView = modelMapper.map(person, PersonView.class); 26 log.info(\u0026#34;personView: {}\u0026#34;, personView); 27 Assertions.assertEquals(personView.getFirstName(), person.getFirstName()); 28 Assertions.assertEquals(personView.getLastName(), person.getFamilyName().toUpperCase()); 29 } 30 31 @Test 32 public void test_directCallJava8() { 33 Person person = getPerson(); 34 ModelMapper modelMapper = new ModelMapper(); 35 PersonView personView = modelMapper 36 .typeMap(Person.class, PersonView.class) 37 .addMappings(mapper -\u0026gt; { 38 mapper.using(toUppercase) 39 .map(src -\u0026gt; src.getFamilyName(), PersonView::setLastName); 40 mapper.using(workStatusConvertor) 41 .map(src -\u0026gt; src.getWorkStatus(), PersonView::setWorkStatusName); 42 mapper.map(Person::getAge, PersonView::setAgeStr); 43 }) 44 .map(person); 45 log.info(\u0026#34;personView: {}\u0026#34;, personView); 46 Assertions.assertEquals(personView.getFirstName(), person.getFirstName()); 47 Assertions.assertEquals(personView.getLastName(), person.getFamilyName().toUpperCase()); 48 Assertions.assertEquals(personView.getAgeStr(), String.valueOf(person.getAge())); 49 } 50 51 @Test 52 public void test_genericHelperClass() { 53 Person person = getPerson(); 54 MapperHelper\u0026lt;Person, PersonView\u0026gt; entityMapperHelper = new MapperHelper\u0026lt;\u0026gt;(Person.class, PersonView.class); 55 entityMapperHelper.mapper.typeMap(Person.class, PersonView.class) 56 .addMappings(mapper -\u0026gt; { 57 mapper.using(toUppercase) 58 .map(src -\u0026gt; src.getFamilyName(), PersonView::setLastName); 59 mapper.using(workStatusConvertor) 60 .map(src -\u0026gt; src.getWorkStatus(), PersonView::setWorkStatusName); 61 mapper.map(Person::getAge, PersonView::setAgeStr); 62 }); 63 PersonView personView = entityMapperHelper.toModel(person); 64 log.info(\u0026#34;personView: {}\u0026#34;, personView); 65 Assertions.assertEquals(personView.getFirstName(), person.getFirstName()); 66 } 67 68 @Test 69 public void test_listConvertGenericHelperClass() { 70 List\u0026lt;Person\u0026gt; personList = getListOfPersons(); 71 MapperHelper\u0026lt;Person,PersonView\u0026gt; entityMapperHelper = new MapperHelper\u0026lt;\u0026gt;(Person.class, PersonView.class); 72 List\u0026lt;PersonView\u0026gt; personViewList = entityMapperHelper.toListModel(personList); 73 log.info(\u0026#34;personView: {}\u0026#34;, personViewList); 74 Assertions.assertEquals(personViewList.size(), personList.size()); 75 } 76 77 PropertyMap\u0026lt;Person, PersonView\u0026gt; personMap = new PropertyMap\u0026lt;\u0026gt;() { 78 protected void configure() { 79 using(toUppercase).map().setLastName(source.getFamilyName()); 80 } 81 }; 82 83 Converter\u0026lt;String, String\u0026gt; toUppercase = 84 context -\u0026gt; context.getSource() == null ? null : context.getSource().toUpperCase(); 85 86 Converter\u0026lt;WorkStatus, String\u0026gt; workStatusConvertor = 87 context -\u0026gt; context.getSource() == null ? null : context.getSource().getStatus(); 88 89 public static List\u0026lt;Person\u0026gt; getListOfPersons() { 90 List\u0026lt;Person\u0026gt; personList = new ArrayList\u0026lt;\u0026gt;(); 91 personList.add(Person.builder() 92 .firstName(\u0026#34;luke\u0026#34;) 93 .familyName(\u0026#34;skywalker\u0026#34;) 94 .age(30) 95 .workStatus(WorkStatus.EMPLOYEED) 96 .build()); 97 personList.add(Person.builder() 98 .firstName(\u0026#34;han\u0026#34;) 99 .familyName(\u0026#34;solo\u0026#34;) 100 .age(35) 101 .workStatus(WorkStatus.EMPLOYEED) 102 .build()); 103 return personList; 104 } 105 106 public static Person getPerson() { 107 return Person.builder() 108 .firstName(\u0026#34;luke\u0026#34;) 109 .familyName(\u0026#34;skywalker\u0026#34;) 110 .workStatus(WorkStatus.EMPLOYEED) 111 .age(30) 112 .build(); 113 } 114} 115 116@Data 117@Builder 118@NoArgsConstructor 119@AllArgsConstructor 120class Person { 121 String firstName; 122 String familyName; 123 WorkStatus workStatus; 124 int age; 125} 126 127enum WorkStatus { 128 EMPLOYEED(\u0026#34;Employeed\u0026#34;), 129 UN_EMPLOYEED(\u0026#34;Unemployeed\u0026#34;); 130 131 String status; 132 WorkStatus(String status) { 133 this.status = status; 134 } 135 136 public String getStatus() { 137 return status; 138 } 139} 140 141@Data 142@Builder 143@NoArgsConstructor 144@AllArgsConstructor 145class PersonView { 146 String firstName; 147 String lastName; 148 WorkStatus workStatus; 149 String workStatusName; 150 String ageStr; 151} 1package com.demo.project85; 2 3import java.util.List; 4import java.util.stream.Collectors; 5 6import org.modelmapper.ModelMapper; 7import org.springframework.data.domain.Page; 8 9public class MapperHelper\u0026lt;E, M\u0026gt; { 10 public MapperHelper(Class\u0026lt;E\u0026gt; entityType, Class\u0026lt;M\u0026gt; modelType) { 11 this.entityType = entityType; 12 this.modelType = modelType; 13 this.mapper = new ModelMapper(); 14 } 15 16 public E toEntity(M model) { 17 return mapper.map(model, entityType); 18 } 19 20 public M toModel(E entity) { 21 return mapper.map(entity, modelType); 22 } 23 24 public Page\u0026lt;M\u0026gt; toPagedModel(Page\u0026lt;E\u0026gt; entities) { 25 return entities.map(this::toModel); 26 } 27 28 public List\u0026lt;M\u0026gt; toListModel(List\u0026lt;E\u0026gt; source) { 29 return source 30 .stream() 31 .map(this::toModel) 32 .collect(Collectors.toList()); 33 } 34 35 Class\u0026lt;E\u0026gt; entityType; 36 Class\u0026lt;M\u0026gt; modelType; 37 ModelMapper mapper; 38} References http://modelmapper.org/\n","link":"https://gitorko.github.io/post/model-mapper/","section":"post","tags":["model-mapper"],"title":"Model Mapper"},{"body":"","link":"https://gitorko.github.io/tags/model-mapper/","section":"tags","tags":null,"title":"model-mapper"},{"body":"","link":"https://gitorko.github.io/categories/modelmapper/","section":"categories","tags":null,"title":"ModelMapper"},{"body":"Reactive programming examples on how to use spring reactor.\nGithub: https://github.com/gitorko/project83\nSpring Reactor Methods demonstrating how to use spring reactor\n1package com.demo.project83; 2 3import static org.assertj.core.api.Assertions.assertThat; 4 5import java.nio.file.Files; 6import java.nio.file.Path; 7import java.time.Duration; 8import java.time.LocalTime; 9import java.util.ArrayList; 10import java.util.Arrays; 11import java.util.Collection; 12import java.util.Date; 13import java.util.HashMap; 14import java.util.List; 15import java.util.Map; 16import java.util.Optional; 17import java.util.Random; 18import java.util.concurrent.Callable; 19import java.util.concurrent.CountDownLatch; 20import java.util.concurrent.TimeUnit; 21import java.util.concurrent.atomic.AtomicLong; 22import java.util.function.Consumer; 23import java.util.function.Function; 24import java.util.function.Supplier; 25import java.util.stream.Stream; 26 27import lombok.SneakyThrows; 28import lombok.extern.slf4j.Slf4j; 29import org.junit.jupiter.api.Test; 30import org.reactivestreams.Subscription; 31import reactor.core.Disposable; 32import reactor.core.Exceptions; 33import reactor.core.publisher.BaseSubscriber; 34import reactor.core.publisher.ConnectableFlux; 35import reactor.core.publisher.Flux; 36import reactor.core.publisher.FluxSink; 37import reactor.core.publisher.Mono; 38import reactor.core.publisher.ParallelFlux; 39import reactor.core.scheduler.Schedulers; 40import reactor.test.StepVerifier; 41import reactor.test.scheduler.VirtualTimeScheduler; 42import reactor.tools.agent.ReactorDebugAgent; 43import reactor.util.function.Tuple2; 44import reactor.util.function.Tuples; 45import reactor.util.retry.Retry; 46import reactor.util.retry.RetryBackoffSpec; 47 48/** 49 * Reactive Streams Specification 50 * 51 * Publisher (Mono/Flux) 52 * - subscribe (data source, db, remote service) 53 * Subscriber 54 * - onSubscribe 55 * - onNext 56 * - onError 57 * - onComplete 58 * Subscription 59 * - request 60 * - cancel 61 * Processor - Publisher + Subscriber 62 * 63 * Spring reactor is a Push + Pull data flow model 64 */ 65@Slf4j 66public class ReactorTest { 67 68 /** 69 * ******************************************************************** 70 * mono 71 * ******************************************************************** 72 */ 73 @Test 74 void monoTest() { 75 //justOrEmpty 76 Mono\u0026lt;String\u0026gt; mono1 = Mono.justOrEmpty(\u0026#34;apple\u0026#34;); 77 mono1.subscribe(System.out::println); 78 StepVerifier.create(mono1) 79 .expectNext(\u0026#34;apple\u0026#34;) 80 .verifyComplete(); 81 82 //Note: Reactive Streams do not accept null values 83 Mono\u0026lt;String\u0026gt; mono2 = Mono.justOrEmpty(null); 84 mono2.subscribe(System.out::println); 85 StepVerifier.create(mono2) 86 .verifyComplete(); 87 88 //Default value if empty. 89 Mono\u0026lt;String\u0026gt; mono3 = mono2.defaultIfEmpty(\u0026#34;Jill\u0026#34;); 90 mono3.subscribe(System.out::println); 91 StepVerifier.create(mono3) 92 .expectNext(\u0026#34;Jill\u0026#34;) 93 .verifyComplete(); 94 95 //Use log to look at transitions. 96 Mono\u0026lt;String\u0026gt; mono4 = Mono.just(\u0026#34;apple\u0026#34;).log(); 97 mono4.subscribe(s -\u0026gt; { 98 log.info(\u0026#34;Got: {}\u0026#34;, s); 99 }); 100 StepVerifier.create(mono4) 101 .expectNext(\u0026#34;apple\u0026#34;) 102 .verifyComplete(); 103 } 104 105 /** 106 * ******************************************************************** 107 * flux 108 * ******************************************************************** 109 */ 110 @Test 111 void fluxTest() { 112 Flux flux = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;); 113 flux.subscribe(System.out::println); 114 StepVerifier.create(flux) 115 .expectNext(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;) 116 .verifyComplete(); 117 } 118 119 /** 120 * ******************************************************************** 121 * flux - Avoid blocking calls that will hold thread 122 * ******************************************************************** 123 */ 124 @Test 125 void fluxSleepTest() { 126 Flux flux = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;).map(e -\u0026gt; { 127 log.info(\u0026#34;Received: {}\u0026#34;, e); 128 //Bad idea to do Thread.sleep or any blocking call. 129 //Instead use delayElements. 130 return e; 131 }).delayElements(Duration.ofSeconds(1)); 132 flux.subscribe(System.out::println); 133 StepVerifier.create(flux) 134 .expectNext(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;) 135 .verifyComplete(); 136 } 137 138 /** 139 * ******************************************************************** 140 * block 141 * ******************************************************************** 142 */ 143 @Test 144 public void badTest() { 145 //Never use .block() as it blocks the thread. 146 String name = Mono.just(\u0026#34;Jack\u0026#34;) 147 .block(); 148 System.out.println(name); 149 } 150 151 /** 152 * ******************************************************************** 153 * filter - filter out elements that dont meet condition 154 * ******************************************************************** 155 */ 156 @Test 157 void fluxFilterTest() { 158 //Get even numbers 159 Flux flux = Flux.just(1, 2, 3, 4, 5) 160 .filter(i -\u0026gt; i % 2 == 0); 161 flux.subscribe(System.out::println); 162 StepVerifier.create(flux) 163 .expectNext(2, 4) 164 .verifyComplete(); 165 } 166 167 /** 168 * ******************************************************************** 169 * flux from array, list, stream 170 * ******************************************************************** 171 */ 172 @Test 173 public void fluxArrayTest() { 174 Integer[] arr = {2, 5, 7, 8}; 175 Flux\u0026lt;Integer\u0026gt; flux1 = Flux.fromArray(arr); 176 flux1.subscribe(System.out::println); 177 StepVerifier.create(flux1) 178 .expectNext(2, 5, 7, 8) 179 .verifyComplete(); 180 181 List\u0026lt;String\u0026gt; fruitsList = Arrays.asList(\u0026#34;apple\u0026#34;, \u0026#34;oranges\u0026#34;, \u0026#34;grapes\u0026#34;); 182 Flux\u0026lt;String\u0026gt; fruits = Flux.fromIterable(fruitsList); 183 StepVerifier.create(fruits) 184 .expectNext(\u0026#34;apple\u0026#34;, \u0026#34;oranges\u0026#34;, \u0026#34;grapes\u0026#34;) 185 .verifyComplete(); 186 187 Stream\u0026lt;Integer\u0026gt; stream = List.of(1, 2, 3, 4, 5).stream(); 188 Flux\u0026lt;Integer\u0026gt; flux2 = Flux.fromStream(() -\u0026gt; stream); 189 StepVerifier.create(flux2) 190 .expectNext(1, 2, 3, 4, 5) 191 .verifyComplete(); 192 193 Flux\u0026lt;Integer\u0026gt; flux3 = Flux.fromIterable(List.of(1, 2, 3, 4, 5)); 194 StepVerifier.create(flux3) 195 .expectNext(1, 2, 3, 4, 5) 196 .verifyComplete(); 197 } 198 199 /** 200 * ******************************************************************** 201 * flux range 202 * ******************************************************************** 203 */ 204 @Test 205 public void fluxRangeTest() { 206 Flux\u0026lt;Integer\u0026gt; numbers = Flux.range(1, 5); 207 numbers.subscribe(n -\u0026gt; { 208 log.info(\u0026#34;number: {}\u0026#34;, n); 209 }); 210 StepVerifier.create(numbers) 211 .expectNext(1, 2, 3, 4, 5) 212 .verifyComplete(); 213 } 214 215 /** 216 * ******************************************************************** 217 * map - synchronous by nature 218 * ******************************************************************** 219 */ 220 @Test 221 public void fluxMapTest() { 222 Flux\u0026lt;Integer\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;) 223 .log() 224 .map(i -\u0026gt; i.length()); 225 StepVerifier 226 .create(flux1) 227 .expectNext(5, 6) 228 .verifyComplete(); 229 230 Flux\u0026lt;Integer\u0026gt; flux2 = Flux.range(3, 2) 231 .map(i -\u0026gt; i + 100); 232 flux2.subscribe(System.out::println); 233 StepVerifier.create(flux2) 234 .expectNext(103, 104) 235 .verifyComplete(); 236 } 237 238 /** 239 * ******************************************************************** 240 * flatMap - transform object 1-1 or 1-N in asyncronous fashion, returns back Mono/Flux. 241 * map - transform an object 1-1 in fixed time in synchronous fashion 242 * ******************************************************************** 243 */ 244 @Test 245 void flatMapTest() { 246 Flux flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;) 247 .flatMap(ReactorTest::capitalizeReactive); 248 flux1.subscribe(System.out::println); 249 StepVerifier.create(flux1) 250 .expectSubscription() 251 .expectNext(\u0026#34;APPLE\u0026#34;) 252 .expectNext(\u0026#34;ORANGE\u0026#34;) 253 .verifyComplete(); 254 255 //capitalize will happen in blocking fashion. If this function takes long or does I/O then it will be blocking 256 //Use map only when there is no IO involved in the function 257 Flux flux2 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;) 258 .map(ReactorTest::capitalize); 259 flux2.subscribe(System.out::println); 260 StepVerifier.create(flux2) 261 .expectSubscription() 262 .expectNext(\u0026#34;APPLE\u0026#34;) 263 .expectNext(\u0026#34;ORANGE\u0026#34;) 264 .verifyComplete(); 265 } 266 267 private static Mono\u0026lt;String\u0026gt; capitalizeReactive(String user) { 268 return Mono.just(user.toUpperCase()); 269 } 270 271 private static String capitalize(String user) { 272 return user.toUpperCase(); 273 } 274 275 /** 276 * ******************************************************************** 277 * flatMap - object modification 278 * ******************************************************************** 279 */ 280 @Test 281 void objectModificationTest() { 282 //Modification of object in chain - done via flatMap 283 //Ideally create a new object instead of modifying the existing object. 284 Mono\u0026lt;String\u0026gt; mono1 = Mono.just(\u0026#34;Apple\u0026#34;) 285 .flatMap(ReactorTest::appendGreet); 286 StepVerifier.create(mono1) 287 .expectNext(\u0026#34;Hello Apple\u0026#34;) 288 .verifyComplete(); 289 290 //Modification of object in chain - done via zipWith 291 //The 2nd argument for zipWith is a combinator function that determines how the 2 mono are zipped 292 Mono\u0026lt;String\u0026gt; mono2 = Mono.just(\u0026#34;Apple\u0026#34;) 293 .zipWith(Mono.just(\u0026#34;Hello \u0026#34;), ReactorTest::getGreet); 294 StepVerifier.create(mono2) 295 .expectNext(\u0026#34;Hello Apple\u0026#34;) 296 .verifyComplete(); 297 } 298 299 private static Mono\u0026lt;String\u0026gt; appendGreet(String name) { 300 return Mono.just(\u0026#34;Hello \u0026#34; + name); 301 } 302 303 private static String getGreet(String name, String greet) { 304 return greet + name; 305 } 306 307 /** 308 * ******************************************************************** 309 * flatMap - Find all distinct chars in the list of names, convert to uppercase 310 * ******************************************************************** 311 */ 312 @Test 313 void flatMapTest2() { 314 Flux\u0026lt;String\u0026gt; flux = Flux.fromIterable(List.of(\u0026#34;Jack\u0026#34;, \u0026#34;Joe\u0026#34;, \u0026#34;Jill\u0026#34;)) 315 .map(String::toUpperCase) 316 .flatMap(s -\u0026gt; splitString(s)) 317 .distinct(); 318 flux.subscribe(System.out::println); 319 StepVerifier.create(flux) 320 .expectNext(\u0026#34;J\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;L\u0026#34;) 321 .verifyComplete(); 322 323 } 324 325 private Flux\u0026lt;String\u0026gt; splitString(String name) { 326 return Flux.fromArray(name.split(\u0026#34;\u0026#34;)); 327 } 328 329 /** 330 * ******************************************************************** 331 * concatMap - Same as flatMap but order is preserved, concatMap takes more time but ordering is preserved. 332 * flatMap - Takes less time but ordering is lost. 333 * ******************************************************************** 334 */ 335 @Test 336 @SneakyThrows 337 void concatMapTest() { 338 Flux\u0026lt;String\u0026gt; flux = Flux.fromIterable(List.of(\u0026#34;Jack\u0026#34;, \u0026#34;Joe\u0026#34;, \u0026#34;Jill\u0026#34;)) 339 .map(String::toUpperCase) 340 .concatMap(s -\u0026gt; splitStringAsync(s)) 341 .distinct(); 342 343 StepVerifier.create(flux) 344 .expectNext(\u0026#34;J\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;K\u0026#34;, \u0026#34;O\u0026#34;, \u0026#34;E\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;L\u0026#34;) 345 .verifyComplete(); 346 } 347 348 private Flux\u0026lt;String\u0026gt; splitStringAsync(String name) { 349 return Flux.fromArray(name.split(\u0026#34;\u0026#34;)) 350 .delayElements(Duration.ofMillis(new Random().nextInt(1000))); 351 } 352 353 /** 354 * ******************************************************************** 355 * flatMapMany - similar to flatMap, but function returns flux 356 * ******************************************************************** 357 */ 358 @Test 359 void flatMapManyTest() { 360 361 Flux flux1 = Mono.just(\u0026#34;Jack\u0026#34;) 362 .flatMapMany(ReactorTest::capitalizeSplit); 363 flux1.subscribe(System.out::println); 364 StepVerifier.create(flux1) 365 .expectSubscription() 366 .expectNext(\u0026#34;J\u0026#34;, \u0026#34;A\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;K\u0026#34;) 367 .verifyComplete(); 368 369 Flux\u0026lt;String\u0026gt; flux2 = Mono.just(\u0026#34;the quick brown fox jumps over the lazy dog\u0026#34;) 370 .flatMapMany(ReactorTest::capitalizeSplit) 371 .distinct() 372 .sort(); 373 flux2.subscribe(System.out::println); 374 //26 letters in the alphabet 375 StepVerifier.create(flux2) 376 .expectNext(\u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;, \u0026#34;C\u0026#34;) 377 .expectComplete(); 378 379 Mono\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; mono = Mono.just(Arrays.asList(1, 2, 3)); 380 Flux\u0026lt;Integer\u0026gt; flux3 = mono.flatMapMany(it -\u0026gt; Flux.fromIterable(it)); 381 flux3.subscribe(System.out::println); 382 StepVerifier 383 .create(flux3) 384 .expectNext(1, 2, 3) 385 .verifyComplete(); 386 } 387 388 private static Flux\u0026lt;String\u0026gt; capitalizeSplit(String user) { 389 return Flux.fromArray(user.toUpperCase().split(\u0026#34;\u0026#34;)); 390 } 391 392 /** 393 * ******************************************************************** 394 * flatMapIterable - convert mono of list to flux 395 * ******************************************************************** 396 */ 397 @Test 398 void flatMapIterableTest() { 399 //Converts Mono of list to Flux. 400 Mono\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; mono = Mono.just(Arrays.asList(1, 2, 3)); 401 Flux\u0026lt;Integer\u0026gt; flux1 = mono.flatMapIterable(list -\u0026gt; list); 402 flux1.subscribe(System.out::println); 403 StepVerifier 404 .create(flux1) 405 .expectNext(1, 2, 3) 406 .verifyComplete(); 407 } 408 409 /** 410 * ******************************************************************** 411 * transform - accepts a Function functional interface. Used when similar transform is used in many places 412 * input is flux/mono 413 * output is flux/mono 414 * takes a flux/mono and returns a flux/mono 415 * ******************************************************************** 416 */ 417 @Test 418 void transformTest() { 419 //Function defines input and output 420 Function\u0026lt;Flux\u0026lt;String\u0026gt;, Flux\u0026lt;String\u0026gt;\u0026gt; filterMap = name -\u0026gt; name.map(String::toUpperCase); 421 Flux\u0026lt;String\u0026gt; flux1 = Flux.fromIterable(List.of(\u0026#34;Jack\u0026#34;, \u0026#34;Joe\u0026#34;, \u0026#34;Jill\u0026#34;)) 422 .transform(filterMap) 423 .filter(s -\u0026gt; s.length() \u0026gt; 3); 424 flux1.subscribe(System.out::println); 425 StepVerifier 426 .create(flux1) 427 .expectNext(\u0026#34;JACK\u0026#34;, \u0026#34;JILL\u0026#34;) 428 .verifyComplete(); 429 } 430 431 /** 432 * ******************************************************************** 433 * switchIfEmpty - similar to defaultIfEmpty but return flux/mono 434 * defaultIfEmpty - return a fixed value. 435 * ******************************************************************** 436 */ 437 @Test 438 @SneakyThrows 439 void switchTest() { 440 Flux\u0026lt;Object\u0026gt; flux1 = emptyFlux() 441 .switchIfEmpty(Flux.just(\u0026#34;empty!\u0026#34;)) 442 .log(); 443 StepVerifier.create(flux1) 444 .expectSubscription() 445 .expectNext(\u0026#34;empty!\u0026#34;) 446 .expectComplete() 447 .verify(); 448 449 Flux\u0026lt;Object\u0026gt; flux2 = emptyFlux() 450 .defaultIfEmpty(\u0026#34;empty!\u0026#34;) 451 .log(); 452 StepVerifier.create(flux2) 453 .expectSubscription() 454 .expectNext(\u0026#34;empty!\u0026#34;) 455 .expectComplete() 456 .verify(); 457 458 459 } 460 461 private Flux\u0026lt;Object\u0026gt; emptyFlux() { 462 return Flux.empty(); 463 } 464 465 /** 466 * ******************************************************************** 467 * switchIfEmpty with Optional 468 * ******************************************************************** 469 */ 470 @Test 471 public void switchOptionalTest() { 472 473 Mono\u0026lt;String\u0026gt; mono1 = getHello1().map(e -\u0026gt; { 474 return e.get().toUpperCase(); 475 }).switchIfEmpty(Mono.just(\u0026#34;empty!\u0026#34;)); 476 StepVerifier.create(mono1) 477 .expectNext(\u0026#34;HELLO\u0026#34;) 478 .expectComplete() 479 .verify(); 480 481 Mono\u0026lt;String\u0026gt; mono2 = getHello2().map(e -\u0026gt; { 482 return e.get().toUpperCase(); 483 }).switchIfEmpty(Mono.just(\u0026#34;empty!\u0026#34;)); 484 StepVerifier.create(mono2) 485 .expectNext(\u0026#34;empty!\u0026#34;) 486 .expectComplete() 487 .verify(); 488 } 489 490 private Mono\u0026lt;Optional\u0026lt;String\u0026gt;\u0026gt; getHello1() { 491 return Mono.just(Optional.of(\u0026#34;hello\u0026#34;)); 492 } 493 494 //Optional evaluated to object or empty 495 private Mono\u0026lt;Optional\u0026lt;String\u0026gt;\u0026gt; getHello2() { 496 return Mono.justOrEmpty(Optional.empty()); 497 } 498 499 /** 500 * ******************************************************************** 501 * switchIfEmpty - Used as if-else block 502 * ******************************************************************** 503 */ 504 @Test 505 void switchIfElseTest() { 506 final String name = \u0026#34;Jack\u0026#34;; 507 //No need to use Mono.defer on the switchIfEmpty 508 Mono\u0026lt;String\u0026gt; mono = Mono.just(name) 509 .flatMap(this::wishGoodMorning) 510 .switchIfEmpty(this.wishGoodNight(name)); 511 512 StepVerifier.create(mono) 513 .expectNext(\u0026#34;GOOD NIGHT JACK\u0026#34;) 514 .verifyComplete(); 515 } 516 517 private Mono\u0026lt;String\u0026gt; wishGoodMorning(String name) { 518 log.info(\u0026#34;wishGoodMorning {}\u0026#34;, name); 519 if (name.equals(\u0026#34;Jack\u0026#34;)) { 520 return Mono.empty(); 521 } else { 522 return Mono.just(\u0026#34;Good Morning \u0026#34; + name); 523 } 524 } 525 526 private Mono\u0026lt;String\u0026gt; wishGoodNight(String name) { 527 log.info(\u0026#34;wishGoodNight {}\u0026#34;, name); 528 return Mono.just(\u0026#34;Good Night \u0026#34; + name) 529 .map(String::toUpperCase); 530 } 531 532 /** 533 * ******************************************************************** 534 * intersect with filterWhen - compare 2 flux for common elements 535 * ******************************************************************** 536 */ 537 @Test 538 void fluxIntersectCommonTest() { 539 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;).log(); 540 //Without cache on flux2 it will subscribe many times. 541 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pumpkin\u0026#34;, \u0026#34;papaya\u0026#34;, \u0026#34;walnuts\u0026#34;, \u0026#34;grapes\u0026#34;, \u0026#34;pineapple\u0026#34;).log().cache(); 542 543 Flux\u0026lt;String\u0026gt; commonFlux = flux1.filterWhen(f -\u0026gt; ReactorTest.checkList1(flux2, f)); 544 commonFlux.subscribe(System.out::println); 545 StepVerifier.create(commonFlux) 546 .expectNext(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;) 547 .verifyComplete(); 548 } 549 550 private static Mono\u0026lt;Boolean\u0026gt; checkList1(Flux\u0026lt;String\u0026gt; flux, String fruit) { 551 //toStream will block so should be avoided. Look at ReactorObjectTest for better approach. 552 return Mono.just(flux.toStream().anyMatch(e -\u0026gt; e.equals(fruit))); 553 } 554 555 /** 556 * ******************************************************************** 557 * intersect with filter - compare 2 flux for common elements 558 * ******************************************************************** 559 */ 560 @Test 561 void fluxIntersectCommon2Test() { 562 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;).log(); 563 //Without cache on flux2 it will subscribe many times. 564 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pumpkin\u0026#34;, \u0026#34;papaya\u0026#34;, \u0026#34;walnuts\u0026#34;, \u0026#34;grapes\u0026#34;, \u0026#34;pineapple\u0026#34;).log().cache(); 565 Flux\u0026lt;String\u0026gt; commonFlux = flux1.filter(f -\u0026gt; { 566 //toStream will block so should be avoided. Look at ReactorObjectTest for better approach. 567 return flux2.toStream().anyMatch(e -\u0026gt; e.equals(f)); 568 }); 569 commonFlux.subscribe(System.out::println); 570 StepVerifier.create(commonFlux) 571 .expectNext(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;) 572 .verifyComplete(); 573 } 574 575 /** 576 * ******************************************************************** 577 * intersect with filterWhen - compare 2 flux for diff 578 * ******************************************************************** 579 */ 580 @Test 581 void fluxIntersectDiffTest() { 582 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;).log(); 583 //Without cache on flux2 it will subscribe many times. 584 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pumpkin\u0026#34;, \u0026#34;papaya\u0026#34;, \u0026#34;walnuts\u0026#34;, \u0026#34;grapes\u0026#34;, \u0026#34;pineapple\u0026#34;).log().cache(); 585 586 Flux\u0026lt;String\u0026gt; diffFlux = flux1.filterWhen(f -\u0026gt; ReactorTest.checkList2(flux2, f)); 587 diffFlux.subscribe(System.out::println); 588 StepVerifier.create(diffFlux) 589 .expectNext(\u0026#34;banana\u0026#34;) 590 .verifyComplete(); 591 } 592 593 private static Mono\u0026lt;Boolean\u0026gt; checkList2(Flux\u0026lt;String\u0026gt; flux, String fruit) { 594 //toStream will block so should be avoided. Look at ReactorObjectTest for better approach. 595 return Mono.just(flux.toStream().anyMatch(e -\u0026gt; e.equals(fruit))).map(hasElement -\u0026gt; !hasElement); 596 } 597 598 /** 599 * ******************************************************************** 600 * intersect with filter - compare 2 flux for diff 601 * ******************************************************************** 602 */ 603 @Test 604 void fluxIntersectDiff2Test() { 605 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;).log(); 606 //Without cache on flux2 it will subscribe many times. 607 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;pumpkin\u0026#34;, \u0026#34;papaya\u0026#34;, \u0026#34;walnuts\u0026#34;, \u0026#34;grapes\u0026#34;, \u0026#34;pineapple\u0026#34;).log().cache(); 608 Flux\u0026lt;String\u0026gt; commonFlux = flux1.filter(f -\u0026gt; { 609 //toStream will block so should be avoided. Look at ReactorObjectTest for better approach. 610 return !flux2.toStream().anyMatch(e -\u0026gt; e.equals(f)); 611 }); 612 commonFlux.subscribe(System.out::println); 613 StepVerifier.create(commonFlux) 614 .expectNext(\u0026#34;banana\u0026#34;) 615 .verifyComplete(); 616 } 617 618 /** 619 * ******************************************************************** 620 * startWith - add new element to flux. 621 * ******************************************************************** 622 */ 623 @Test 624 public void startWithTest() { 625 Flux\u0026lt;Integer\u0026gt; flux = Flux.range(1, 3); 626 Flux\u0026lt;Integer\u0026gt; integerFlux = flux.startWith(0); 627 StepVerifier.create(integerFlux) 628 .expectNext(0, 1, 2, 3) 629 .verifyComplete(); 630 } 631 632 /** 633 * ******************************************************************** 634 * index 635 * ******************************************************************** 636 */ 637 @Test 638 void fluxIndexTest() { 639 //append a number to each element. 640 Flux\u0026lt;Tuple2\u0026lt;Long, String\u0026gt;\u0026gt; index = Flux 641 .just(\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;orange\u0026#34;) 642 .index(); 643 StepVerifier.create(index) 644 .expectNext(Tuples.of(0L, \u0026#34;apple\u0026#34;)) 645 .expectNext(Tuples.of(1L, \u0026#34;banana\u0026#34;)) 646 .expectNext(Tuples.of(2L, \u0026#34;orange\u0026#34;)) 647 .verifyComplete(); 648 } 649 650 /** 651 * ******************************************************************** 652 * takeWhile \u0026amp; skipWhile 653 * ******************************************************************** 654 */ 655 @Test 656 void takeWhileTest() { 657 Flux\u0026lt;Integer\u0026gt; numbersFlux = Flux.range(1, 10); 658 Flux\u0026lt;Integer\u0026gt; takeWhile = numbersFlux.takeWhile(i -\u0026gt; i \u0026lt;= 5); 659 StepVerifier 660 .create(takeWhile) 661 .expectNext(1, 2, 3, 4, 5) 662 .verifyComplete(); 663 664 Flux\u0026lt;Integer\u0026gt; skipWhile = numbersFlux.skipWhile(i -\u0026gt; i \u0026lt;= 5); 665 StepVerifier 666 .create(skipWhile) 667 .expectNext(6, 7, 8, 9, 10) 668 .verifyComplete(); 669 } 670 671 /** 672 * ******************************************************************** 673 * collectList \u0026amp; collectSortedList- flux to mono of list 674 * ******************************************************************** 675 */ 676 @Test 677 void collectListTest() { 678 Flux\u0026lt;String\u0026gt; flux = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;); 679 Mono\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; mono = flux.collectList(); 680 mono.subscribe(System.out::println); 681 StepVerifier.create(mono) 682 .expectNext(Arrays.asList(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;)) 683 .verifyComplete(); 684 685 Mono\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; listMono1 = Flux 686 .just(1, 2, 3) 687 .collectList(); 688 StepVerifier.create(listMono1) 689 .expectNext(Arrays.asList(1, 2, 3)) 690 .verifyComplete(); 691 692 Mono\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; listMono2 = Flux 693 .just(5, 2, 4, 1, 3) 694 .collectSortedList(); 695 StepVerifier.create(listMono2) 696 .expectNext(Arrays.asList(1, 2, 3, 4, 5)) 697 .verifyComplete(); 698 } 699 700 /** 701 * ******************************************************************** 702 * collectList 703 * ******************************************************************** 704 */ 705 @Test 706 void collectListTest2() { 707 Mono\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; monoList1 = Flux.just(\u0026#34;banana\u0026#34;, \u0026#34;apple\u0026#34;) 708 .collectList(); 709 StepVerifier.create(monoList1) 710 .expectNext(Arrays.asList(\u0026#34;banana\u0026#34;, \u0026#34;apple\u0026#34;)) 711 .verifyComplete(); 712 713 Mono\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; monoList2 = Flux.just(\u0026#34;banana\u0026#34;, \u0026#34;apple\u0026#34;) 714 .collectSortedList(); 715 StepVerifier.create(monoList2) 716 .expectNext(Arrays.asList(\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;)) 717 .verifyComplete(); 718 719 //Dont use infinite flux, will never return. 720 //Flux.interval(Duration.ofMillis(1000)).collectList().subscribe(); 721 722 List\u0026lt;String\u0026gt; list3 = new ArrayList\u0026lt;\u0026gt;(); 723 monoList1.subscribe(list3::addAll); 724 list3.forEach(System.out::println); 725 } 726 727 /** 728 * ******************************************************************** 729 * collectMap 730 * ******************************************************************** 731 */ 732 @Test 733 void collectMapTest() { 734 Mono\u0026lt;Map\u0026lt;Object, Object\u0026gt;\u0026gt; flux = Flux.just( 735 \u0026#34;yellow:banana\u0026#34;, 736 \u0026#34;red:apple\u0026#34;).collectMap(item -\u0026gt; item.split(\u0026#34;:\u0026#34;)[0], item -\u0026gt; item.split(\u0026#34;:\u0026#34;)[1]); 737 738 Map\u0026lt;Object, Object\u0026gt; map1 = new HashMap\u0026lt;\u0026gt;(); 739 flux.subscribe(map1::putAll); 740 map1.forEach((key, value) -\u0026gt; System.out.println(key + \u0026#34; -\u0026gt; \u0026#34; + value)); 741 742 StepVerifier.create(flux) 743 .expectNext(Map.of(\u0026#34;yellow\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;red\u0026#34;, \u0026#34;apple\u0026#34;)) 744 .verifyComplete(); 745 } 746 747 /** 748 * ******************************************************************** 749 * collectMultimap 750 * ******************************************************************** 751 */ 752 @Test 753 void collectMultimapTest() { 754 Mono\u0026lt;Map\u0026lt;String, Collection\u0026lt;Object\u0026gt;\u0026gt;\u0026gt; flux = Flux.just(\u0026#34;yellow:banana\u0026#34;, \u0026#34;red:grapes\u0026#34;, \u0026#34;red:apple\u0026#34;, \u0026#34;yellow:pineapple\u0026#34;) 755 .collectMultimap( 756 item -\u0026gt; item.split(\u0026#34;:\u0026#34;)[0], 757 item -\u0026gt; item.split(\u0026#34;:\u0026#34;)[1]); 758 Map\u0026lt;Object, Collection\u0026lt;Object\u0026gt;\u0026gt; map1 = new HashMap\u0026lt;\u0026gt;(); 759 flux.subscribe(map1::putAll); 760 map1.forEach((key, value) -\u0026gt; System.out.println(key + \u0026#34; -\u0026gt; \u0026#34; + value)); 761 762 StepVerifier.create(flux) 763 .expectNext(Map.of(\u0026#34;red\u0026#34;, List.of(\u0026#34;grapes\u0026#34;, \u0026#34;apple\u0026#34;), \u0026#34;yellow\u0026#34;, List.of(\u0026#34;banana\u0026#34;, \u0026#34;pineapple\u0026#34;))) 764 .verifyComplete(); 765 } 766 767 /** 768 * ******************************************************************** 769 * concat - subscribes to publishers in sequence, order guaranteed, static function 770 * ******************************************************************** 771 */ 772 @Test 773 @SneakyThrows 774 void concatTest() { 775 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;); 776 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 777 Flux\u0026lt;String\u0026gt; flux3 = Flux.concat(flux1, flux2); 778 779 StepVerifier.create(flux3) 780 .expectSubscription() 781 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;) 782 .verifyComplete(); 783 784 Flux\u0026lt;String\u0026gt; flux4 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;).delayElements(Duration.ofMillis(200)); 785 Flux\u0026lt;String\u0026gt; flux5 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 786 //Lazy will wait till first flux finishes. 787 Flux\u0026lt;String\u0026gt; flux6 = Flux.concat(flux1, flux2).log(); 788 789 StepVerifier.create(flux6) 790 .expectSubscription() 791 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;) 792 .verifyComplete(); 793 } 794 795 /** 796 * ******************************************************************** 797 * concatWith - subscribes to publishers in sequence, order guaranteed, instance function 798 * ******************************************************************** 799 */ 800 @Test 801 @SneakyThrows 802 void concatWithTest() { 803 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;); 804 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 805 Flux\u0026lt;String\u0026gt; flux3 = flux1.concatWith(flux2).log(); 806 StepVerifier.create(flux3) 807 .expectSubscription() 808 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;) 809 .verifyComplete(); 810 811 Mono\u0026lt;String\u0026gt; aFlux = Mono.just(\u0026#34;a\u0026#34;); 812 Mono\u0026lt;String\u0026gt; bFlux = Mono.just(\u0026#34;b\u0026#34;); 813 Flux\u0026lt;String\u0026gt; stringFlux = aFlux.concatWith(bFlux); 814 stringFlux.subscribe(System.out::println); 815 StepVerifier.create(stringFlux) 816 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;) 817 .verifyComplete(); 818 } 819 820 @Test 821 void concatDelayErrorTest() { 822 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;).map(s -\u0026gt; { 823 if (s.equals(\u0026#34;b\u0026#34;)) { 824 throw new IllegalArgumentException(\u0026#34;error!\u0026#34;); 825 } 826 return s; 827 }); 828 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 829 Flux\u0026lt;String\u0026gt; flux = Flux.concatDelayError(flux1, flux2) 830 .log(); 831 StepVerifier.create(flux) 832 .expectSubscription() 833 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;) 834 .expectError() 835 .verify(); 836 } 837 838 /** 839 * ******************************************************************** 840 * merge - subscribes to publishers eagerly, order not guaranteed, static function 841 * ******************************************************************** 842 */ 843 @Test 844 @SneakyThrows 845 void mergeTest() { 846 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;).delayElements(Duration.ofMillis(200)); 847 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 848 //Eager will not wait till first flux finishes. 849 Flux\u0026lt;String\u0026gt; flux = Flux.merge(flux1, flux2) 850 .log(); 851 StepVerifier.create(flux) 852 .expectSubscription() 853 .expectNext(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;) 854 .verifyComplete(); 855 } 856 857 /** 858 * ******************************************************************** 859 * mergeWith - subscribes to publishers in eagerly, order not guaranteed, instance function 860 * ******************************************************************** 861 */ 862 @Test 863 @SneakyThrows 864 void mergeWithTest() { 865 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;).delayElements(Duration.ofMillis(200)); 866 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 867 //Eager will not wait till first flux finishes. 868 Flux\u0026lt;String\u0026gt; flux3 = flux1.mergeWith(flux2).log(); 869 StepVerifier.create(flux3) 870 .expectSubscription() 871 .expectNext(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;) 872 .verifyComplete(); 873 874 Mono aMono = Mono.just(\u0026#34;a\u0026#34;); 875 Mono bMono = Mono.just(\u0026#34;b\u0026#34;); 876 Flux flux4 = aMono.mergeWith(bMono); 877 StepVerifier.create(flux4) 878 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;) 879 .verifyComplete(); 880 } 881 882 /** 883 * ******************************************************************** 884 * mergeSequential - subscribes to publishers eagerly, result is sequential. 885 * concat - subscribes to publishers in sequence, result is sequential. 886 * ******************************************************************** 887 */ 888 @Test 889 @SneakyThrows 890 void mergeSequentialTest() { 891 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;).delayElements(Duration.ofMillis(200)); 892 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 893 Flux\u0026lt;String\u0026gt; flux = Flux.mergeSequential(flux1, flux2, flux1) 894 .log(); 895 StepVerifier.create(flux) 896 .expectSubscription() 897 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;) 898 .verifyComplete(); 899 } 900 901 @Test 902 void mergeDelayTest() { 903 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;).map(s -\u0026gt; { 904 if (s.equals(\u0026#34;b\u0026#34;)) { 905 throw new IllegalArgumentException(\u0026#34;error!\u0026#34;); 906 } 907 return s; 908 }).doOnError(e -\u0026gt; log.error(\u0026#34;Error: {}\u0026#34;, e)); 909 910 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 911 Flux\u0026lt;String\u0026gt; flux = Flux.mergeDelayError(1, flux1, flux2, flux1) 912 .log(); 913 StepVerifier.create(flux) 914 .expectSubscription() 915 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;a\u0026#34;) 916 .expectError() 917 .verify(); 918 } 919 920 /** 921 * ******************************************************************** 922 * zip - subscribes to publishers in eagerly, waits for both flux to emit one element. 2-8 flux can be zipped, returns a tuple, Static function 923 * ******************************************************************** 924 */ 925 @Test 926 void fluxZipTest() { 927 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;red\u0026#34;, \u0026#34;yellow\u0026#34;); 928 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;); 929 Flux\u0026lt;String\u0026gt; flux3 = Flux.zip(flux1, flux2) 930 .map(tuple -\u0026gt; { 931 return (tuple.getT1() + \u0026#34; \u0026#34; + tuple.getT2()); 932 }); 933 flux3.subscribe(System.out::println); 934 StepVerifier.create(flux3) 935 .expectNext(\u0026#34;red apple\u0026#34;) 936 .expectNext(\u0026#34;yellow banana\u0026#34;) 937 .verifyComplete(); 938 939 //Third argument is combinator lambda 940 Flux\u0026lt;Integer\u0026gt; firstFlux = Flux.just(1, 2, 3); 941 Flux\u0026lt;Integer\u0026gt; secondFlux = Flux.just(10, 20, 30, 40); 942 //Define how the zip should happen 943 Flux\u0026lt;Integer\u0026gt; zip = Flux.zip(firstFlux, secondFlux, (num1, num2) -\u0026gt; num1 + num2); 944 StepVerifier 945 .create(zip) 946 .expectNext(11, 22, 33) 947 .verifyComplete(); 948 } 949 950 /** 951 * ******************************************************************** 952 * zipWith - subscribes to publishers in eagerly, waits for both flux to emit one element. 2-8 flux can be zipped, returns a tuple, Instance function 953 * ******************************************************************** 954 */ 955 @Test 956 void fluxZipWithTest() { 957 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;red\u0026#34;, \u0026#34;yellow\u0026#34;); 958 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;); 959 Flux\u0026lt;String\u0026gt; flux3 = flux1.zipWith(flux2) 960 .map(tuple -\u0026gt; { 961 return (tuple.getT1() + \u0026#34; \u0026#34; + tuple.getT2()); 962 }); 963 StepVerifier.create(flux3) 964 .expectNext(\u0026#34;red apple\u0026#34;) 965 .expectNext(\u0026#34;yellow banana\u0026#34;) 966 .verifyComplete(); 967 968 Flux\u0026lt;String\u0026gt; flux4 = Flux.fromIterable(Arrays.asList(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;)) 969 .zipWith(Flux.range(1, 5), (word, line) -\u0026gt; { 970 return line + \u0026#34;. \u0026#34; + word; 971 }); 972 StepVerifier.create(flux4) 973 .expectNext(\u0026#34;1. apple\u0026#34;) 974 .expectNext(\u0026#34;2. orange\u0026#34;) 975 .expectNext(\u0026#34;3. banana\u0026#34;) 976 .verifyComplete(); 977 } 978 979 /** 980 * ******************************************************************** 981 * Error Recover Handling 982 * onErrorReturn - Return value on error 983 * ******************************************************************** 984 */ 985 @Test 986 void onErrorReturnTest() { 987 Mono\u0026lt;Object\u0026gt; mono1 = Mono.error(new RuntimeException(\u0026#34;My Error\u0026#34;)) 988 .onErrorReturn(\u0026#34;Jack\u0026#34;); 989 StepVerifier.create(mono1) 990 .expectNext(\u0026#34;Jack\u0026#34;) 991 .verifyComplete(); 992 } 993 994 /** 995 * ******************************************************************** 996 * Error Recover Handling 997 * onErrorResume - Resume chain with new mono/flux. 998 * ******************************************************************** 999 */ 1000 @Test 1001 void onErrorResumeTest() { 1002 Mono\u0026lt;Object\u0026gt; mono1 = Mono.error(new RuntimeException(\u0026#34;My Error\u0026#34;)) 1003 .onErrorResume(e -\u0026gt; Mono.just(\u0026#34;Jack\u0026#34;)); 1004 StepVerifier.create(mono1) 1005 .expectNext(\u0026#34;Jack\u0026#34;) 1006 .verifyComplete(); 1007 1008 Mono\u0026lt;Object\u0026gt; mono2 = Mono.error(new RuntimeException(\u0026#34;My Error\u0026#34;)) 1009 .onErrorResume(s -\u0026gt; { 1010 log.info(\u0026#34;Inside on onErrorResume\u0026#34;); 1011 return Mono.just(\u0026#34;Jack\u0026#34;); 1012 }) 1013 .log(); 1014 StepVerifier.create(mono2) 1015 .expectNext(\u0026#34;Jack\u0026#34;) 1016 .verifyComplete(); 1017 } 1018 1019 /** 1020 * ******************************************************************** 1021 * Error Recover Handling 1022 * onErrorContinue - Continue chain even if error occurs 1023 * ******************************************************************** 1024 */ 1025 @Test 1026 void onErrorContinueTest() { 1027 Flux\u0026lt;String\u0026gt; flux1 = 1028 Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;) 1029 .map(e -\u0026gt; { 1030 if (e.equals(\u0026#34;b\u0026#34;)) 1031 throw new RuntimeException(\u0026#34;My Error!\u0026#34;); 1032 return e; 1033 }) 1034 .concatWith(Mono.just(\u0026#34;d\u0026#34;)) 1035 .onErrorContinue((ex, value) -\u0026gt; { 1036 log.info(\u0026#34;Exception: {}\u0026#34;, ex); 1037 log.info(\u0026#34;value: {}\u0026#34;, value); 1038 }) 1039 .log(); 1040 StepVerifier.create(flux1) 1041 .expectNext(\u0026#34;a\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;) 1042 .verifyComplete(); 1043 } 1044 1045 /** 1046 * ******************************************************************** 1047 * Error - Action 1048 * doOnError - log the error, Side-effect operator. 1049 * ******************************************************************** 1050 */ 1051 @Test 1052 void doOnErrorTest() { 1053 Mono\u0026lt;Object\u0026gt; mono1 = Mono.error(new RuntimeException(\u0026#34;My Error\u0026#34;)) 1054 .doOnError(e -\u0026gt; log.error(\u0026#34;Error: {}\u0026#34;, e.getMessage())) 1055 .log(); 1056 StepVerifier.create(mono1) 1057 .expectError(RuntimeException.class) 1058 .verify(); 1059 } 1060 1061 /** 1062 * ******************************************************************** 1063 * Error - Action 1064 * onErrorMap - Transform an error emitted 1065 * ******************************************************************** 1066 */ 1067 @Test 1068 void onErrorMapTest() { 1069 Flux flux1 = Flux.just(\u0026#34;Jack\u0026#34;, \u0026#34;Jill\u0026#34;).map(u -\u0026gt; { 1070 if (u.equals(\u0026#34;Jill\u0026#34;)) { 1071 //always do throw here, never do return. 1072 throw new IllegalArgumentException(\u0026#34;Not valid\u0026#34;); 1073 } 1074 if (u.equals(\u0026#34;Jack\u0026#34;)) { 1075 throw new ClassCastException(\u0026#34;Not valid\u0026#34;); 1076 } 1077 return u; 1078 }).onErrorMap(IllegalArgumentException.class, e -\u0026gt; { 1079 log.info(\u0026#34;Illegal Arg error\u0026#34;); 1080 throw new RuntimeException(\u0026#34;Illegal Arg error!\u0026#34;); 1081 }).onErrorMap(ClassCastException.class, e -\u0026gt; { 1082 log.info(\u0026#34;Class cast error\u0026#34;); 1083 throw new RuntimeException(\u0026#34;Class cast error!\u0026#34;); 1084 }); 1085 1086 StepVerifier.create(flux1) 1087 .expectErrorMessage(\u0026#34;Class cast error!\u0026#34;) 1088 .verify(); 1089 } 1090 1091 /** 1092 * ******************************************************************** 1093 * retry 1094 * ******************************************************************** 1095 */ 1096 @Test 1097 void retryTest() { 1098 Mono\u0026lt;String\u0026gt; mono = Mono.just(\u0026#34;Jack\u0026#34;) 1099 .flatMap(this::twoAttemptFunction) 1100 .retry(3); 1101 StepVerifier.create(mono) 1102 .assertNext(e -\u0026gt; { 1103 assertThat(e).isEqualTo(\u0026#34;Hello Jack\u0026#34;); 1104 }) 1105 .verifyComplete(); 1106 } 1107 1108 AtomicLong attemptCounter1 = new AtomicLong(); 1109 1110 private Mono\u0026lt;String\u0026gt; twoAttemptFunction(String name) { 1111 Long attempt = attemptCounter1.getAndIncrement(); 1112 log.info(\u0026#34;attempt value: {}\u0026#34;, attempt); 1113 if (attempt \u0026lt; 2) { 1114 throw new RuntimeException(\u0026#34;FAILURE\u0026#34;); 1115 } 1116 return Mono.just(\u0026#34;Hello \u0026#34; + name); 1117 } 1118 1119 /** 1120 * ******************************************************************** 1121 * retryWhen 1122 * ******************************************************************** 1123 */ 1124 @Test 1125 void retryWhenTest() { 1126 attemptCounter2 = new AtomicLong(); 1127 RetryBackoffSpec retryFilter1 = Retry.backoff(3, Duration.ofSeconds(1)) 1128 .filter(throwable -\u0026gt; throwable instanceof RuntimeException); 1129 1130 Mono\u0026lt;String\u0026gt; mono1 = Mono.just(\u0026#34;Jack\u0026#34;) 1131 .flatMap(this::greetAfter2Failure) 1132 .retryWhen(retryFilter1); 1133 StepVerifier.create(mono1) 1134 .assertNext(e -\u0026gt; { 1135 assertThat(e).isEqualTo(\u0026#34;Hello Jack\u0026#34;); 1136 }) 1137 .verifyComplete(); 1138 1139 attemptCounter2 = new AtomicLong(); 1140 RetryBackoffSpec retryFilter2 = Retry.fixedDelay(1, Duration.ofSeconds(1)) 1141 .filter(throwable -\u0026gt; throwable instanceof RuntimeException) 1142 .onRetryExhaustedThrow(((retryBackoffSpec, retrySignal) -\u0026gt; 1143 Exceptions.propagate(retrySignal.failure()) 1144 )); 1145 Mono\u0026lt;String\u0026gt; mono2 = Mono.just(\u0026#34;Jack\u0026#34;) 1146 .flatMap(this::greetAfter2Failure) 1147 .retryWhen(retryFilter2); 1148 StepVerifier.create(mono2) 1149 .expectErrorMessage(\u0026#34;FAILURE\u0026#34;) 1150 .verify(); 1151 } 1152 1153 AtomicLong attemptCounter2; 1154 1155 private Mono\u0026lt;String\u0026gt; greetAfter2Failure(String name) { 1156 Long attempt = attemptCounter2.getAndIncrement(); 1157 log.info(\u0026#34;attempt value: {}\u0026#34;, attempt); 1158 if (attempt \u0026lt; 2) { 1159 throw new RuntimeException(\u0026#34;FAILURE\u0026#34;); 1160 } 1161 return Mono.just(\u0026#34;Hello \u0026#34; + name); 1162 } 1163 1164 /** 1165 * ******************************************************************** 1166 * repeat - repeat an operation n times. 1167 * ******************************************************************** 1168 */ 1169 @Test 1170 void repeatTest() { 1171 Mono\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; flux = getDate() 1172 .repeat(5) 1173 .collectList(); 1174 StepVerifier.create(flux) 1175 .assertNext(e -\u0026gt; { 1176 assertThat(e.size()).isEqualTo(6); 1177 }) 1178 .verifyComplete(); 1179 } 1180 1181 private Mono\u0026lt;String\u0026gt; getDate() { 1182 return Mono.just(\u0026#34;Time \u0026#34; + new Date()); 1183 } 1184 1185 /** 1186 * ******************************************************************** 1187 * doOn - doOnSubscribe, doOnNext, doOnError, doFinally, doOnComplete 1188 * ******************************************************************** 1189 */ 1190 @Test 1191 void doOnTest1() { 1192 Flux\u0026lt;Integer\u0026gt; numFlux = Flux.range(1, 5) 1193 .log() 1194 .map(i -\u0026gt; { 1195 if (i == 4) { 1196 throw new RuntimeException(\u0026#34;Num Error!\u0026#34;); 1197 } 1198 return i; 1199 }); 1200 numFlux.subscribe(s -\u0026gt; { 1201 log.info(\u0026#34;Number: {}\u0026#34;, s); 1202 }, 1203 Throwable::printStackTrace, 1204 () -\u0026gt; { 1205 log.info(\u0026#34;Done!\u0026#34;); 1206 }); 1207 StepVerifier.create(numFlux) 1208 .expectNext(1, 2, 3) 1209 .expectError(RuntimeException.class) 1210 .verify(); 1211 } 1212 1213 @Test 1214 void doOnTest2() { 1215 Flux\u0026lt;Object\u0026gt; flux = Flux.error(new RuntimeException(\u0026#34;My Error\u0026#34;)) 1216 .doOnSubscribe(s -\u0026gt; System.out.println(\u0026#34;Subscribed!\u0026#34;)) 1217 .doOnNext(p -\u0026gt; System.out.println(\u0026#34;Next!\u0026#34;)) 1218 .doOnComplete(() -\u0026gt; System.out.println(\u0026#34;Completed!\u0026#34;)) 1219 .doFinally((e) -\u0026gt; System.out.println(\u0026#34;Signal: \u0026#34; + e)) 1220 .doOnError((e) -\u0026gt; System.out.println(\u0026#34;Error: \u0026#34; + e)); 1221 1222 StepVerifier.create(flux) 1223 .expectError(RuntimeException.class) 1224 .verify(); 1225 1226 StepVerifier.create(flux) 1227 .verifyError(RuntimeException.class); 1228 } 1229 1230 @Test 1231 void doOnTest3() { 1232 Flux flux = Flux.error(new RuntimeException(\u0026#34;My Error\u0026#34;)); 1233 flux.subscribe( 1234 onNext(), 1235 onError(), 1236 onComplete() 1237 ); 1238 } 1239 1240 private static Consumer\u0026lt;Object\u0026gt; onNext() { 1241 return o -\u0026gt; System.out.println(\u0026#34;Received : \u0026#34; + o); 1242 } 1243 1244 private static Consumer\u0026lt;Throwable\u0026gt; onError() { 1245 return e -\u0026gt; System.out.println(\u0026#34;ERROR : \u0026#34; + e.getMessage()); 1246 } 1247 1248 private static Runnable onComplete() { 1249 return () -\u0026gt; System.out.println(\u0026#34;Completed\u0026#34;); 1250 } 1251 1252 /** 1253 * ******************************************************************** 1254 * StepVerifier - assertNext, thenRequest, thenCancel, expectError, expectErrorMessage 1255 * ******************************************************************** 1256 */ 1257 @Test 1258 void fluxStepVerifyTest() { 1259 Flux flux = Flux.fromIterable(Arrays.asList(\u0026#34;Jack\u0026#34;, \u0026#34;Jill\u0026#34;)); 1260 StepVerifier.create(flux) 1261 .expectNextMatches(user -\u0026gt; user.equals(\u0026#34;Jack\u0026#34;)) 1262 .assertNext(user -\u0026gt; assertThat(user).isEqualTo(\u0026#34;Jill\u0026#34;)) 1263 .verifyComplete(); 1264 1265 //Wait for 2 elements. 1266 StepVerifier.create(flux) 1267 .expectNextCount(2) 1268 .verifyComplete(); 1269 1270 //Request 1 value at a time, get 2 values then cancel. 1271 Flux flux2 = Flux.fromIterable(Arrays.asList(\u0026#34;Jack\u0026#34;, \u0026#34;Jill\u0026#34;, \u0026#34;Raj\u0026#34;)); 1272 StepVerifier.create(flux2, 1) 1273 .expectNext(\u0026#34;JACK\u0026#34;) 1274 .thenRequest(1) 1275 .expectNext(\u0026#34;JILL\u0026#34;) 1276 .thenCancel(); 1277 1278 Mono\u0026lt;Object\u0026gt; mono1 = Mono.error(new RuntimeException(\u0026#34;My Error\u0026#34;)); 1279 StepVerifier.create(mono1) 1280 .expectError(RuntimeException.class) 1281 .verify(); 1282 StepVerifier.create(mono1) 1283 .expectErrorMessage(\u0026#34;My Error\u0026#34;) 1284 .verify(); 1285 } 1286 1287 /** 1288 * ******************************************************************** 1289 * flux error propagate 1290 * ******************************************************************** 1291 */ 1292 @Test 1293 void errorPropagateTest() { 1294 Flux flux1 = Flux.just(\u0026#34;Jack\u0026#34;, \u0026#34;Jill\u0026#34;).map(u -\u0026gt; { 1295 try { 1296 return ReactorTest.checkName(u); 1297 } catch (CustomException e) { 1298 throw Exceptions.propagate(e); 1299 } 1300 }); 1301 flux1.subscribe(System.out::println); 1302 StepVerifier.create(flux1) 1303 .expectNext(\u0026#34;JACK\u0026#34;) 1304 .verifyError(CustomException.class); 1305 } 1306 1307 private static String checkName(String name) throws CustomException { 1308 if (name.equals(\u0026#34;Jill\u0026#34;)) { 1309 throw new CustomException(); 1310 } 1311 return name.toUpperCase(); 1312 } 1313 1314 protected static final class CustomException extends Exception { 1315 private static final long serialVersionUID = 0L; 1316 } 1317 1318 /** 1319 * ******************************************************************** 1320 * subscribeOn - influences upstream (whole chain) 1321 * ******************************************************************** 1322 */ 1323 @Test 1324 void subscribeOnTest() { 1325 Flux numbFlux = Flux.range(1, 5) 1326 .map(i -\u0026gt; { 1327 log.info(\u0026#34;Map1 Num: {}, Thread: {}\u0026#34;, i, Thread.currentThread().getName()); 1328 return i; 1329 }).subscribeOn(Schedulers.single()) 1330 .map(i -\u0026gt; { 1331 log.info(\u0026#34;Map2 Num: {}, Thread: {}\u0026#34;, i, Thread.currentThread().getName()); 1332 return i; 1333 }); 1334 numbFlux.subscribe(); 1335 } 1336 1337 /** 1338 * ******************************************************************** 1339 * publishOn - influences downstream 1340 * ******************************************************************** 1341 */ 1342 @Test 1343 void publishOnTest() { 1344 Flux numbFlux = Flux.range(1, 5) 1345 .map(i -\u0026gt; { 1346 log.info(\u0026#34;Map1 Num: {}, Thread: {}\u0026#34;, i, Thread.currentThread().getName()); 1347 return i; 1348 }).publishOn(Schedulers.single()) 1349 .map(i -\u0026gt; { 1350 log.info(\u0026#34;Map2 Num: {}, Thread: {}\u0026#34;, i, Thread.currentThread().getName()); 1351 return i; 1352 }); 1353 numbFlux.subscribe(); 1354 } 1355 1356 /** 1357 * ******************************************************************** 1358 * fromSupplier - returns a value 1359 * fromCallable - returns a value or exception, runs blocking function on different thread 1360 * ******************************************************************** 1361 */ 1362 @Test 1363 public void monoSupplierTest() { 1364 Supplier\u0026lt;String\u0026gt; stringSupplier = () -\u0026gt; getName(); 1365 Mono\u0026lt;String\u0026gt; mono = Mono.fromSupplier(stringSupplier) 1366 .log(); 1367 mono.subscribe(System.out::println); 1368 } 1369 1370 /** 1371 * ******************************************************************** 1372 * fromSupplier - returns a value 1373 * fromCallable - returns a value or exception, runs blocking function on different thread 1374 * ******************************************************************** 1375 */ 1376 @Test 1377 public void monoCallableTest() { 1378 Callable\u0026lt;String\u0026gt; stringCallable = () -\u0026gt; getName(); 1379 Mono\u0026lt;String\u0026gt; mono = Mono.fromCallable(stringCallable) 1380 .log() 1381 .subscribeOn(Schedulers.boundedElastic()); 1382 mono.subscribe(System.out::println); 1383 } 1384 1385 /** 1386 * ******************************************************************** 1387 * fromCallable - read file may be blocking so we dont want to block main thread. 1388 * ******************************************************************** 1389 */ 1390 @Test 1391 @SneakyThrows 1392 void readFileTest() { 1393 Mono\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; listMono = Mono.fromCallable(() -\u0026gt; Files.readAllLines(Path.of(\u0026#34;src/test/resources/file.txt\u0026#34;))) 1394 .log() 1395 .subscribeOn(Schedulers.boundedElastic()); 1396 1397 listMono.subscribe(l -\u0026gt; log.info(\u0026#34;Line: {}\u0026#34;, l.size())); 1398 TimeUnit.SECONDS.sleep(5); 1399 1400 StepVerifier.create(listMono) 1401 .expectSubscription() 1402 .thenConsumeWhile(l -\u0026gt; { 1403 assertThat(l.isEmpty()).isFalse(); 1404 return true; 1405 }) 1406 .verifyComplete(); 1407 } 1408 1409 /** 1410 * ******************************************************************** 1411 * fromRunnable - runs blocking function on different thread, but doesnt return value 1412 * ******************************************************************** 1413 */ 1414 @Test 1415 public void monoRunnableTest() { 1416 Runnable stringCallable = () -\u0026gt; getName(); 1417 Mono\u0026lt;Object\u0026gt; mono = Mono.fromRunnable(stringCallable) 1418 .log() 1419 .subscribeOn(Schedulers.boundedElastic()); 1420 mono.subscribe(System.out::println); 1421 } 1422 1423 /** 1424 * ******************************************************************** 1425 * ParallelFlux - Will complete in 1 sec even when 3 ops take 3 seconds in sequence 1426 * ******************************************************************** 1427 */ 1428 @Test 1429 void fluxParallelTest() { 1430 log.info(\u0026#34;Cores: {}\u0026#34;, Runtime.getRuntime().availableProcessors()); 1431 ParallelFlux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;) 1432 .parallel() 1433 .runOn(Schedulers.parallel()) 1434 .map(ReactorTest::capitalizeString) 1435 .log(); 1436 StepVerifier.create(flux1) 1437 .expectNextCount(3) 1438 .verifyComplete(); 1439 1440 1441 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;) 1442 .flatMap(name -\u0026gt; { 1443 return Mono.just(name) 1444 .map(ReactorTest::capitalizeString) 1445 .subscribeOn(Schedulers.parallel()); 1446 }) 1447 .log(); 1448 StepVerifier.create(flux2) 1449 .expectNextCount(3) 1450 .verifyComplete(); 1451 } 1452 1453 /** 1454 * ******************************************************************** 1455 * flatMap Parallelism - Will complete in 1 sec even when 3 ops take 3 seconds in sequence 1456 * ******************************************************************** 1457 */ 1458 @Test 1459 void fluxParallelWithFlatMapTest() { 1460 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;) 1461 .flatMap(name -\u0026gt; { 1462 return Mono.just(name) 1463 .map(ReactorTest::capitalizeString) 1464 .subscribeOn(Schedulers.parallel()); 1465 }) 1466 .log(); 1467 StepVerifier.create(flux1) 1468 .expectNextCount(3) 1469 .verifyComplete(); 1470 } 1471 1472 @SneakyThrows 1473 private static String capitalizeString(String element) { 1474 log.info(\u0026#34;Capitalizing: {}\u0026#34;, element); 1475 TimeUnit.SECONDS.sleep(1); 1476 return element.toUpperCase(); 1477 } 1478 1479 /** 1480 * ******************************************************************** 1481 * flatMap - fire-forget jobs with subscribe, Will run async jobs 1482 * ******************************************************************** 1483 */ 1484 @SneakyThrows 1485 @Test 1486 void fireForgetTest() { 1487 CountDownLatch latch = new CountDownLatch(3); 1488 Flux\u0026lt;Object\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;) 1489 .flatMap(fruit -\u0026gt; { 1490 Mono.just(fruit) 1491 .map(e -\u0026gt; ReactorTest.capitalizeStringLatch(e, latch)) 1492 .subscribeOn(Schedulers.parallel()) 1493 .subscribe(); 1494 return Mono.empty(); 1495 }) 1496 .log(); 1497 StepVerifier.create(flux1) 1498 .verifyComplete(); 1499 latch.await(5, TimeUnit.SECONDS); 1500 } 1501 1502 @SneakyThrows 1503 private static String capitalizeStringLatch(String element, CountDownLatch latch) { 1504 log.info(\u0026#34;Capitalizing: {}\u0026#34;, element); 1505 TimeUnit.SECONDS.sleep(1); 1506 latch.countDown(); 1507 return element.toUpperCase(); 1508 } 1509 1510 /** 1511 * ******************************************************************** 1512 * flatMapSequential - Maintains order but executes in parallel 1513 * ******************************************************************** 1514 */ 1515 @Test 1516 void flatMapSequentialTest() { 1517 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;apple\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;banana\u0026#34;) 1518 .flatMapSequential(name -\u0026gt; { 1519 return Mono.just(name) 1520 .map(ReactorTest::capitalizeString) 1521 .subscribeOn(Schedulers.parallel()); 1522 }) 1523 .log(); 1524 StepVerifier.create(flux1) 1525 .expectNext(\u0026#34;APPLE\u0026#34;, \u0026#34;ORANGE\u0026#34;, \u0026#34;BANANA\u0026#34;) 1526 .verifyComplete(); 1527 } 1528 1529 /** 1530 * ******************************************************************** 1531 * withVirtualTime - flux that emits every second. 1532 * ******************************************************************** 1533 */ 1534 @Test 1535 @SneakyThrows 1536 void fluxIntervalTakeTest() { 1537 VirtualTimeScheduler.getOrSet(); 1538 Flux\u0026lt;Long\u0026gt; interval = Flux.interval(Duration.ofSeconds(1)) 1539 .log() 1540 .take(10); 1541 interval.subscribe(i -\u0026gt; log.info(\u0026#34;Number: {}\u0026#34;, i)); 1542 TimeUnit.SECONDS.sleep(5); 1543 StepVerifier.withVirtualTime(() -\u0026gt; interval) 1544 .thenAwait(Duration.ofSeconds(5)) 1545 .expectNextCount(4) 1546 .thenCancel() 1547 .verify(); 1548 } 1549 1550 /** 1551 * ******************************************************************** 1552 * flux that emits every day. Use of virtual time to simulate days. 1553 * ******************************************************************** 1554 */ 1555 @Test 1556 @SneakyThrows 1557 void fluxIntervalVirtualTimeTest() { 1558 VirtualTimeScheduler.getOrSet(); 1559 StepVerifier.withVirtualTime(this::getTake) 1560 .expectSubscription() 1561 .expectNoEvent(Duration.ofDays(1)) 1562 .thenAwait(Duration.ofDays(1)) 1563 .expectNext(0L) 1564 .thenAwait(Duration.ofDays(1)) 1565 .expectNext(1L) 1566 .thenCancel() 1567 .verify(); 1568 } 1569 1570 private Flux\u0026lt;Long\u0026gt; getTake() { 1571 return Flux.interval(Duration.ofDays(1)) 1572 .log() 1573 .take(10); 1574 } 1575 1576 /** 1577 * ******************************************************************** 1578 * then - will just replay the source terminal signal, resulting in a Mono\u0026lt;Void\u0026gt; to indicate that this never signals any onNext. 1579 * thenEmpty - not only returns a Mono\u0026lt;Void\u0026gt;, but it takes a Mono\u0026lt;Void\u0026gt; as a parameter. It represents a concatenation of the source completion signal then the second, empty Mono completion signal. In other words, it completes when A then B have both completed sequentially, and doesn\u0026#39;t emit data. 1580 * thenMany - waits for the source to complete then plays all the signals from its Publisher\u0026lt;R\u0026gt; parameter, resulting in a Flux\u0026lt;R\u0026gt; that will \u0026#34;pause\u0026#34; until the source completes, then emit the many elements from the provided publisher before replaying its completion signal as well. 1581 * ******************************************************************** 1582 */ 1583 @Test 1584 void thenManyChainTest() { 1585 Flux\u0026lt;String\u0026gt; names = Flux.just(\u0026#34;Jack\u0026#34;, \u0026#34;Jill\u0026#34;); 1586 names.map(String::toUpperCase) 1587 .thenMany(ReactorTest.deleteFromDb()) 1588 .thenMany(ReactorTest.saveToDb()) 1589 .subscribe(System.out::println); 1590 } 1591 1592 private static Flux\u0026lt;String\u0026gt; deleteFromDb() { 1593 return Flux.just(\u0026#34;Deleted from db\u0026#34;).log(); 1594 } 1595 1596 private static Flux\u0026lt;String\u0026gt; saveToDb() { 1597 return Flux.just(\u0026#34;Saved to db\u0026#34;).log(); 1598 } 1599 1600 private static Mono\u0026lt;Void\u0026gt; sendMail() { 1601 return Mono.empty(); 1602 } 1603 1604 @Test 1605 void thenEmptyTest() { 1606 Flux\u0026lt;String\u0026gt; names = Flux.just(\u0026#34;Jack\u0026#34;, \u0026#34;Jill\u0026#34;); 1607 names.map(String::toUpperCase) 1608 .thenMany(ReactorTest.saveToDb()) 1609 .thenEmpty(ReactorTest.sendMail()) 1610 .subscribe(System.out::println); 1611 } 1612 1613 @Test 1614 void thenTest() { 1615 Flux\u0026lt;String\u0026gt; names = Flux.just(\u0026#34;Jack\u0026#34;, \u0026#34;Jill\u0026#34;); 1616 names.map(String::toUpperCase) 1617 .thenMany(ReactorTest.saveToDb()) 1618 .then() 1619 .then(Mono.just(\u0026#34;Ram\u0026#34;)) 1620 .thenReturn(\u0026#34;Done!\u0026#34;) 1621 .subscribe(System.out::println); 1622 } 1623 1624 /** 1625 * ******************************************************************** 1626 * firstWithValue - first mono to return 1627 * ******************************************************************** 1628 */ 1629 @Test 1630 void monoFirstTest() { 1631 Mono\u0026lt;String\u0026gt; mono1 = Mono.just(\u0026#34;Jack\u0026#34;).delayElement(Duration.ofSeconds(1)); 1632 Mono\u0026lt;String\u0026gt; mono2 = Mono.just(\u0026#34;Jill\u0026#34;); 1633 //Return the mono which returns its value faster 1634 Mono\u0026lt;String\u0026gt; mono3 = Mono.firstWithValue(mono1, mono2); 1635 mono3.subscribe(System.out::println); 1636 StepVerifier.create(mono3) 1637 .expectNext(\u0026#34;Jill\u0026#34;) 1638 .verifyComplete(); 1639 } 1640 1641 /** 1642 * ******************************************************************** 1643 * buffer 1644 * ******************************************************************** 1645 */ 1646 @Test 1647 public void bufferGroupTest() { 1648 Flux\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; flux1 = Flux 1649 .range(1, 7) 1650 .buffer(2); 1651 StepVerifier 1652 .create(flux1) 1653 .expectNext(Arrays.asList(1, 2)) 1654 .expectNext(Arrays.asList(3, 4)) 1655 .expectNext(Arrays.asList(5, 6)) 1656 .expectNext(Arrays.asList(7)) 1657 .verifyComplete(); 1658 } 1659 1660 @Test 1661 @SneakyThrows 1662 public void tickClockTest() { 1663 Flux fastClock = Flux.interval(Duration.ofSeconds(1)).map(tick -\u0026gt; \u0026#34;fast tick \u0026#34; + tick); 1664 Flux slowClock = Flux.interval(Duration.ofSeconds(2)).map(tick -\u0026gt; \u0026#34;slow tick \u0026#34; + tick); 1665 Flux.merge(fastClock, slowClock).subscribe(System.out::println); 1666 TimeUnit.SECONDS.sleep(5); 1667 } 1668 1669 @Test 1670 @SneakyThrows 1671 public void tickMergeClockTest() { 1672 Flux fastClock = Flux.interval(Duration.ofSeconds(1)).map(tick -\u0026gt; \u0026#34;fast tick \u0026#34; + tick); 1673 Flux slowClock = Flux.interval(Duration.ofSeconds(2)).map(tick -\u0026gt; \u0026#34;slow tick \u0026#34; + tick); 1674 Flux clock = Flux.merge(slowClock, fastClock); 1675 Flux feed = Flux.interval(Duration.ofSeconds(1)).map(tick -\u0026gt; LocalTime.now()); 1676 clock.withLatestFrom(feed, (tick, time) -\u0026gt; tick + \u0026#34; \u0026#34; + time).subscribe(System.out::println); 1677 TimeUnit.SECONDS.sleep(15); 1678 } 1679 1680 @Test 1681 @SneakyThrows 1682 public void tickZipClockTest() { 1683 Flux fastClock = Flux.interval(Duration.ofSeconds(1)).map(tick -\u0026gt; \u0026#34;fast tick \u0026#34; + tick); 1684 Flux slowClock = Flux.interval(Duration.ofSeconds(2)).map(tick -\u0026gt; \u0026#34;slow tick \u0026#34; + tick); 1685 fastClock.zipWith(slowClock, (tick, time) -\u0026gt; tick + \u0026#34; \u0026#34; + time).subscribe(System.out::println); 1686 TimeUnit.SECONDS.sleep(5); 1687 } 1688 1689 @Test 1690 @SneakyThrows 1691 public void emitterTest() { 1692 MyFeed myFeed = new MyFeed(); 1693 Flux feedFlux = Flux.create(emmiter -\u0026gt; { 1694 myFeed.register(new MyListener() { 1695 @Override 1696 public void priceTick(String msg) { 1697 emmiter.next(msg); 1698 } 1699 1700 @Override 1701 public void error(Throwable error) { 1702 emmiter.error(error); 1703 } 1704 }); 1705 }, FluxSink.OverflowStrategy.LATEST); 1706 feedFlux.subscribe(System.out::println); 1707 TimeUnit.SECONDS.sleep(15); 1708 System.out.println(\u0026#34;Sending message!\u0026#34;); 1709 for (int i = 0; i \u0026lt; 10; i++) { 1710 myFeed.sendMessage(\u0026#34;HELLO_\u0026#34; + i); 1711 } 1712 } 1713 1714 /** 1715 * ******************************************************************** 1716 * cancel subscription 1717 * ******************************************************************** 1718 */ 1719 @Test 1720 void monoCancelSubscriptionTest() { 1721 Mono\u0026lt;String\u0026gt; helloMono = Mono.just(\u0026#34;Jack\u0026#34;) 1722 .log() 1723 .map(String::toUpperCase); 1724 helloMono.subscribe(s -\u0026gt; { 1725 log.info(\u0026#34;Got: {}\u0026#34;, s); 1726 }, 1727 Throwable::printStackTrace, 1728 () -\u0026gt; log.info(\u0026#34;Finished\u0026#34;), 1729 Subscription::cancel 1730 ); 1731 } 1732 1733 /** 1734 * ******************************************************************** 1735 * cancel subscription after n elements 1736 * ******************************************************************** 1737 */ 1738 @Test 1739 void monoCompleteSubscriptionRequestBoundedTest() { 1740 //Jill wont be fetched as subscription will be cancelled after 2 elements 1741 Flux\u0026lt;String\u0026gt; namesMono = Flux.just(\u0026#34;Jack\u0026#34;, \u0026#34;Jane\u0026#34;, \u0026#34;Jill\u0026#34;) 1742 .log() 1743 .map(String::toUpperCase); 1744 namesMono.subscribe(s -\u0026gt; { 1745 log.info(\u0026#34;Got: {}\u0026#34;, s); 1746 }, 1747 Throwable::printStackTrace, 1748 () -\u0026gt; log.info(\u0026#34;Finished\u0026#34;), 1749 subscription -\u0026gt; subscription.request(2)); 1750 } 1751 1752 /** 1753 * ******************************************************************** 1754 * backpressure 1755 * ******************************************************************** 1756 */ 1757 @Test 1758 void fluxBackPressureTest() { 1759 Flux\u0026lt;Integer\u0026gt; fluxNumber = Flux.range(1, 5).log(); 1760 1761 //Fetches 2 at a time. 1762 fluxNumber.subscribe(new BaseSubscriber\u0026lt;\u0026gt;() { 1763 private int count = 0; 1764 private final int requestCount = 2; 1765 1766 @Override 1767 protected void hookOnSubscribe(Subscription subscription) { 1768 request(requestCount); 1769 } 1770 1771 @Override 1772 protected void hookOnNext(Integer value) { 1773 count++; 1774 if (count \u0026gt;= requestCount) { 1775 count = 0; 1776 log.info(\u0026#34;requesting next batch!\u0026#34;); 1777 request(requestCount); 1778 } 1779 } 1780 }); 1781 } 1782 1783 /** 1784 * ******************************************************************** 1785 * onBackpressureDrop - fetches all in unbounded request, but stores in internal queue, drops elements not used 1786 * ******************************************************************** 1787 */ 1788 @Test 1789 void fluxBackPressureDropTest() { 1790 Flux\u0026lt;Integer\u0026gt; fluxNumber = Flux.range(1, 15).log(); 1791 1792 //Fetches 2 at a time. 1793 fluxNumber 1794 .onBackpressureDrop(item -\u0026gt; { 1795 log.info(\u0026#34;Dropped {}\u0026#34;, item); 1796 }) 1797 .subscribe(new BaseSubscriber\u0026lt;\u0026gt;() { 1798 private int count = 0; 1799 private final int requestCount = 2; 1800 private int batch = 0; 1801 1802 @Override 1803 protected void hookOnSubscribe(Subscription subscription) { 1804 request(requestCount); 1805 } 1806 1807 @Override 1808 protected void hookOnNext(Integer value) { 1809 if (batch \u0026gt; 2) { 1810 return; 1811 } 1812 count++; 1813 if (count \u0026gt;= requestCount) { 1814 count = 0; 1815 batch++; 1816 log.info(\u0026#34;requesting next batch {}\u0026#34;, batch); 1817 request(requestCount); 1818 } 1819 1820 } 1821 }); 1822 } 1823 1824 /** 1825 * ******************************************************************** 1826 * onBackpressureBuffer - fetches all in unbounded request, but stores in internal queue, but doesnt drop unused items 1827 * ******************************************************************** 1828 */ 1829 @Test 1830 void fluxBackPressureBuffetTest() { 1831 Flux\u0026lt;Integer\u0026gt; fluxNumber = Flux.range(1, 15).log(); 1832 1833 //Fetches 2 at a time. 1834 fluxNumber 1835 .onBackpressureBuffer() 1836 .subscribe(new BaseSubscriber\u0026lt;\u0026gt;() { 1837 private int count = 0; 1838 private final int requestCount = 2; 1839 private int batch = 0; 1840 1841 @Override 1842 protected void hookOnSubscribe(Subscription subscription) { 1843 request(requestCount); 1844 } 1845 1846 @Override 1847 protected void hookOnNext(Integer value) { 1848 if (batch \u0026gt; 2) { 1849 return; 1850 } 1851 count++; 1852 if (count \u0026gt;= requestCount) { 1853 count = 0; 1854 batch++; 1855 log.info(\u0026#34;requesting next batch {}\u0026#34;, batch); 1856 request(requestCount); 1857 } 1858 1859 } 1860 }); 1861 } 1862 1863 /** 1864 * ******************************************************************** 1865 * onBackpressureError - To identify if receiver is overrun by items as producer is producing more elements than can be processed. 1866 * ******************************************************************** 1867 */ 1868 @Test 1869 void fluxBackPressureOnErrorTest() { 1870 Flux\u0026lt;Integer\u0026gt; fluxNumber = Flux.range(1, 15).log(); 1871 1872 //Fetches 2 at a time. 1873 fluxNumber 1874 .onBackpressureError() 1875 .subscribe(new BaseSubscriber\u0026lt;\u0026gt;() { 1876 private int count = 0; 1877 private final int requestCount = 2; 1878 private int batch = 0; 1879 1880 @Override 1881 protected void hookOnSubscribe(Subscription subscription) { 1882 request(requestCount); 1883 } 1884 1885 @Override 1886 protected void hookOnError(Throwable throwable) { 1887 log.error(\u0026#34;Error thrown is: {}\u0026#34;, throwable.getMessage()); 1888 } 1889 1890 @Override 1891 protected void hookOnNext(Integer value) { 1892 if (batch \u0026gt; 2) { 1893 return; 1894 } 1895 count++; 1896 if (count \u0026gt;= requestCount) { 1897 count = 0; 1898 batch++; 1899 log.info(\u0026#34;requesting next batch {}\u0026#34;, batch); 1900 request(requestCount); 1901 } 1902 1903 } 1904 }); 1905 } 1906 1907 /** 1908 * ******************************************************************** 1909 * backpressure - limit rate 1910 * ******************************************************************** 1911 */ 1912 @Test 1913 void fluxBackPressureLimitRateTest() { 1914 Flux\u0026lt;Integer\u0026gt; fluxNumber = Flux.range(1, 5).log().limitRate(3); 1915 StepVerifier.create(fluxNumber) 1916 .expectNext(1, 2, 3, 4, 5) 1917 .verifyComplete(); 1918 } 1919 1920 /** 1921 * ******************************************************************** 1922 * hot flux 1923 * ******************************************************************** 1924 */ 1925 @Test 1926 @SneakyThrows 1927 void connectableFluxTest() { 1928 ConnectableFlux\u0026lt;Integer\u0026gt; connectableFlux = Flux.range(1, 10) 1929 .delayElements(Duration.ofSeconds(1)) 1930 .publish(); 1931 connectableFlux.connect(); 1932 1933 TimeUnit.SECONDS.sleep(3); 1934 connectableFlux.subscribe(i -\u0026gt; { 1935 log.info(\u0026#34;Sub1 Number: {}\u0026#34;, i); 1936 }); 1937 1938 TimeUnit.SECONDS.sleep(2); 1939 connectableFlux.subscribe(i -\u0026gt; { 1940 log.info(\u0026#34;Sub2 Number: {}\u0026#34;, i); 1941 }); 1942 1943 ConnectableFlux\u0026lt;Integer\u0026gt; connectableFlux2 = Flux.range(1, 10) 1944 .delayElements(Duration.ofSeconds(1)) 1945 .publish(); 1946 StepVerifier.create(connectableFlux2) 1947 .then(connectableFlux2::connect) 1948 .thenConsumeWhile(i -\u0026gt; i \u0026lt;= 5) 1949 .expectNext(6, 7, 8, 9, 10) 1950 .expectComplete() 1951 .verify(); 1952 } 1953 1954 /** 1955 * ******************************************************************** 1956 * hot flux - auto connect, min subscribers required before publisher emits 1957 * ******************************************************************** 1958 */ 1959 @Test 1960 @SneakyThrows 1961 void connectableAutoFluxTest() { 1962 //Hot Flux. 1963 Flux\u0026lt;Integer\u0026gt; connectableFlux = Flux.range(1, 5) 1964 .log() 1965 .delayElements(Duration.ofSeconds(1)) 1966 .publish() 1967 .autoConnect(2); 1968 1969 //2 subscribers 1970 StepVerifier.create(connectableFlux) 1971 .then(connectableFlux::subscribe) 1972 .expectNext(1, 2, 3, 4, 5) 1973 .expectComplete() 1974 .verify(); 1975 } 1976 1977 /** 1978 * ******************************************************************** 1979 * hot flux - ref count, if subscriber count goes down, publisher stops emitting 1980 * ******************************************************************** 1981 */ 1982 @Test 1983 @SneakyThrows 1984 void connectableRefCountTest() { 1985 //Hot Flux. 1986 Flux\u0026lt;Integer\u0026gt; connectableFlux = Flux.range(1, 15) 1987 .delayElements(Duration.ofSeconds(1)) 1988 .doOnCancel(() -\u0026gt; { 1989 log.info(\u0026#34;Received cancel\u0026#34;); 1990 }) 1991 .publish() 1992 .refCount(2); 1993 1994 //Min 2 subscribers required 1995 Disposable subscribe1 = connectableFlux.subscribe(e -\u0026gt; log.info(\u0026#34;Sub1: \u0026#34; + e)); 1996 Disposable subscribe2 = connectableFlux.subscribe(e -\u0026gt; log.info(\u0026#34;Sub2: \u0026#34; + e)); 1997 TimeUnit.SECONDS.sleep(3); 1998 subscribe1.dispose(); 1999 subscribe2.dispose(); 2000 TimeUnit.SECONDS.sleep(5); 2001 } 2002 2003 /** 2004 * ******************************************************************** 2005 * defer 2006 * ******************************************************************** 2007 */ 2008 @Test 2009 @SneakyThrows 2010 void deferTest() { 2011 Mono\u0026lt;Long\u0026gt; just = Mono.just(System.currentTimeMillis()); 2012 Mono\u0026lt;Long\u0026gt; deferJust = Mono.defer(() -\u0026gt; Mono.just(System.currentTimeMillis())); 2013 2014 just.subscribe(l -\u0026gt; log.info(\u0026#34;Time: {}\u0026#34;, l)); 2015 TimeUnit.SECONDS.sleep(2); 2016 just.subscribe(l -\u0026gt; log.info(\u0026#34;Time: {}\u0026#34;, l)); 2017 2018 deferJust.subscribe(l -\u0026gt; log.info(\u0026#34;Time: {}\u0026#34;, l)); 2019 TimeUnit.SECONDS.sleep(2); 2020 deferJust.subscribe(l -\u0026gt; log.info(\u0026#34;Time: {}\u0026#34;, l)); 2021 2022 } 2023 2024 /** 2025 * ******************************************************************** 2026 * combineLatest - will change order based on time. Rarely used. 2027 * ******************************************************************** 2028 */ 2029 @Test 2030 void combineLatestTest() { 2031 Flux\u0026lt;String\u0026gt; flux1 = Flux.just(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;); 2032 Flux\u0026lt;String\u0026gt; flux2 = Flux.just(\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;); 2033 Flux\u0026lt;String\u0026gt; flux3 = Flux.combineLatest(flux1, flux2, (s1, s2) -\u0026gt; s1 + s2) 2034 .log(); 2035 StepVerifier.create(flux3) 2036 .expectSubscription() 2037 .expectNext(\u0026#34;bc\u0026#34;, \u0026#34;bd\u0026#34;) 2038 .verifyComplete(); 2039 } 2040 2041 /** 2042 * ******************************************************************** 2043 * onSchedulersHook - if you have to use thread local 2044 * ******************************************************************** 2045 */ 2046 @Test 2047 public void schedulerHookTest() { 2048 Runnable stringCallable = () -\u0026gt; getName(); 2049 Schedulers.onScheduleHook(\u0026#34;myHook\u0026#34;, runnable -\u0026gt; { 2050 log.info(\u0026#34;before scheduled runnable\u0026#34;); 2051 return () -\u0026gt; { 2052 log.info(\u0026#34;before execution\u0026#34;); 2053 runnable.run(); 2054 log.info(\u0026#34;after execution\u0026#34;); 2055 }; 2056 }); 2057 Mono.just(\u0026#34;Hello world\u0026#34;) 2058 .subscribeOn(Schedulers.single()) 2059 .subscribe(System.out::println); 2060 } 2061 2062 /** 2063 * ******************************************************************** 2064 * checkpoint 2065 * ******************************************************************** 2066 */ 2067 @Test 2068 void checkpointTest() { 2069 Flux flux = Flux.just(\u0026#34;Jack\u0026#34;, \u0026#34;Jill\u0026#34;, \u0026#34;Joe\u0026#34;) 2070 .checkpoint(\u0026#34;before uppercase\u0026#34;) 2071 .map(e -\u0026gt; e.toUpperCase()) 2072 .checkpoint(\u0026#34;after uppercase\u0026#34;) 2073 .filter(e -\u0026gt; e.length() \u0026gt; 3) 2074 .checkpoint(\u0026#34;after filter\u0026#34;) 2075 .map(e -\u0026gt; new RuntimeException(\u0026#34;Custom error!\u0026#34;)); 2076 flux.subscribe(System.out::println); 2077 } 2078 2079 /** 2080 * ******************************************************************** 2081 * checkpoint 2082 * ******************************************************************** 2083 */ 2084 @Test 2085 void debugAgentTest() { 2086 ReactorDebugAgent.init(); 2087 ReactorDebugAgent.processExistingClasses(); 2088 Flux flux = Flux.just(\u0026#34;a\u0026#34;) 2089 .concatWith(Flux.error(new IllegalArgumentException(\u0026#34;My Error!\u0026#34;))) 2090 .onErrorMap(ex -\u0026gt; { 2091 log.error(\u0026#34;Exception: {}\u0026#34;, ex.getMessage()); 2092 return new IllegalStateException(\u0026#34;New Error!\u0026#34;); 2093 }); 2094 flux.subscribe(System.out::println); 2095 } 2096 2097 /** 2098 * ******************************************************************** 2099 * Flux.generate - programmatically create flux, synchronous 2100 * ******************************************************************** 2101 */ 2102 @Test 2103 void fluxGenerateTest() { 2104 Flux\u0026lt;Integer\u0026gt; flux = Flux.generate(() -\u0026gt; 1, (state, sink) -\u0026gt; { 2105 sink.next(state * 2); 2106 if (state == 10) { 2107 sink.complete(); 2108 } 2109 return state + 1; 2110 }); 2111 2112 flux.subscribe(System.out::println); 2113 2114 StepVerifier.create(flux) 2115 .expectNextCount(10) 2116 .verifyComplete(); 2117 } 2118 2119 /** 2120 * ******************************************************************** 2121 * Flux.create - programmatically create flux, asynchronous 2122 * ******************************************************************** 2123 */ 2124 @Test 2125 void fluxCreateTest() { 2126 List\u0026lt;String\u0026gt; names = Arrays.asList(\u0026#34;jack\u0026#34;, \u0026#34;jill\u0026#34;); 2127 Flux\u0026lt;String\u0026gt; flux = Flux.create(sink -\u0026gt; { 2128 names.forEach(sink::next); 2129 sink.complete(); 2130 }); 2131 2132 StepVerifier.create(flux) 2133 .expectNextCount(2) 2134 .verifyComplete(); 2135 } 2136 2137 private String getName() { 2138 return \u0026#34;John\u0026#34;; 2139 } 2140 2141} 2142 2143class MyFeed { 2144 2145 List\u0026lt;MyListener\u0026gt; listeners = new ArrayList\u0026lt;\u0026gt;(); 2146 2147 public void register(MyListener listener) { 2148 listeners.add(listener); 2149 } 2150 2151 public void sendMessage(String msg) { 2152 listeners.forEach(e -\u0026gt; { 2153 e.priceTick(msg); 2154 }); 2155 } 2156} 2157 2158interface MyListener { 2159 void priceTick(String msg); 2160 2161 void error(Throwable error); 2162} Reactor chaining samples\n1package com.demo.project83; 2 3import java.util.ArrayList; 4import java.util.List; 5 6import lombok.Builder; 7import lombok.Data; 8import lombok.extern.slf4j.Slf4j; 9import org.junit.jupiter.api.Test; 10import reactor.core.publisher.Mono; 11 12@Slf4j 13public class ReactorChainTest { 14 15 @Test 16 public void test() { 17 CompanyVO request = new CompanyVO(); 18 request.setName(\u0026#34;Twitter\u0026#34;); 19 Mono.just(request) 20 .map(ReactorChainTest::convertToEntity) 21 .zipWith(ReactorChainTest.getNameSuffix(), ReactorChainTest::appendSuffix) 22 .flatMap(ReactorChainTest::addCompanyOwner) 23 .flatMap(ReactorChainTest::appendOrgIdToDepartment) 24 .flatMap(ReactorChainTest::save) 25 .subscribe(System.out::println); 26 } 27 28 private static Company appendSuffix(Company company, String nameSuffix) { 29 company.setName(company.name + \u0026#34; \u0026#34; + nameSuffix); 30 return company; 31 } 32 33 private static Mono\u0026lt;String\u0026gt; getOwnerName() { 34 return Mono.just(\u0026#34;Jack\u0026#34;); 35 } 36 37 private static Mono\u0026lt;String\u0026gt; getOrgId() { 38 return Mono.just(\u0026#34;org1: \u0026#34;); 39 } 40 41 public static Company convertToEntity(CompanyVO companyVO) { 42 Company company = new Company(); 43 company.setName(companyVO.getName().toUpperCase()); 44 List\u0026lt;Department\u0026gt; departments = new ArrayList\u0026lt;\u0026gt;(); 45 departments.add(Department.builder().name(\u0026#34;department 1\u0026#34;).build()); 46 company.setDepartments(departments); 47 return company; 48 } 49 50 public static Mono\u0026lt;Company\u0026gt; save(Company company) { 51 log.info(\u0026#34;Saved to db!\u0026#34;); 52 return Mono.just(company); 53 } 54 55 public static Mono\u0026lt;Company\u0026gt; appendOrgIdToDepartment(Company company) { 56 return getOrgId().map(e -\u0026gt; { 57 company.getDepartments().forEach(d -\u0026gt; d.setName(e + \u0026#34; \u0026#34; + d.getName())); 58 return company; 59 }); 60 } 61 62 public static Mono\u0026lt;String\u0026gt; getNameSuffix() { 63 return Mono.just(\u0026#34;.Inc\u0026#34;); 64 } 65 66 public static Mono\u0026lt;Company\u0026gt; addCompanyOwner(Company company) { 67 return getOwnerName().map(e -\u0026gt; { 68 company.setOwner(e); 69 return company; 70 }); 71 } 72} 73 74@Data 75class CompanyVO { 76 String name; 77} 78 79@Data 80class Company { 81 String name; 82 List\u0026lt;Department\u0026gt; departments; 83 String owner; 84} 85 86@Data 87@Builder 88class Department { 89 String name; 90} Reactor object samples\n1package com.demo.project83; 2 3import static org.junit.jupiter.api.Assertions.assertEquals; 4 5import java.util.ArrayList; 6import java.util.List; 7import java.util.stream.Collectors; 8 9import lombok.AllArgsConstructor; 10import lombok.Builder; 11import lombok.Data; 12import lombok.NoArgsConstructor; 13import lombok.RequiredArgsConstructor; 14import lombok.extern.slf4j.Slf4j; 15import org.junit.jupiter.api.BeforeEach; 16import org.junit.jupiter.api.Test; 17import reactor.core.publisher.Flux; 18import reactor.core.publisher.GroupedFlux; 19import reactor.core.publisher.Mono; 20import reactor.test.StepVerifier; 21import reactor.util.function.Tuple2; 22import reactor.util.function.Tuples; 23 24@Slf4j 25public class ReactorObjectTest { 26 27 Flux\u0026lt;ProjectDTO\u0026gt; fluxFromRequest; 28 Flux\u0026lt;ProjectEntity\u0026gt; fluxFromDb; 29 30 @BeforeEach 31 public void setup() { 32 fluxFromRequest = Flux.just( 33 ProjectDTO.builder().name(\u0026#34;p3\u0026#34;).build(), 34 ProjectDTO.builder().name(\u0026#34;p1\u0026#34;).build(), 35 ProjectDTO.builder().name(\u0026#34;p5\u0026#34;).build() 36 ); 37 38 fluxFromDb = Flux.just( 39 ProjectEntity.builder().entityName(\u0026#34;p5\u0026#34;).build(), 40 ProjectEntity.builder().entityName(\u0026#34;p4\u0026#34;).build(), 41 ProjectEntity.builder().entityName(\u0026#34;p1\u0026#34;).build(), 42 ProjectEntity.builder().entityName(\u0026#34;p2\u0026#34;).build() 43 ); 44 } 45 46 @Test 47 void fluxIntersectCommonApproach1() { 48 Flux\u0026lt;ProjectEntity\u0026gt; commonFlux = fluxFromDb.filter(f -\u0026gt; { 49 //Inefficient 50 //Not for live stream or stream that can be subscribed only once. 51 //toSteam converts your non-blocking asynchronous flux to a blocking stream API which will impact performance 52 return fluxFromRequest.toStream().anyMatch(e -\u0026gt; e.getName().equals(f.getEntityName())); 53 }); 54 commonFlux.subscribe(System.out::println); 55 StepVerifier.create(commonFlux) 56 .expectNext(ProjectEntity.builder().entityName(\u0026#34;p5\u0026#34;).build()) 57 .expectNext(ProjectEntity.builder().entityName(\u0026#34;p1\u0026#34;).build()) 58 .verifyComplete(); 59 } 60 61 @Test 62 void fluxIntersectCommonApproach2() { 63 Flux\u0026lt;ProjectEntity\u0026gt; commonFlux = fluxFromRequest 64 .map(dto -\u0026gt; dto.getName()) 65 .collect(Collectors.toSet()) 66 .flatMapMany(set -\u0026gt; { 67 return fluxFromDb 68 //Filter out matching 69 //Limitation is that you can only compare 1 value collected in set. 70 .filter(t -\u0026gt; set.contains(t.getEntityName())); 71 }); 72 commonFlux.subscribe(System.out::println); 73 StepVerifier.create(commonFlux) 74 .expectNext(ProjectEntity.builder().entityName(\u0026#34;p5\u0026#34;).build()) 75 .expectNext(ProjectEntity.builder().entityName(\u0026#34;p1\u0026#34;).build()) 76 .verifyComplete(); 77 } 78 79 @Test 80 void fluxIntersectCommonApproach3() { 81 Flux\u0026lt;ProjectEntity\u0026gt; commonFlux = fluxFromDb.join(fluxFromRequest, s -\u0026gt; Flux.never(), s -\u0026gt; Flux.never(), Tuples::of) 82 //Filter out matching 83 .filter(t -\u0026gt; t.getT1().getEntityName().equals(t.getT2().getName())) 84 //Revert to single value 85 .map(Tuple2::getT1) 86 //Remove duplicates, if any 87 .groupBy(f -\u0026gt; f) 88 .map(GroupedFlux::key); 89 commonFlux.subscribe(System.out::println); 90 StepVerifier.create(commonFlux) 91 .expectNext(ProjectEntity.builder().entityName(\u0026#34;p1\u0026#34;).build()) 92 .expectNext(ProjectEntity.builder().entityName(\u0026#34;p5\u0026#34;).build()) 93 .verifyComplete(); 94 } 95 96 @Test 97 void postGetAllTest() { 98 DbService service = new DbService(); 99 Flux\u0026lt;Post\u0026gt; postFlux = service.getAllPosts() 100 .flatMap(post -\u0026gt; { 101 Mono\u0026lt;List\u0026lt;Comment\u0026gt;\u0026gt; commentMono = service.getCommentByPostId(post.id).collectList(); 102 return commentMono.map(comments -\u0026gt; Post.builder() 103 .id(post.id) 104 .message(post.message) 105 .user(post.user) 106 .comments(comments) 107 .build()); 108 }); 109 StepVerifier.create(postFlux) 110 .assertNext(post -\u0026gt; { 111 assertEquals(\u0026#34;post 1\u0026#34;, post.getMessage()); 112 assertEquals(1, post.getComments().size()); 113 }) 114 .assertNext(post -\u0026gt; { 115 assertEquals(\u0026#34;post 2\u0026#34;, post.getMessage()); 116 assertEquals(2, post.getComments().size()); 117 }) 118 .verifyComplete(); 119 } 120 121 @Test 122 void postGetByIdTest() { 123 DbService service = new DbService(); 124 Mono\u0026lt;List\u0026lt;Comment\u0026gt;\u0026gt; commentMono = service.getCommentByPostId(1l).collectList(); 125 Mono\u0026lt;Post\u0026gt; getByIdMono = service.getPostById(1l).zipWith(commentMono, (post, comments) -\u0026gt; { 126 return Post.builder() 127 .id(post.id) 128 .message(post.message) 129 .user(post.user) 130 .comments(comments) 131 .build(); 132 }); 133 StepVerifier.create(getByIdMono) 134 .assertNext(post -\u0026gt; { 135 assertEquals(\u0026#34;post 1\u0026#34;, post.getMessage()); 136 assertEquals(1, post.getComments().size()); 137 }) 138 .verifyComplete(); 139 } 140 141} 142 143@Data 144@Builder 145class ProjectDTO { 146 String name; 147 String someExtraField; 148} 149 150@Data 151@Builder 152class ProjectEntity { 153 String entityName; 154 String dbField; 155} 156 157@Data 158@AllArgsConstructor 159@NoArgsConstructor 160@Builder 161class Post { 162 Long id; 163 String message; 164 String user; 165 @Builder.Default 166 List\u0026lt;Comment\u0026gt; comments = new ArrayList\u0026lt;\u0026gt;(); 167} 168 169@Data 170@AllArgsConstructor 171@RequiredArgsConstructor 172@Builder 173class Comment { 174 Long id; 175 Long postId; 176 String comment; 177 String user; 178} 179 180class DbService { 181 Flux\u0026lt;Post\u0026gt; postFlux = Flux.fromIterable(List.of( 182 Post.builder().id(1l).message(\u0026#34;post 1\u0026#34;).user(\u0026#34;jack\u0026#34;).build(), 183 Post.builder().id(2l).message(\u0026#34;post 2\u0026#34;).user(\u0026#34;jill\u0026#34;).build())); 184 185 Flux\u0026lt;Comment\u0026gt; commentFlux = Flux.fromIterable(List.of( 186 Comment.builder().id(1l).postId(1l).comment(\u0026#34;comment 1\u0026#34;).user(\u0026#34;adam\u0026#34;).build(), 187 Comment.builder().id(2l).postId(2l).comment(\u0026#34;comment 2\u0026#34;).user(\u0026#34;jane\u0026#34;).build(), 188 Comment.builder().id(3l).postId(2l).comment(\u0026#34;comment 3\u0026#34;).user(\u0026#34;raj\u0026#34;).build())); 189 190 //Get all posts 191 Flux\u0026lt;Post\u0026gt; getAllPosts() { 192 return postFlux; 193 } 194 195 Mono\u0026lt;Post\u0026gt; getPostById(long id) { 196 //Take the first element in the flux. 197 return postFlux.filter(e -\u0026gt; e.id == id).next(); 198 } 199 200 //Get all reviews associated with the post. 201 Flux\u0026lt;Comment\u0026gt; getCommentByPostId(long id) { 202 return commentFlux.filter(e -\u0026gt; e.postId == id); 203 } 204} References https://projectreactor.io/\n","link":"https://gitorko.github.io/post/spring-reactor-basics/","section":"post","tags":["spring","spring-reactor"],"title":"Spring Reactor - Basics"},{"body":"","link":"https://gitorko.github.io/tags/spring-reactor/","section":"tags","tags":null,"title":"spring-reactor"},{"body":"","link":"https://gitorko.github.io/categories/spring-reactor/","section":"categories","tags":null,"title":"Spring-Reactor"},{"body":"Functional programming basics on how to use java lambda and functional interfaces\nGithub: https://github.com/gitorko/project83\nFunctional Programming Methods demonstrating use of functional programming\n1package com.demo.project83; 2 3import static java.util.Comparator.comparing; 4import static java.util.function.Predicate.not; 5import static java.util.stream.Collectors.collectingAndThen; 6import static java.util.stream.Collectors.filtering; 7import static java.util.stream.Collectors.groupingBy; 8import static java.util.stream.Collectors.mapping; 9import static java.util.stream.Collectors.maxBy; 10import static java.util.stream.Collectors.toList; 11import static java.util.stream.Collectors.toSet; 12import static org.junit.jupiter.api.Assertions.assertEquals; 13import static org.junit.jupiter.api.Assertions.assertThrows; 14 15import java.math.BigInteger; 16import java.util.ArrayList; 17import java.util.Arrays; 18import java.util.HashMap; 19import java.util.LinkedHashMap; 20import java.util.List; 21import java.util.Map; 22import java.util.Optional; 23import java.util.OptionalInt; 24import java.util.Set; 25import java.util.function.BiFunction; 26import java.util.function.BinaryOperator; 27import java.util.function.Consumer; 28import java.util.function.Function; 29import java.util.function.IntFunction; 30import java.util.function.Predicate; 31import java.util.function.Supplier; 32import java.util.function.UnaryOperator; 33import java.util.stream.Collectors; 34import java.util.stream.IntStream; 35import java.util.stream.Stream; 36 37import lombok.AllArgsConstructor; 38import lombok.Builder; 39import lombok.Data; 40import org.junit.jupiter.api.Test; 41 42public class FunctionalTest { 43 44 List\u0026lt;Customer\u0026gt; customerList = List.of( 45 Customer.builder().name(\u0026#34;Peter Parker\u0026#34;).city(\u0026#34;london\u0026#34;).age(32).build(), 46 Customer.builder().name(\u0026#34;Joe\u0026#34;).city(\u0026#34;paris\u0026#34;).age(28).build(), 47 Customer.builder().name(\u0026#34;Marie\u0026#34;).city(\u0026#34;rome\u0026#34;).age(31).build(), 48 Customer.builder().name(\u0026#34;Peter\u0026#34;).city(\u0026#34;rome\u0026#34;).age(30).build(), 49 Customer.builder().name(\u0026#34;Raj\u0026#34;).city(\u0026#34;delhi\u0026#34;).age(33).build(), 50 Customer.builder().name(\u0026#34;Simon\u0026#34;).city(\u0026#34;london\u0026#34;).age(26).build() 51 ); 52 53 /** 54 * ******************************************************************** 55 * Difference between imperative vs functional style 56 * ******************************************************************** 57 */ 58 @Test 59 public void imperativeVsFunctional() { 60 61 // Group all person by city in pre Java 8 world 62 Map\u0026lt;String, List\u0026lt;Customer\u0026gt;\u0026gt; personByCity1 = new HashMap\u0026lt;\u0026gt;(); 63 for (Customer p : customerList) { 64 if (!personByCity1.containsKey(p.getCity())) { 65 personByCity1.put(p.getCity(), new ArrayList\u0026lt;\u0026gt;()); 66 } 67 personByCity1.get(p.getCity()).add(p); 68 } 69 System.out.println(\u0026#34;Person grouped by cities : \u0026#34; + personByCity1); 70 assertEquals(2, personByCity1.get(\u0026#34;rome\u0026#34;).size()); 71 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 72 73 // Group objects in Java 8 74 Map\u0026lt;String, List\u0026lt;Customer\u0026gt;\u0026gt; personByCity2 = customerList.stream() 75 .collect(groupingBy(Customer::getCity)); 76 System.out.println(\u0026#34;Person grouped by cities in Java 8: \u0026#34; + personByCity2); 77 assertEquals(2, personByCity2.get(\u0026#34;rome\u0026#34;).size()); 78 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 79 80 // Now let\u0026#39;s group person by age 81 Map\u0026lt;Integer, List\u0026lt;Customer\u0026gt;\u0026gt; personByAge = customerList.stream().collect(groupingBy(Customer::getAge)); 82 System.out.println(\u0026#34;Person grouped by age in Java 8: \u0026#34; + personByAge); 83 assertEquals(1, personByAge.get(32).size()); 84 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 85 } 86 87 /** 88 * ******************************************************************** 89 * Predicate \u0026lt;T\u0026gt; - takes T returns boolean 90 * ******************************************************************** 91 */ 92 @Test 93 public void predicateTest() { 94 Predicate\u0026lt;String\u0026gt; strlen = (s) -\u0026gt; s.length() \u0026lt; 10; 95 assertEquals(strlen.test(\u0026#34;Apples\u0026#34;), true); 96 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 97 } 98 99 /** 100 * ******************************************************************** 101 * Runnable - takes nothing returns nothing 102 * ******************************************************************** 103 */ 104 @Test 105 public void runnableTest() { 106 Runnable emptyConsumer = () -\u0026gt; System.out.println(\u0026#34;run 1\u0026#34;); 107 emptyConsumer.run(); 108 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 109 } 110 111 /** 112 * ******************************************************************** 113 * Consumer \u0026lt;T\u0026gt; - takes T returns nothing 114 * ******************************************************************** 115 */ 116 @Test 117 public void consumerTest() { 118 Consumer\u0026lt;String\u0026gt; consumerStr = (s) -\u0026gt; System.out.println(s.toUpperCase()); 119 consumerStr.accept(\u0026#34;peter parker\u0026#34;); 120 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 121 122 Consumer\u0026lt;String\u0026gt; hello = name -\u0026gt; System.out.println(\u0026#34;Hello, \u0026#34; + name); 123 customerList.forEach(c -\u0026gt; hello.accept(c.getName())); 124 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 125 126 //example of a lambda made from an instance method 127 Consumer\u0026lt;String\u0026gt; print = System.out::println; 128 print.accept(\u0026#34;Sent directly from a lambda...\u0026#34;); 129 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 130 131 //As anonymous class, dont use this, provided for explanation only. 132 customerList.forEach(new Consumer\u0026lt;Customer\u0026gt;() { 133 @Override 134 public void accept(Customer customer) { 135 System.out.println(\u0026#34;Hello \u0026#34; + customer.getName()); 136 } 137 }); 138 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 139 140 } 141 142 /** 143 * ******************************************************************** 144 * Function \u0026lt;T,R\u0026gt; - takes T returns R 145 * ******************************************************************** 146 */ 147 @Test 148 public void functionTest() { 149 //Function example 150 Function\u0026lt;Integer, String\u0026gt; convertNumToString = (num) -\u0026gt; Integer.toString(num); 151 System.out.println(\u0026#34;String value is : \u0026#34; + convertNumToString.apply(26)); 152 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 153 154 //lambdas made using a constructor 155 Function\u0026lt;String, BigInteger\u0026gt; newBigInt = BigInteger::new; 156 System.out.println(\u0026#34;Number \u0026#34; + newBigInt.apply(\u0026#34;123456789\u0026#34;)); 157 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 158 } 159 160 /** 161 * ******************************************************************** 162 * Supplier \u0026lt;T\u0026gt; - takes nothing returns T 163 * ******************************************************************** 164 */ 165 @Test 166 public void supplierTest() { 167 Supplier\u0026lt;String\u0026gt; s = () -\u0026gt; \u0026#34;Message from supplier\u0026#34;; 168 System.out.println(s.get()); 169 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 170 } 171 172 /** 173 * ******************************************************************** 174 * BinaryOperator \u0026lt;T\u0026gt; - takes T,T returns T 175 * ******************************************************************** 176 */ 177 @Test 178 public void binaryOperatorTest() { 179 BinaryOperator\u0026lt;Integer\u0026gt; add = (a, b) -\u0026gt; a + b; 180 System.out.println(\u0026#34;add 10 + 25: \u0026#34; + add.apply(10, 25)); 181 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 182 } 183 184 /** 185 * ******************************************************************** 186 * UnaryOperator \u0026lt;T\u0026gt; - takes T returns T 187 * ******************************************************************** 188 */ 189 @Test 190 public void unaryOperatorTest() { 191 UnaryOperator\u0026lt;String\u0026gt; str = (msg) -\u0026gt; msg.toUpperCase(); 192 System.out.println(str.apply(\u0026#34;hello, Joe\u0026#34;)); 193 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 194 195 //same example but using the static method concat 196 UnaryOperator\u0026lt;String\u0026gt; greeting = x -\u0026gt; \u0026#34;Hello, \u0026#34;.concat(x); 197 System.out.println(greeting.apply(\u0026#34;Raj\u0026#34;)); 198 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 199 200 UnaryOperator\u0026lt;String\u0026gt; makeGreeting = \u0026#34;Hello, \u0026#34;::concat; 201 System.out.println(makeGreeting.apply(\u0026#34;Peggy\u0026#34;)); 202 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 203 } 204 205 /** 206 * ******************************************************************** 207 * BiFunction \u0026lt;T,R,S\u0026gt; - takes T,R returns S 208 * ******************************************************************** 209 */ 210 @Test 211 public void biFunctionTest() { 212 BiFunction\u0026lt;Integer, Boolean, String\u0026gt; concat = (a, b) -\u0026gt; a.toString() + b.toString(); 213 System.out.println(concat.apply(23, true)); 214 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 215 } 216 217 /** 218 * ******************************************************************** 219 * Custom Functional Interface 220 * ******************************************************************** 221 */ 222 @Test 223 public void functionalInterfaceTest() { 224 GreetingFunction greeting = message -\u0026gt; 225 System.out.println(\u0026#34;Java Programming \u0026#34; + message); 226 greeting.sayMessage(\u0026#34;is awesome\u0026#34;); 227 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 228 } 229 230 /** 231 * ******************************************************************** 232 * IntFunction\u0026lt;T\u0026gt; - takes integer returns T 233 * ******************************************************************** 234 */ 235 @Test 236 public void intFunctionTest() { 237 IntFunction\u0026lt;String\u0026gt; intToString = num -\u0026gt; Integer.toString(num); 238 System.out.println(\u0026#34;String value of number: \u0026#34; + intToString.apply(123)); 239 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 240 241 //static method reference 242 IntFunction\u0026lt;String\u0026gt; intToString2 = Integer::toString; 243 System.out.println(\u0026#34;String value of number: \u0026#34; + intToString2.apply(4567)); 244 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 245 } 246 247 /** 248 * ******************************************************************** 249 * Higher order function - pass functions as arguments 250 * ******************************************************************** 251 */ 252 @Test 253 public void higherOrderTest() { 254 //Function takes Integer,Predicate and returns Predicate 255 //Function\u0026lt;T,R\u0026gt; 256 Function\u0026lt;Integer, Predicate\u0026lt;String\u0026gt;\u0026gt; checkLength = (minLen) -\u0026gt; { 257 //predicate returned 258 return (str) -\u0026gt; str.length() \u0026gt; minLen; 259 }; 260 List\u0026lt;String\u0026gt; collect = customerList.stream() 261 .map(Customer::getName) 262 .filter(checkLength.apply(4)) 263 .collect(toList()); 264 collect.forEach(System.out::println); 265 assertEquals(4, collect.size()); 266 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 267 } 268 269 /** 270 * ******************************************************************** 271 * collect - toList, joining, toCollection 272 * ******************************************************************** 273 */ 274 @Test 275 public void collectTest() { 276 //Collect customers who are below 30. 277 List\u0026lt;Customer\u0026gt; result = customerList.stream() 278 .filter(e -\u0026gt; e.getAge() \u0026lt; 30) 279 .collect(toList()); 280 assertEquals(2, result.size()); 281 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 282 283 //get all employee names in List\u0026lt;String\u0026gt; 284 //Using toCollection you can specify the type 285 ArrayList\u0026lt;String\u0026gt; result2 = customerList.stream() 286 .map(e -\u0026gt; e.getName()) 287 .collect(Collectors.toCollection(ArrayList::new)); 288 assertEquals(6, result2.size()); 289 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 290 291 //Collect and join to single string separated by coma. 292 String customerString = customerList.stream() 293 .filter(e -\u0026gt; e.getAge() \u0026gt; 30) 294 .map(e -\u0026gt; e.getName()) 295 .collect(Collectors.joining(\u0026#34;, \u0026#34;)); 296 System.out.println(customerString); 297 assertEquals(\u0026#34;Peter Parker, Marie, Raj\u0026#34;, customerString); 298 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 299 300 } 301 302 /** 303 * ******************************************************************** 304 * collect - toMap 305 * ******************************************************************** 306 */ 307 @Test 308 void collectToMapTest() { 309 310 //Collect a map with name as key and age as value. 311 customerList.stream() 312 .filter(e -\u0026gt; e.getAge() \u0026gt; 30) 313 .collect(Collectors.toMap(Customer::getName, Customer::getAge)) 314 .forEach((k, v) -\u0026gt; System.out.println(k + \u0026#34;:\u0026#34; + v)); 315 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 316 317 //Collect a map by name + city as key customer as value 318 customerList.stream() 319 .collect(Collectors.toMap(c -\u0026gt; c.getName() + \u0026#34;-\u0026#34; + c.getCity(), c -\u0026gt; c)) 320 .forEach((k, v) -\u0026gt; System.out.println(k + \u0026#34;:\u0026#34; + v)); 321 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 322 } 323 324 /** 325 * ******************************************************************** 326 * collect - sort a Map by key or value 327 * ******************************************************************** 328 */ 329 @Test 330 public void sortMapTest() { 331 Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); 332 map.put(\u0026#34;Niraj\u0026#34;, 6); 333 map.put(\u0026#34;Rahul\u0026#34;, 43); 334 map.put(\u0026#34;Ram\u0026#34;, 44); 335 map.put(\u0026#34;Sham\u0026#34;, 33); 336 map.put(\u0026#34;Pratik\u0026#34;, 5); 337 map.put(\u0026#34;Ashok\u0026#34;, 5); 338 339 //Sort map by Value Ascending order 340 Map\u0026lt;String, Integer\u0026gt; sortedMapByValueAscending = map.entrySet() 341 .stream() 342 .sorted(Map.Entry.comparingByValue()) 343 .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -\u0026gt; e1, LinkedHashMap::new)); 344 System.out.println(sortedMapByValueAscending); 345 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 346 347 //Sort map by Value Descending order 348 Map\u0026lt;String, Integer\u0026gt; sortedMapByValueDescending = map.entrySet() 349 .stream() 350 .sorted(Map.Entry.\u0026lt;String, Integer\u0026gt;comparingByValue().reversed()) 351 .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -\u0026gt; e1, LinkedHashMap::new)); 352 System.out.println(sortedMapByValueDescending); 353 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 354 355 //Sort map by Key Ascending order 356 Map\u0026lt;String, Integer\u0026gt; sortedMapByKeyAscending 357 = map.entrySet() 358 .stream().sorted(Map.Entry.comparingByKey()) 359 .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -\u0026gt; e1, LinkedHashMap::new)); 360 System.out.println(sortedMapByKeyAscending); 361 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 362 363 //Sort map by Key Descending order 364 Map\u0026lt;String, Integer\u0026gt; sortedMapByKeyDescending 365 = map.entrySet() 366 .stream().sorted(Map.Entry.\u0026lt;String, Integer\u0026gt;comparingByKey().reversed()) 367 .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -\u0026gt; e1, LinkedHashMap::new)); 368 System.out.println(sortedMapByKeyDescending); 369 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 370 } 371 372 /** 373 * ******************************************************************** 374 * collect - summingInt, sum 375 * ******************************************************************** 376 */ 377 @Test 378 public void collectSumTest() { 379 //Sum all ages. 380 int total = customerList.stream() 381 .collect(Collectors.summingInt(Customer::getAge)); 382 assertEquals(total, 180); 383 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 384 385 int total2 = customerList.stream() 386 .mapToInt(Customer::getAge) 387 .sum(); 388 assertEquals(total2, 180); 389 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 390 } 391 392 /** 393 * ******************************************************************** 394 * sorted 395 * ******************************************************************** 396 */ 397 @Test 398 public void sortedTest() { 399 400 List\u0026lt;String\u0026gt; sortResult = customerList.stream() 401 .map(c -\u0026gt; c.getName()) 402 .sorted((a, b) -\u0026gt; b.compareTo(a)) 403 .collect(toList()); 404 sortResult.forEach(System.out::println); 405 406 //Avoid using the below as it modifies the orignial list. 407 //Collections.sort(customerList, (a, b) -\u0026gt; b.getName().compareTo(a.getName())); 408 409 List\u0026lt;String\u0026gt; expectedResult = List.of(\u0026#34;Simon\u0026#34;, \u0026#34;Raj\u0026#34;, \u0026#34;Peter Parker\u0026#34;, \u0026#34;Peter\u0026#34;, \u0026#34;Marie\u0026#34;, \u0026#34;Joe\u0026#34;); 410 assertEquals(expectedResult, sortResult); 411 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 412 413 } 414 415 /** 416 * ******************************************************************** 417 * filter 418 * ******************************************************************** 419 */ 420 @Test 421 public void filterTest() { 422 customerList.stream() 423 .filter(customer -\u0026gt; { 424 return customer.getName().startsWith(\u0026#34;P\u0026#34;); //predicate 425 }) 426 .forEach(System.out::println); 427 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 428 } 429 430 /** 431 * ******************************************************************** 432 * findFirst, ifPresent 433 * ******************************************************************** 434 */ 435 @Test 436 public void findFirstTest() { 437 customerList 438 .stream() 439 .filter(customer -\u0026gt; customer.getName().startsWith(\u0026#34;P\u0026#34;)) 440 .findFirst() 441 .ifPresent(System.out::println); 442 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 443 } 444 445 /** 446 * ******************************************************************** 447 * mapToInt, max, average, IntStream 448 * ******************************************************************** 449 */ 450 @Test 451 public void mapToIntTest() { 452 int sum = customerList.stream() 453 .mapToInt(Customer::getAge) 454 .sum(); 455 System.out.println(sum); 456 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 457 458 //primitive streams 459 IntStream.range(1, 4) 460 .forEach(System.out::println); 461 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 462 463 //find the average of the numbers squared 464 Arrays.stream(new int[]{1, 2, 3, 4}) 465 .map(n -\u0026gt; n * n) 466 .average() 467 .ifPresent(System.out::println); 468 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 469 470 //map doubles to ints 471 Stream.of(1.5, 2.3, 3.7) 472 .mapToInt(Double::intValue) 473 .forEach(System.out::println); 474 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 475 476 //max of age 477 OptionalInt max = customerList.stream() 478 .mapToInt(Customer::getAge) 479 .max(); 480 System.out.println(max.getAsInt()); 481 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 482 483 } 484 485 /** 486 * ******************************************************************** 487 * thenComparing - double sort, sort on name, then sort on age 488 * ******************************************************************** 489 */ 490 @Test 491 public void doubleSortTest() { 492 //Sort customer by name and then by age. 493 customerList.stream() 494 .sorted( 495 comparing(Customer::getName) 496 .thenComparing(Customer::getAge) 497 ) 498 .forEach(System.out::println); 499 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 500 } 501 502 /** 503 * ******************************************************************** 504 * flatMap 505 * ******************************************************************** 506 */ 507 @Test 508 public void flatMapTest() { 509 //Get chars of all customer names. 510 Set\u0026lt;String\u0026gt; collect = customerList.stream() 511 .map(Customer::getName) 512 .flatMap(name -\u0026gt; Stream.of(name.split(\u0026#34;\u0026#34;))) 513 .collect(toSet()); 514 System.out.println(collect); 515 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 516 517 //one to many 518 List\u0026lt;Integer\u0026gt; nums = List.of(1, 2, 3); 519 List\u0026lt;Integer\u0026gt; collect2 = nums.stream() 520 .flatMap(e -\u0026gt; List.of(e, e + 1).stream()) 521 .collect(toList()); 522 System.out.println(collect2); 523 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 524 } 525 526 /** 527 * ******************************************************************** 528 * collect - groupBy, mapping, filtering, counting 529 * ******************************************************************** 530 */ 531 @Test 532 public void groupByTest() { 533 534 //group by name and get list of customers with same name. 535 Map\u0026lt;String, List\u0026lt;Customer\u0026gt;\u0026gt; result1 = customerList.stream() 536 .collect(groupingBy(Customer::getName)); 537 System.out.println(result1); 538 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 539 540 //group by name and get list of ages if customer with same name. 541 Map\u0026lt;String, List\u0026lt;Integer\u0026gt;\u0026gt; result2 = customerList.stream() 542 .collect( 543 groupingBy(Customer::getName, 544 mapping(Customer::getAge, toList()))); 545 System.out.println(result2); 546 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 547 548 //Group by age, employees who name is greater than 4 chars. 549 Map\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt; result3 = customerList.stream() 550 .collect( 551 groupingBy(Customer::getAge, 552 mapping( 553 Customer::getName, 554 filtering(name -\u0026gt; name.length() \u0026gt; 4, toList()) 555 )) 556 ); 557 System.out.println(result3); 558 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 559 560 //group by age all customers name 561 Map\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt; result4 = customerList.stream() 562 .collect( 563 groupingBy(Customer::getAge, 564 mapping(Customer::getName, toList())) 565 ); 566 System.out.println(result4); 567 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 568 569 //count emp with same name. 570 Map\u0026lt;String, Long\u0026gt; result5 = customerList.stream() 571 .collect(groupingBy(Customer::getName, Collectors.counting())); 572 System.out.println(result5); 573 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 574 575 } 576 577 /** 578 * ******************************************************************** 579 * maxBy - comparing, collectingAndThen 580 * ******************************************************************** 581 */ 582 @Test 583 public void maxByTest() { 584 //emp with max age 585 Optional\u0026lt;Customer\u0026gt; maxEmp = customerList.stream() 586 .collect(maxBy(comparing(Customer::getAge))); 587 System.out.println(maxEmp.get()); 588 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 589 590 //emp with max age and print name instead of emp. 591 String result = customerList.stream() 592 .collect(collectingAndThen( 593 maxBy(comparing(Customer::getAge)), 594 e -\u0026gt; e.map(Customer::getName).orElse(\u0026#34;\u0026#34;) 595 ) 596 ); 597 System.out.println(result); 598 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 599 600 } 601 602 /** 603 * ******************************************************************** 604 * collectingAndThen 605 * ******************************************************************** 606 */ 607 @Test 608 public void collectingAndThenTest() { 609 //convert long to int. 610 Map\u0026lt;String, Integer\u0026gt; result = customerList.stream() 611 .collect(groupingBy(Customer::getName, 612 collectingAndThen(Collectors.counting(), 613 Long::intValue 614 ))); 615 System.out.println(result); 616 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 617 } 618 619 /** 620 * ******************************************************************** 621 * partitioningBy - same as groupBy but always partitions into 2 parts 622 * ******************************************************************** 623 */ 624 @Test 625 public void partitioningByTest() { 626 //2 list of even odd employees 627 Map\u0026lt;Boolean, List\u0026lt;Customer\u0026gt;\u0026gt; result = customerList.stream() 628 .collect(Collectors.partitioningBy(p -\u0026gt; p.getAge() % 2 == 0)); 629 System.out.println(result); 630 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 631 } 632 633 /** 634 * ******************************************************************** 635 * reduce 636 * ******************************************************************** 637 */ 638 @Test 639 public void reduceTest() { 640 List\u0026lt;Integer\u0026gt; numLst = Arrays.asList(1, 2, 3, 4, 5, 6); 641 642 //Sum of integer array. (both are param) 643 Integer reduce = numLst.stream().reduce(0, (total, val) -\u0026gt; Integer.sum(total, val)); 644 System.out.println(\u0026#34;reduce = \u0026#34; + reduce); 645 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 646 647 reduce = numLst.stream().reduce(0, Integer::sum); 648 System.out.println(\u0026#34;reduce = \u0026#34; + reduce); 649 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 650 651 //Concat of string. (one is target, one is param) 652 String concat = numLst.stream().map(String::valueOf).reduce(\u0026#34;\u0026#34;, (carry, str) -\u0026gt; carry.concat(str)); 653 System.out.println(\u0026#34;concat = \u0026#34; + concat); 654 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 655 656 concat = numLst.stream().map(String::valueOf).reduce(\u0026#34;\u0026#34;, String::concat); 657 System.out.println(\u0026#34;concat = \u0026#34; + concat); 658 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 659 660 Integer sum = numLst.stream().filter(e -\u0026gt; e % 2 == 0).map(e -\u0026gt; e * 2).reduce(0, Integer::sum); 661 System.out.println(\u0026#34;sum = \u0026#34; + sum); 662 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 663 664 Integer sum2 = numLst.stream().filter(e -\u0026gt; e % 2 == 0).mapToInt(e -\u0026gt; e * 2).sum(); 665 System.out.println(\u0026#34;sum2 = \u0026#34; + sum2); 666 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 667 668 //Use reduce to collect to a list. Given only to explain, use toList in real world. 669 customerList.stream() 670 .filter(e -\u0026gt; e.getAge() \u0026gt; 30) 671 .map(e -\u0026gt; e.getName()) 672 .map(String::toUpperCase) 673 .reduce(new ArrayList\u0026lt;String\u0026gt;(), (names, name) -\u0026gt; { 674 names.add(name); 675 return names; 676 }, 677 (names1, names2) -\u0026gt; { 678 names1.addAll(names2); 679 return names1; 680 } 681 ).forEach(System.out::println); 682 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 683 } 684 685 /** 686 * ******************************************************************** 687 * ifPresent - findAny 688 * ******************************************************************** 689 */ 690 @Test 691 public void ifPresentTest() { 692 String input = \u0026#34;key:a,key:b,key:c,key:d\u0026#34;; 693 Optional.ofNullable(input) 694 .ifPresent(in -\u0026gt; Arrays.stream(in.split(\u0026#34;,\u0026#34;)) 695 .map(String::toLowerCase) 696 .peek(System.out::println) 697 .filter(not(match -\u0026gt; (match.startsWith(\u0026#34;key\u0026#34;)))) 698 .findAny() 699 .ifPresent(match -\u0026gt; new RuntimeException(\u0026#34;Pattern not valid!\u0026#34;))); 700 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 701 702 String input2 = \u0026#34;key:a,key:b,:c,key:d\u0026#34;; 703 assertThrows(RuntimeException.class, () -\u0026gt; { 704 Optional.ofNullable(input2) 705 .ifPresent(in -\u0026gt; Arrays.stream(in.split(\u0026#34;,\u0026#34;)) 706 .map(String::toLowerCase) 707 .peek(System.out::println) 708 .filter(not(match -\u0026gt; (match.startsWith(\u0026#34;key\u0026#34;)))) 709 .findAny() 710 .ifPresent(match -\u0026gt; { 711 System.out.println(\u0026#34;Here!\u0026#34;); 712 throw new RuntimeException(\u0026#34;Pattern not valid!\u0026#34;); 713 })); 714 }); 715 System.out.println(\u0026#34;---------------------------------------------------\u0026#34;); 716 } 717 718} 719 720@Builder 721@AllArgsConstructor 722@Data 723class Customer { 724 public String name; 725 public String city; 726 public Integer age; 727} 728 729@FunctionalInterface 730interface GreetingFunction { 731 void sayMessage(String message); 732} References Java Lambda\n","link":"https://gitorko.github.io/post/functional-programming-basics/","section":"post","tags":["lambda","java8"],"title":"Functional Programming - Basics"},{"body":"","link":"https://gitorko.github.io/categories/functional-programming/","section":"categories","tags":null,"title":"Functional-Programming"},{"body":"","link":"https://gitorko.github.io/tags/java8/","section":"tags","tags":null,"title":"java8"},{"body":"","link":"https://gitorko.github.io/tags/lambda/","section":"tags","tags":null,"title":"lambda"},{"body":"","link":"https://gitorko.github.io/categories/angular/","section":"categories","tags":null,"title":"Angular"},{"body":"","link":"https://gitorko.github.io/tags/chart.js/","section":"tags","tags":null,"title":"chart.js"},{"body":"Spring boot web application with angular and JWT authentication support, uses clarity for UI components and chart.js for rendering charts. Creates uber jar to deploy.\nGithub: https://github.com/gitorko/project88\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project88 2cd project88 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nFeatures A Spring Boot application with angular 11. Supports basic integration with spring security \u0026amp; JWT and provides login \u0026amp; logout support. Spring dev tools allow seamless reload on any changes for java files.\nAngular 11 app supports basic login via JWT Clarity JWT token based Login CRUD UI for adding and removing customer Postgres db Spring JPA Chart.js charts for bar,pie,stack charts with data from rest api Design Wrong credentials\nUser role cant delete the record, only admin role can delete the record\nCode On Intellij to allow spring dev tools to reload on change you need to enable 'Update classes and resources' as shown below\nRest API return data that is rendered in angular frontend.\n1package com.demo.project88.controller; 2 3import java.util.Date; 4 5import com.demo.project88.domain.Customer; 6import com.demo.project88.repo.CustomerRepository; 7import lombok.RequiredArgsConstructor; 8import lombok.extern.slf4j.Slf4j; 9import org.springframework.security.access.prepost.PreAuthorize; 10import org.springframework.web.bind.annotation.DeleteMapping; 11import org.springframework.web.bind.annotation.GetMapping; 12import org.springframework.web.bind.annotation.PathVariable; 13import org.springframework.web.bind.annotation.PostMapping; 14import org.springframework.web.bind.annotation.RequestBody; 15import org.springframework.web.bind.annotation.RestController; 16 17@RestController 18@Slf4j 19@RequiredArgsConstructor 20public class HomeController { 21 22 final CustomerRepository customerRepo; 23 24 @GetMapping(value = \u0026#34;/api/time\u0026#34;) 25 public Date serverTime() { 26 log.info(\u0026#34;Getting server time!\u0026#34;); 27 return new Date(); 28 } 29 30 @GetMapping(value = \u0026#34;/api/customer\u0026#34;) 31 @PreAuthorize(\u0026#34;hasRole(\u0026#39;ROLE_USER\u0026#39;) or hasRole(\u0026#39;ROLE_ADMIN\u0026#39;)\u0026#34;) 32 public Iterable\u0026lt;Customer\u0026gt; getCustomers() { 33 return customerRepo.findAll(); 34 } 35 36 @PreAuthorize(\u0026#34;hasRole(\u0026#39;ROLE_ADMIN\u0026#39;)\u0026#34;) 37 @PostMapping(value = \u0026#34;/api/customer\u0026#34;) 38 public Customer saveCustomer(@RequestBody Customer customer) { 39 log.info(\u0026#34;Saving customer!\u0026#34;); 40 return customerRepo.save(customer); 41 } 42 43 @PreAuthorize(\u0026#34;hasRole(\u0026#39;ROLE_ADMIN\u0026#39;)\u0026#34;) 44 @DeleteMapping(value = \u0026#34;/api/customer/{id}\u0026#34;) 45 public void deleteCustomer(@PathVariable Long id) { 46 log.info(\u0026#34;Deleting customer: {}\u0026#34;, id); 47 customerRepo.deleteById(id); 48 } 49 50} JWT authentication configured.\n1package com.demo.project88.security; 2 3import com.demo.project88.service.UserDetailsServiceImpl; 4import lombok.RequiredArgsConstructor; 5import org.springframework.context.annotation.Bean; 6import org.springframework.context.annotation.Configuration; 7import org.springframework.http.HttpMethod; 8import org.springframework.security.authentication.AuthenticationManager; 9import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; 10import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity; 11import org.springframework.security.config.annotation.web.builders.HttpSecurity; 12import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; 13import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; 14import org.springframework.security.config.http.SessionCreationPolicy; 15import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; 16import org.springframework.security.crypto.password.PasswordEncoder; 17import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; 18 19@Configuration 20@EnableWebSecurity 21@EnableGlobalMethodSecurity(prePostEnabled = true) 22@RequiredArgsConstructor 23public class SecurityConfig extends WebSecurityConfigurerAdapter { 24 25 final UserDetailsServiceImpl userDetailsService; 26 final JwtAuthEntryPoint authenticationEntryPoint; 27 28 @Override 29 public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception { 30 authenticationManagerBuilder.userDetailsService(userDetailsService) 31 .passwordEncoder(passwordEncoder()); 32 } 33 34 @Bean 35 public PasswordEncoder passwordEncoder() { 36 return new BCryptPasswordEncoder(); 37 } 38 39 @Bean 40 @Override 41 public AuthenticationManager authenticationManagerBean() throws Exception { 42 return super.authenticationManagerBean(); 43 } 44 45 @Bean 46 public JwtTokenFilter jwtTokenFilter() { 47 return new JwtTokenFilter(); 48 } 49 50 @Override 51 protected void configure(HttpSecurity httpSecurity) throws Exception { 52 httpSecurity.cors().and().csrf().disable() 53 .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint).and() 54 .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and() 55 .authorizeRequests().antMatchers(\u0026#34;/api/auth/**\u0026#34;).permitAll() 56 .antMatchers(HttpMethod.GET, \u0026#34;/api/time\u0026#34;).permitAll() 57 .antMatchers(\u0026#34;/api/**\u0026#34;).authenticated() 58 .anyRequest().permitAll(); 59 httpSecurity.addFilterBefore(jwtTokenFilter(), UsernamePasswordAuthenticationFilter.class); 60 } 61} chart.js is a library that provides various charts, the project renders charts and the data is fetched from Rest API.\n1import { Component, OnInit } from \u0026#39;@angular/core\u0026#39;; 2import { RestService } from \u0026#39;../../services/rest.service\u0026#39;; 3import { ChartDataSets } from \u0026#39;chart.js\u0026#39;; 4import { Label, monkeyPatchChartJsLegend, monkeyPatchChartJsTooltip } from \u0026#39;ng2-charts\u0026#39;; 5import { Router } from \u0026#39;@angular/router\u0026#39;; 6 7@Component({ 8 selector: \u0026#39;app-chart\u0026#39;, 9 templateUrl: \u0026#39;./chart.component.html\u0026#39; 10}) 11export class ChartComponent implements OnInit { 12 13 pieData: ChartDataSets[] = []; 14 pieLabel: Label[] = []; 15 pieOptions: any; 16 17 barData: ChartDataSets[] = []; 18 barLabel: Label[] = []; 19 barOptions: any; 20 21 lineData: ChartDataSets[] = []; 22 lineLabel: Label[] = []; 23 lineOptions: any; 24 25 columnData: ChartDataSets[] = []; 26 columnLabel: Label[] = []; 27 columnOptions: any; 28 29 constructor(private restService: RestService, private router: Router) { 30 monkeyPatchChartJsTooltip(); 31 monkeyPatchChartJsLegend(); 32 } 33 34 ngOnInit(): void { 35 const backgroundColors = [ 36 \u0026#39;rgba(255, 99, 132, 0.2)\u0026#39;, 37 \u0026#39;rgba(255, 159, 64, 0.2)\u0026#39;, 38 \u0026#39;rgba(255, 205, 86, 0.2)\u0026#39;, 39 \u0026#39;rgba(75, 192, 192, 0.2)\u0026#39;, 40 \u0026#39;rgba(54, 162, 235, 0.2)\u0026#39;, 41 \u0026#39;rgba(153, 102, 255, 0.2)\u0026#39;, 42 \u0026#39;rgba(201, 203, 207, 0.2)\u0026#39; 43 ]; 44 const borderColors = [ 45 \u0026#39;rgb(255, 99, 132)\u0026#39;, 46 \u0026#39;rgb(255, 159, 64)\u0026#39;, 47 \u0026#39;rgb(255, 205, 86)\u0026#39;, 48 \u0026#39;rgb(75, 192, 192)\u0026#39;, 49 \u0026#39;rgb(54, 162, 235)\u0026#39;, 50 \u0026#39;rgb(153, 102, 255)\u0026#39;, 51 \u0026#39;rgb(201, 203, 207)\u0026#39; 52 ]; 53 54 this.pieOptions = { 55 title: { 56 display: true, 57 text: \u0026#39;Pie Chart\u0026#39; 58 }, 59 responsive: true, 60 maintainAspectRatio: false, 61 scales: { 62 yAxes: [{ 63 ticks: { 64 beginAtZero: true 65 } 66 }] 67 } 68 }; 69 70 this.barOptions = { 71 title: { 72 display: true, 73 text: \u0026#39;Bar Chart\u0026#39; 74 }, 75 responsive: true, 76 maintainAspectRatio: false, 77 scales: { 78 yAxes: [{ 79 ticks: { 80 beginAtZero: true 81 } 82 }] 83 } 84 }; 85 86 this.lineOptions = { 87 title: { 88 display: true, 89 text: \u0026#39;Line Chart\u0026#39; 90 }, 91 responsive: true, 92 maintainAspectRatio: false, 93 scales: { 94 yAxes: [{ 95 ticks: { 96 beginAtZero: true 97 } 98 }] 99 } 100 }; 101 102 this.columnOptions = { 103 title: { 104 display: true, 105 text: \u0026#39;Column Chart\u0026#39; 106 }, 107 responsive: true, 108 maintainAspectRatio: false, 109 scales: { 110 x: { 111 stacked: true, 112 }, 113 y: { 114 stacked: true 115 } 116 } 117 }; 118 119 this.restService.getPieData().subscribe(data =\u0026gt; { 120 this.pieData = [ 121 { data: data[1], label: \u0026#39;Pie Chart\u0026#39;, backgroundColor: backgroundColors, borderColor: borderColors, borderWidth: 1 }, 122 ]; 123 this.pieLabel = data[0]; 124 }); 125 126 this.restService.getPieData().subscribe(data =\u0026gt; { 127 this.barData = [ 128 { data: data[1], label: \u0026#39;Bar Chart\u0026#39;, backgroundColor: backgroundColors, borderColor: borderColors, borderWidth: 1 }, 129 ]; 130 this.barLabel = data[0]; 131 }); 132 133 this.restService.getPieData().subscribe(data =\u0026gt; { 134 this.lineData = [ 135 { data: data[1], label: \u0026#39;Line Chart\u0026#39;, backgroundColor: backgroundColors, borderColor: borderColors, borderWidth: 1 }, 136 ]; 137 this.lineLabel = data[0]; 138 }); 139 140 this.restService.getColumnData().subscribe(data =\u0026gt; { 141 this.columnData = [ 142 { 143 data: data[1].data, 144 label: data[1].name, 145 backgroundColor: backgroundColors[0], 146 borderColor: borderColors[0], 147 borderWidth: 1, 148 fill: false 149 }, 150 { 151 data: data[2].data, 152 label: data[2].name, 153 backgroundColor: backgroundColors[1], 154 borderColor: borderColors[1], 155 borderWidth: 1, 156 fill: false 157 }, 158 { 159 data: data[3].data, 160 label: data[3].name, 161 backgroundColor: backgroundColors[2], 162 borderColor: borderColors[2], 163 borderWidth: 1, 164 fill: false 165 } 166 ]; 167 this.columnLabel = data[0].data; 168 }); 169 } 170 171} 1\u0026lt;div class=\u0026#34;content-container\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;content-area\u0026#34;\u0026gt; 3 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 4 \u0026lt;div class=\u0026#34;clr-col-6\u0026#34;\u0026gt; 5 \u0026lt;canvas baseChart [datasets]=\u0026#34;pieData\u0026#34; [labels]=\u0026#34;pieLabel\u0026#34; [options]=\u0026#34;pieOptions\u0026#34; [chartType]=\u0026#34;\u0026#39;pie\u0026#39;\u0026#34; 6 width=\u0026#34;200\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt; 7 \u0026lt;/canvas\u0026gt; 8 \u0026lt;/div\u0026gt; 9 \u0026lt;div class=\u0026#34;clr-col-6\u0026#34;\u0026gt; 10 \u0026lt;canvas baseChart [datasets]=\u0026#34;barData\u0026#34; [labels]=\u0026#34;barLabel\u0026#34; [options]=\u0026#34;barOptions\u0026#34; [chartType]=\u0026#34;\u0026#39;bar\u0026#39;\u0026#34; 11 width=\u0026#34;200\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt; 12 \u0026lt;/canvas\u0026gt; 13 \u0026lt;/div\u0026gt; 14 \u0026lt;/div\u0026gt; 15 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 16 \u0026lt;div class=\u0026#34;clr-col-6\u0026#34;\u0026gt; 17 \u0026lt;canvas baseChart [datasets]=\u0026#34;lineData\u0026#34; [labels]=\u0026#34;lineLabel\u0026#34; [options]=\u0026#34;lineOptions\u0026#34; [chartType]=\u0026#34;\u0026#39;line\u0026#39;\u0026#34; 18 width=\u0026#34;200\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt; 19 \u0026lt;/canvas\u0026gt; 20 \u0026lt;/div\u0026gt; 21 \u0026lt;div class=\u0026#34;clr-col-6\u0026#34;\u0026gt; 22 \u0026lt;canvas baseChart [datasets]=\u0026#34;columnData\u0026#34; [labels]=\u0026#34;columnLabel\u0026#34; [options]=\u0026#34;columnOptions\u0026#34; [chartType]=\u0026#34;\u0026#39;bar\u0026#39;\u0026#34; 23 width=\u0026#34;200\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt; 24 \u0026lt;/canvas\u0026gt; 25 \u0026lt;/div\u0026gt; 26 \u0026lt;/div\u0026gt; 27 \u0026lt;/div\u0026gt; 28\u0026lt;/div\u0026gt; 29 1import { NgModule } from \u0026#39;@angular/core\u0026#39;; 2import { RouterModule, Routes } from \u0026#39;@angular/router\u0026#39;; 3import { HomeComponent } from \u0026#39;./components/home/home.component\u0026#39;; 4import { LoginComponent } from \u0026#39;./components/login/login.component\u0026#39;; 5import { ChartComponent } from \u0026#39;./components/chart/chart.component\u0026#39;; 6import { AuthGuard } from \u0026#39;./shared/auth.guard\u0026#39;; 7 8const routes: Routes = [ 9 { path: \u0026#39;\u0026#39;, redirectTo: \u0026#39;home\u0026#39;, pathMatch: \u0026#39;full\u0026#39;, canActivate: [AuthGuard] }, 10 { path: \u0026#39;home\u0026#39;, component: HomeComponent, canActivate: [AuthGuard] }, 11 { path: \u0026#39;login\u0026#39;, component: LoginComponent }, 12 { path: \u0026#39;logout\u0026#39;, component: LoginComponent }, 13 { path: \u0026#39;charts\u0026#39;, component: ChartComponent, canActivate: [AuthGuard] }, 14]; 15 16@NgModule({ 17 imports: [RouterModule.forRoot(routes, { useHash: true })], 18 exports: [RouterModule] 19}) 20 21export class AppRoutingModule { 22} 1\u0026lt;div class=\u0026#34;content-container\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;content-area\u0026#34;\u0026gt; 3 4 \u0026lt;div class=\u0026#34;clr-row\u0026#34;\u0026gt; 5 6 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 7 \u0026lt;div class=\u0026#34;alert-section\u0026#34;\u0026gt; 8 \u0026lt;app-alert\u0026gt;\u0026lt;/app-alert\u0026gt; 9 \u0026lt;/div\u0026gt; 10 11 \u0026lt;p style=\u0026#34;text-align: center\u0026#34;\u0026gt; 12 \u0026lt;!-- interpolation \u0026amp; pipe --\u0026gt; 13 Server Time: {{currentTime | date:\u0026#39;dd-MM-yyyy\u0026#39; }} 14 \u0026lt;/p\u0026gt; 15 16 \u0026lt;h2 style=\u0026#34;text-align: center\u0026#34;\u0026gt;Customers\u0026lt;/h2\u0026gt; 17 18 \u0026lt;clr-datagrid\u0026gt; 19 \u0026lt;clr-dg-placeholder class=\u0026#34;content-center\u0026#34;\u0026gt;No Customers!\u0026lt;/clr-dg-placeholder\u0026gt; 20 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;id\u0026#39;\u0026#34;\u0026gt;ID\u0026lt;/clr-dg-column\u0026gt; 21 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;firstName\u0026#39;\u0026#34;\u0026gt;First Name\u0026lt;/clr-dg-column\u0026gt; 22 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;lastName\u0026#39;\u0026#34;\u0026gt;Last Name\u0026lt;/clr-dg-column\u0026gt; 23 \u0026lt;clr-dg-column [clrDgField]=\u0026#34;\u0026#39;city\u0026#39;\u0026#34;\u0026gt;City\u0026lt;/clr-dg-column\u0026gt; 24 \u0026lt;clr-dg-column\u0026gt;Action\u0026lt;/clr-dg-column\u0026gt; 25 \u0026lt;!-- structural directive --\u0026gt; 26 \u0026lt;clr-dg-row clr-dg-row *clrDgItems=\u0026#34;let customer of customers\u0026#34;\u0026gt; 27 \u0026lt;clr-dg-cell\u0026gt;{{customer.id}}\u0026lt;/clr-dg-cell\u0026gt; 28 \u0026lt;clr-dg-cell\u0026gt;{{customer.firstName}}\u0026lt;/clr-dg-cell\u0026gt; 29 \u0026lt;clr-dg-cell\u0026gt;{{customer.lastName}}\u0026lt;/clr-dg-cell\u0026gt; 30 \u0026lt;clr-dg-cell\u0026gt;{{customer.city}}\u0026lt;/clr-dg-cell\u0026gt; 31 \u0026lt;clr-dg-cell\u0026gt; 32 \u0026lt;cds-icon shape=\u0026#34;trash\u0026#34; style=\u0026#34;cursor: pointer; color: blue\u0026#34; (click)=\u0026#34;deleteCustomer(customer)\u0026#34;\u0026gt; 33 \u0026lt;/cds-icon\u0026gt; 34 \u0026lt;/clr-dg-cell\u0026gt; 35 \u0026lt;/clr-dg-row\u0026gt; 36 \u0026lt;clr-dg-footer\u0026gt; 37 \u0026lt;clr-dg-pagination #pagination [clrDgPageSize]=\u0026#34;10\u0026#34;\u0026gt; 38 \u0026lt;clr-dg-page-size [clrPageSizeOptions]=\u0026#34;[10,20,50,100]\u0026#34;\u0026gt;Customers per page\u0026lt;/clr-dg-page-size\u0026gt; 39 {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} customers 40 \u0026lt;/clr-dg-pagination\u0026gt; 41 \u0026lt;/clr-dg-footer\u0026gt; 42 \u0026lt;/clr-datagrid\u0026gt; 43 44 \u0026lt;div class=\u0026#34;clr-col-12\u0026#34;\u0026gt; 45 \u0026lt;!-- template driven form--\u0026gt; 46 \u0026lt;form class=\u0026#34;clr-form clr-form-horizontal\u0026#34; (ngSubmit)=\u0026#34;saveCustomer()\u0026#34;\u0026gt; 47 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 48 \u0026lt;label for=\u0026#34;firstName\u0026#34; class=\u0026#34;clr-control-label\u0026#34;\u0026gt;First Name\u0026lt;/label\u0026gt; 49 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 50 \u0026lt;div class=\u0026#34;clr-input-wrapper\u0026#34;\u0026gt; 51 \u0026lt;!-- two way data binding --\u0026gt; 52 \u0026lt;input type=\u0026#34;text\u0026#34; [(ngModel)]=\u0026#34;customer.firstName\u0026#34; id=\u0026#34;firstName\u0026#34; name=\u0026#34;firstName\u0026#34; 53 placeholder=\u0026#34;Firt Name\u0026#34; class=\u0026#34;clr-input\u0026#34;/\u0026gt; 54 \u0026lt;/div\u0026gt; 55 \u0026lt;/div\u0026gt; 56 \u0026lt;/div\u0026gt; 57 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 58 \u0026lt;label for=\u0026#34;lastName\u0026#34; class=\u0026#34;clr-control-label\u0026#34;\u0026gt;Last Name\u0026lt;/label\u0026gt; 59 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 60 \u0026lt;div class=\u0026#34;clr-input-wrapper\u0026#34;\u0026gt; 61 \u0026lt;input [(ngModel)]=\u0026#34;customer.lastName\u0026#34; type=\u0026#34;text\u0026#34; id=\u0026#34;lastName\u0026#34; name=\u0026#34;lastName\u0026#34; 62 placeholder=\u0026#34;Last Name\u0026#34; class=\u0026#34;clr-input\u0026#34;/\u0026gt; 63 \u0026lt;/div\u0026gt; 64 \u0026lt;/div\u0026gt; 65 \u0026lt;/div\u0026gt; 66 \u0026lt;div class=\u0026#34;clr-form-control\u0026#34;\u0026gt; 67 \u0026lt;div class=\u0026#34;clr-control-container\u0026#34;\u0026gt; 68 \u0026lt;!-- event binding --\u0026gt; 69 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; [disabled]=\u0026#34;\u0026#34;\u0026gt;Save\u0026lt;/button\u0026gt; 70 \u0026lt;/div\u0026gt; 71 \u0026lt;/div\u0026gt; 72 \u0026lt;/form\u0026gt; 73 \u0026lt;/div\u0026gt; 74 75 \u0026lt;/div\u0026gt; 76 \u0026lt;/div\u0026gt; 77 \u0026lt;/div\u0026gt; 78\u0026lt;/div\u0026gt; 1import {Component, OnInit, ViewChild} from \u0026#39;@angular/core\u0026#39;; 2import {Customer} from \u0026#39;../../models/customer\u0026#39;; 3import {RestService} from \u0026#39;../../services/rest.service\u0026#39;; 4import {Router} from \u0026#39;@angular/router\u0026#39;; 5import {ClarityIcons, trashIcon} from \u0026#39;@cds/core/icon\u0026#39;; 6import {AlertComponent} from \u0026#34;../alert/alert.component\u0026#34;; 7 8@Component({ 9 selector: \u0026#39;app-home\u0026#39;, 10 templateUrl: \u0026#39;./home.component.html\u0026#39;, 11 styleUrls: [] 12}) 13export class HomeComponent implements OnInit { 14 15 customers: Customer[] = []; 16 customer: Customer = new Customer(); 17 currentTime = \u0026#39;\u0026#39;; 18 // @ts-ignore 19 @ViewChild(AlertComponent, {static: true}) private alert: AlertComponent; 20 21 constructor(private restService: RestService, private router: Router) { 22 ClarityIcons.addIcons(trashIcon); 23 } 24 25 ngOnInit(): void { 26 this.getCustomers(); 27 } 28 29 getCustomers(): void { 30 this.customer = new Customer(); 31 this.restService.getTime().subscribe(data =\u0026gt; { 32 this.currentTime = data; 33 }); 34 this.restService.getCustomers().subscribe(data =\u0026gt; { 35 this.customers = data; 36 }); 37 } 38 39 saveCustomer(): void { 40 this.restService.saveCustomer(this.customer) 41 .subscribe(data =\u0026gt; { 42 this.alert.showSuccess(\u0026#39;Saved customer: \u0026#39; + this.customer.firstName); 43 this.getCustomers(); 44 }, error =\u0026gt; { 45 this.alert.showError(\u0026#39;Forbidden!\u0026#39;); 46 console.log(error); 47 }); 48 } 49 50 deleteCustomer(customer: Customer): void { 51 console.log(\u0026#39;delete: \u0026#39; + customer.id); 52 this.restService.deleteCustomer(customer.id) 53 .subscribe(data =\u0026gt; { 54 this.alert.showSuccess(\u0026#39;Deleted customer: \u0026#39; + customer.id); 55 this.getCustomers(); 56 }, error =\u0026gt; { 57 this.alert.showError(\u0026#39;Forbidden!\u0026#39;); 58 console.log(error); 59 }); 60 } 61} For older versions of spring boot that dont redirect to index.html add this mapping to the controller.\n1import javax.servlet.http.HttpServletRequest; 2 3import org.springframework.stereotype.Controller; 4import org.springframework.web.bind.annotation.RequestMapping; 5 6@Controller 7public class IndexController { 8 9 @RequestMapping(value = {\u0026#34;/\u0026#34;, \u0026#34;/{x:[\\\\w\\\\-]+}\u0026#34;, \u0026#34;/{x:^(?!api$).*$}/**/{y:[\\\\w\\\\-]+}\u0026#34;}) 10 public String getIndex(HttpServletRequest request) { 11 return \u0026#34;/index.html\u0026#34;; 12 } 13} Setup Project 88 SpringBoot Web, JWT, Angular, Clarity, Authentication, Authorization, Postgres, Charts\nhttps://gitorko.github.io/spring-boot-angular/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4node --version 5v16.16.0 6 7yarn --version 81.22.18 Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the backend in dev mode.\n1./gradlew clean build 2./gradlew bootRun To Run UI in dev mode\n1cd ui 2yarn install 3yarn build 4yarn start Open http://localhost:3000\nProd To run as a single jar, both UI and backend are bundled to single uber jar.\n1./gradlew cleanBuild 2cd build/libs 3java -jar project88-1.0.0.jar Open http://localhost:8080/\n1user: admin 2pwd: admin@123 3 4user: user 5pwd: user@123 Docker 1./gradlew cleanBuild 2docker build -f docker/Dockerfile --force-rm -t project88:1.0.0 . 3docker images |grep project88 4docker tag project88:1.0.0 gitorko/project88:1.0.0 5docker push gitorko/project88:1.0.0 6docker-compose -f docker/docker-compose.yml up Testing 1curl --location --request POST \u0026#39;http://localhost:8080/api/auth/login\u0026#39; \\ 2--header \u0026#39;Content-Type: application/json\u0026#39; \\ 3--data-raw \u0026#39;{ 4 \u0026#34;username\u0026#34;: \u0026#34;admin\u0026#34;, 5 \u0026#34;password\u0026#34;: \u0026#34;admin@123\u0026#34; 6}\u0026#39; 1curl --location --request GET \u0026#39;http://localhost:8080/api/time\u0026#39; 1curl --location --request GET \u0026#39;http://localhost:8080/api/customer\u0026#39; \\ 2--header \u0026#39;Authorization: Bearer \u0026lt;TOKEN\u0026gt;\u0026#39; References https://clarity.design/\nhttps://www.chartjs.org/\n","link":"https://gitorko.github.io/post/spring-boot-angular/","section":"post","tags":["spring","angular","chart.js","jpa","clarity","jwt"],"title":"Spring Boot - Angular"},{"body":"","link":"https://gitorko.github.io/tags/hsqldb/","section":"tags","tags":null,"title":"hsqldb"},{"body":"Spring MVC application with Thymeleaf template \u0026amp; basic spring security support, uses bootstrap for CSS and chart.js for rendering charts. Creates uber jar to deploy.\nGithub: https://github.com/gitorko/project79\nQuick Overview To deploy the application in a single command, clone the project, make sure no conflicting docker containers or ports are running and then run\n1git clone https://github.com/gitorko/project79 2cd project79 3docker-compose -f docker/docker-compose.yml up Open http://localhost:8080/\nFeatures A Spring Web MVC application that renders thymeleaf templates as HTML. Supports basic integration with spring security and provides login logout support. Uses Spring Data to persist data into the HSQL db. A file based HSQL server db is used so that data persists across restarts. This can easily be changed to in-memory HSQL db. Spring dev tools allow seamless reload on any changes for html and java files so you can view the changes in the browser as soon as you edit them.\nSupports basic login via spring security Bootstrap 5 Login screen CRUD UI for adding and removing customer HSQL db Spring JPA Thymeleaf template Chart.js charts for bar,pie,stack charts with data from rest api Design Code On Intellij to allow spring dev tools to reload on change you need to enable 'Update classes and resources' as shown below\nSpring MVC controller renders the HTML.\n1package com.demo.project79.controller; 2 3import java.security.Principal; 4import java.util.Date; 5 6import javax.websocket.server.PathParam; 7 8import com.demo.project79.domain.Customer; 9import com.demo.project79.repo.CustomerRepository; 10import lombok.RequiredArgsConstructor; 11import lombok.extern.slf4j.Slf4j; 12import org.springframework.beans.factory.annotation.Autowired; 13import org.springframework.stereotype.Controller; 14import org.springframework.ui.Model; 15import org.springframework.web.bind.annotation.GetMapping; 16import org.springframework.web.bind.annotation.PathVariable; 17import org.springframework.web.bind.annotation.PostMapping; 18import org.springframework.web.bind.annotation.RequestParam; 19import org.springframework.web.servlet.mvc.support.RedirectAttributes; 20 21@Controller 22@Slf4j 23@RequiredArgsConstructor 24public class HomeController { 25 26 @Autowired 27 CustomerRepository customerRepo; 28 29 @GetMapping(value = \u0026#34;/\u0026#34;) 30 public String home(Model model) { 31 Iterable\u0026lt;Customer\u0026gt; customerLst = customerRepo.findAll(); 32 model.addAttribute(\u0026#34;customerLst\u0026#34;, customerLst); 33 model.addAttribute(\u0026#34;serverTime\u0026#34;, new Date()); 34 return \u0026#34;home\u0026#34;; 35 } 36 37 @PostMapping(value = \u0026#34;/save\u0026#34;) 38 public String customerSave(@RequestParam(value = \u0026#34;firstName\u0026#34;) String firstName, @RequestParam(value = \u0026#34;lastName\u0026#34;) String lastName, 39 Model model, RedirectAttributes redirAttrs, Principal principal) { 40 log.info(\u0026#34;Name: \u0026#34; + firstName); 41 Customer customer = new Customer(); 42 customer.setFirstName(firstName); 43 customer.setLastName(lastName); 44 customerRepo.save(customer); 45 redirAttrs.addFlashAttribute(\u0026#34;successMsg\u0026#34;, \u0026#34;Successfully added user by: \u0026#34; + principal.getName()); 46 return \u0026#34;redirect:/\u0026#34;; 47 } 48 49 @GetMapping(value = \u0026#34;/delete/{id}\u0026#34;) 50 public String customerSave(@PathVariable Long id, RedirectAttributes redirAttrs, Principal principal) { 51 log.info(\u0026#34;User {} deleted by {}\u0026#34;, id, principal.getName()); 52 customerRepo.deleteById(id); 53 redirAttrs.addFlashAttribute(\u0026#34;successMsg\u0026#34;, \u0026#34;Deleted user: \u0026#34; + id); 54 return \u0026#34;redirect:/\u0026#34;; 55 } 56 57 @GetMapping(value = \u0026#34;/charts\u0026#34;) 58 public String chartsHome(Model model) { 59 return \u0026#34;charts\u0026#34;; 60 } 61 62} Spring Security is configured for BASIC authentication\n1package com.demo.project79.config; 2 3import org.springframework.context.annotation.Configuration; 4import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; 5import org.springframework.security.config.annotation.web.builders.HttpSecurity; 6import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; 7import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; 8import org.springframework.security.crypto.factory.PasswordEncoderFactories; 9import org.springframework.security.crypto.password.PasswordEncoder; 10 11@Configuration 12@EnableWebSecurity 13public class WebSecurityConfig extends WebSecurityConfigurerAdapter { 14 15 public static final String USER_ROLE = \u0026#34;ADMIN\u0026#34;; 16 public static final String USER_NAME = \u0026#34;admin\u0026#34;; 17 public static final String USER_PASSWORD = \u0026#34;admin@123\u0026#34;; 18 19 @Override 20 protected void configure(HttpSecurity http) throws Exception { 21 http 22 .csrf().disable() 23 .authorizeRequests() 24 .antMatchers(\u0026#34;/\u0026#34;, \u0026#34;/home\u0026#34;, \u0026#34;/rest/**\u0026#34;).permitAll() 25 .antMatchers(\u0026#34;/js/**\u0026#34;, \u0026#34;/css/**\u0026#34;, \u0026#34;/images/**\u0026#34;).permitAll() 26 .anyRequest().authenticated() 27 .and() 28 .formLogin() 29 .loginPage(\u0026#34;/login\u0026#34;) 30 .permitAll() 31 .and() 32 .logout() 33 .permitAll(); 34 } 35 36 @Override 37 protected void configure(AuthenticationManagerBuilder auth) throws Exception { 38 PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder(); 39 auth.inMemoryAuthentication() 40 .withUser(USER_NAME) 41 .password(encoder.encode(USER_PASSWORD)) 42 .roles(USER_ROLE); 43 } 44} chart.js is a library that provides various charts, the project renders charts and the data is fetched from Rest API.\n1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34; xmlns:th=\u0026#34;https://www.thymeleaf.org\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;div th:replace=\u0026#34;fragments/general :: include-frag\u0026#34;/\u0026gt; 5 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/chart.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 6 \u0026lt;script src=\u0026#34;js/charts.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 7\u0026lt;/head\u0026gt; 8\u0026lt;body\u0026gt; 9 10\u0026lt;div th:replace=\u0026#34;fragments/general :: menu-frag\u0026#34;/\u0026gt; 11 12\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 13 \u0026lt;div th:replace=\u0026#34;fragments/general :: flash-message-frag\u0026#34;/\u0026gt; 14 \u0026lt;br/\u0026gt; 15 \u0026lt;br/\u0026gt; 16 \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; 17 \u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt; 18 \u0026lt;canvas id=\u0026#34;piechartContainer\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; 19 \u0026lt;/div\u0026gt; 20 \u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt; 21 \u0026lt;canvas id=\u0026#34;barchartContainer\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; 22 \u0026lt;/div\u0026gt; 23 \u0026lt;/div\u0026gt; 24 \u0026lt;br/\u0026gt; 25 \u0026lt;br/\u0026gt; 26 \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; 27 \u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt; 28 \u0026lt;canvas id=\u0026#34;linechartContainer\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; 29 \u0026lt;/div\u0026gt; 30 \u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt; 31 \u0026lt;canvas id=\u0026#34;stackchartContainer\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;300\u0026#34;\u0026gt;\u0026lt;/canvas\u0026gt; 32 \u0026lt;/div\u0026gt; 33 \u0026lt;/div\u0026gt; 34\u0026lt;/div\u0026gt; 35 36\u0026lt;/body\u0026gt; 37\u0026lt;/html\u0026gt; 1$(function() { 2 3 var backgroundColors = [ 4 \u0026#39;rgba(255, 99, 132, 0.2)\u0026#39;, 5 \u0026#39;rgba(255, 159, 64, 0.2)\u0026#39;, 6 \u0026#39;rgba(255, 205, 86, 0.2)\u0026#39;, 7 \u0026#39;rgba(75, 192, 192, 0.2)\u0026#39;, 8 \u0026#39;rgba(54, 162, 235, 0.2)\u0026#39;, 9 \u0026#39;rgba(153, 102, 255, 0.2)\u0026#39;, 10 \u0026#39;rgba(201, 203, 207, 0.2)\u0026#39; 11 ]; 12 13 var borderColors = [ 14 \u0026#39;rgb(255, 99, 132)\u0026#39;, 15 \u0026#39;rgb(255, 159, 64)\u0026#39;, 16 \u0026#39;rgb(255, 205, 86)\u0026#39;, 17 \u0026#39;rgb(75, 192, 192)\u0026#39;, 18 \u0026#39;rgb(54, 162, 235)\u0026#39;, 19 \u0026#39;rgb(153, 102, 255)\u0026#39;, 20 \u0026#39;rgb(201, 203, 207)\u0026#39; 21 ]; 22 23 $.getJSON(\u0026#34;/rest/pie-data\u0026#34;, function(json) { 24 new Chart(document.getElementById(\u0026#34;piechartContainer\u0026#34;), { 25 type: \u0026#39;pie\u0026#39;, 26 data: { 27 labels: json[0], 28 datasets: [{ 29 backgroundColor: backgroundColors, 30 borderColor: borderColors, 31 borderWidth: 1, 32 hoverOffset: 4, 33 data: json[1] 34 }] 35 }, 36 options: { 37 title: { 38 display: true, 39 text: \u0026#39;Pie Chart\u0026#39; 40 }, 41 responsive: true, 42 maintainAspectRatio: false, 43 scales: { 44 yAxes: [{ 45 ticks: { 46 beginAtZero:true 47 } 48 }] 49 } 50 } 51 }); 52 }); 53 54 $.getJSON(\u0026#34;/rest/pie-data\u0026#34;, function(json) { 55 new Chart(document.getElementById(\u0026#34;barchartContainer\u0026#34;), { 56 type: \u0026#39;bar\u0026#39;, 57 data: { 58 labels: json[0], 59 datasets: [{ 60 label: \u0026#39;My First Dataset\u0026#39;, 61 backgroundColor: backgroundColors, 62 borderColor: borderColors, 63 borderWidth: 1, 64 hoverOffset: 4, 65 data: json[1] 66 }] 67 }, 68 options: { 69 title: { 70 display: true, 71 text: \u0026#39;Bar Chart\u0026#39; 72 }, 73 responsive: true, 74 maintainAspectRatio: false, 75 scales: { 76 yAxes: [{ 77 ticks: { 78 beginAtZero:true 79 } 80 }] 81 } 82 } 83 }); 84 }); 85 86 $.getJSON(\u0026#34;/rest/pie-data\u0026#34;, function(json) { 87 new Chart(document.getElementById(\u0026#34;linechartContainer\u0026#34;), { 88 type: \u0026#39;line\u0026#39;, 89 data: { 90 labels: json[0], 91 datasets: [{ 92 label: \u0026#39;My First Dataset\u0026#39;, 93 backgroundColor: backgroundColors, 94 borderColor: borderColors, 95 fill: false, 96 borderWidth: 1, 97 hoverOffset: 4, 98 data: json[1] 99 }] 100 }, 101 options: { 102 title: { 103 display: true, 104 text: \u0026#39;Line Chart\u0026#39; 105 }, 106 responsive: true, 107 maintainAspectRatio: false, 108 scales: { 109 yAxes: [{ 110 ticks: { 111 beginAtZero:true 112 } 113 }] 114 } 115 } 116 }); 117 }); 118 119 $.getJSON(\u0026#34;/rest/column-data\u0026#34;, function(json) { 120 new Chart(document.getElementById(\u0026#34;stackchartContainer\u0026#34;), { 121 type: \u0026#39;bar\u0026#39;, 122 data: { 123 labels: json[0][\u0026#34;data\u0026#34;], 124 datasets: [{ 125 label: json[1][\u0026#34;name\u0026#34;], 126 backgroundColor: backgroundColors[0], 127 borderColor: borderColors[0], 128 fill: false, 129 borderWidth: 1, 130 hoverOffset: 4, 131 data: json[1][\u0026#34;data\u0026#34;] 132 },{ 133 label: json[2][\u0026#34;name\u0026#34;], 134 backgroundColor: backgroundColors[1], 135 borderColor: borderColors[1], 136 fill: false, 137 borderWidth: 1, 138 hoverOffset: 4, 139 data: json[2][\u0026#34;data\u0026#34;] 140 },{ 141 label: json[3][\u0026#34;name\u0026#34;], 142 backgroundColor: backgroundColors[2], 143 borderColor: borderColors[2], 144 fill: false, 145 borderWidth: 1, 146 hoverOffset: 4, 147 data: json[3][\u0026#34;data\u0026#34;] 148 }] 149 }, 150 options: { 151 title: { 152 display: true, 153 text: \u0026#39;Stack Chart\u0026#39; 154 }, 155 responsive: true, 156 maintainAspectRatio: false, 157 scales: { 158 x: { 159 stacked: true, 160 }, 161 y: { 162 stacked: true 163 } 164 } 165 } 166 }); 167 }); 168 169}); 1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34; xmlns:th=\u0026#34;https://www.thymeleaf.org\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;div th:replace=\u0026#34;fragments/general :: include-frag\u0026#34;/\u0026gt; 5 \u0026lt;script src=\u0026#34;js/home.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 9\u0026lt;div th:replace=\u0026#34;fragments/general :: menu-frag\u0026#34;/\u0026gt; 10 11\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 12 \u0026lt;div th:replace=\u0026#34;fragments/general :: flash-message-frag\u0026#34;/\u0026gt; 13 14 \u0026lt;form method=\u0026#34;post\u0026#34; th:action=\u0026#34;@{/save}\u0026#34; role=\u0026#34;form\u0026#34; class=\u0026#34;form-horizontal\u0026#34;\u0026gt; 15 \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; 16 \u0026lt;div class=\u0026#34;col text-center\u0026#34;\u0026gt; 17 \u0026lt;p class=\u0026#34;text-end\u0026#34; th:inline=\u0026#34;text\u0026#34;\u0026gt;Current Date : [[${serverTime}]]\u0026lt;/p\u0026gt; 18 \u0026lt;/div\u0026gt; 19 \u0026lt;/div\u0026gt; 20 \u0026lt;br/\u0026gt; 21 22 \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; 23 \u0026lt;div class=\u0026#34;col text-center\u0026#34;\u0026gt; 24 \u0026lt;h2\u0026gt;Customers\u0026lt;/h2\u0026gt; 25 \u0026lt;/div\u0026gt; 26 \u0026lt;/div\u0026gt; 27 \u0026lt;br/\u0026gt; 28 29 \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; 30 \u0026lt;div class=\u0026#34;col-4\u0026#34;\u0026gt; 31 \u0026lt;form\u0026gt; 32 \u0026lt;div class=\u0026#34;mb-3\u0026#34;\u0026gt; 33 \u0026lt;label for=\u0026#34;firstName\u0026#34; class=\u0026#34;form-label\u0026#34;\u0026gt;First Name\u0026lt;/label\u0026gt; 34 \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;firstName\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;firstName\u0026#34; aria-describedby=\u0026#34;nameHelp\u0026#34;\u0026gt; 35 \u0026lt;div id=\u0026#34;nameHelp\u0026#34; class=\u0026#34;form-text\u0026#34;\u0026gt;Enter your name!\u0026lt;/div\u0026gt; 36 \u0026lt;/div\u0026gt; 37 \u0026lt;div class=\u0026#34;mb-3\u0026#34;\u0026gt; 38 \u0026lt;label for=\u0026#34;lastName\u0026#34; class=\u0026#34;form-label\u0026#34;\u0026gt;Last Name\u0026lt;/label\u0026gt; 39 \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;lastName\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;lastName\u0026#34;\u0026gt; 40 \u0026lt;/div\u0026gt; 41 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; 42 \u0026lt;/form\u0026gt; 43 \u0026lt;/div\u0026gt; 44 \u0026lt;div class=\u0026#34;col-8\u0026#34;\u0026gt; 45 \u0026lt;table id=\u0026#34;customer-table\u0026#34; class=\u0026#34;table table-striped table-bordered\u0026#34; style=\u0026#34;width:100%\u0026#34;\u0026gt; 46 \u0026lt;thead\u0026gt; 47 \u0026lt;tr\u0026gt; 48 \u0026lt;th\u0026gt; 49 First Name 50 \u0026lt;/th\u0026gt; 51 \u0026lt;th\u0026gt; 52 Last Name 53 \u0026lt;/th\u0026gt; 54 \u0026lt;th\u0026gt; 55 Action 56 \u0026lt;/th\u0026gt; 57 \u0026lt;/tr\u0026gt; 58 \u0026lt;/thead\u0026gt; 59 \u0026lt;tbody\u0026gt; 60 \u0026lt;tr th:each=\u0026#34;customer: ${customerLst}\u0026#34;\u0026gt; 61 \u0026lt;td th:inline=\u0026#34;text\u0026#34;\u0026gt;[[${customer.firstName}]]\u0026lt;/td\u0026gt; 62 \u0026lt;td th:inline=\u0026#34;text\u0026#34;\u0026gt;[[${customer.lastName}]]\u0026lt;/td\u0026gt; 63 \u0026lt;td\u0026gt;\u0026lt;a th:href=\u0026#34;@{\u0026#39;/delete/\u0026#39; + ${customer.id}}\u0026#34;\u0026lt;i class=\u0026#34;bi bi-trash\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/td\u0026gt; 64 \u0026lt;/tr\u0026gt; 65 \u0026lt;/tbody\u0026gt; 66 67 \u0026lt;/table\u0026gt; 68 \u0026lt;/div\u0026gt; 69 \u0026lt;/div\u0026gt; 70 71 \u0026lt;/form\u0026gt; 72\u0026lt;/div\u0026gt; 73 74\u0026lt;/body\u0026gt; 75\u0026lt;/html\u0026gt; 1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34; xmlns:th=\u0026#34;https://www.thymeleaf.org\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;div th:replace=\u0026#34;fragments/general :: include-frag\u0026#34;/\u0026gt; 5\u0026lt;/head\u0026gt; 6\u0026lt;body\u0026gt; 7 8\u0026lt;div th:replace=\u0026#34;fragments/general :: login-menu-frag\u0026#34;/\u0026gt; 9 10\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 11 \u0026lt;form method=\u0026#34;post\u0026#34; th:action=\u0026#34;@{/login}\u0026#34; role=\u0026#34;form\u0026#34; class=\u0026#34;form-horizontal\u0026#34; style=\u0026#34;max-width: 400px; margin: auto\u0026#34;\u0026gt; 12 \u0026lt;br/\u0026gt; 13 \u0026lt;br/\u0026gt; 14 \u0026lt;h2\u0026gt;Login\u0026lt;/h2\u0026gt; 15 16 \u0026lt;div class=\u0026#34;mb-3\u0026#34;\u0026gt; 17 \u0026lt;label for=\u0026#34;exampleInputEmail1\u0026#34; class=\u0026#34;form-label\u0026#34;\u0026gt;Username\u0026lt;/label\u0026gt; 18 \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;exampleInputEmail1\u0026#34; aria-describedby=\u0026#34;usernameHelp\u0026#34;\u0026gt; 19 \u0026lt;div id=\u0026#34;usernameHelp\u0026#34; class=\u0026#34;form-text\u0026#34;\u0026gt;Enter ldap username.\u0026lt;/div\u0026gt; 20 \u0026lt;/div\u0026gt; 21 \u0026lt;div class=\u0026#34;mb-3\u0026#34;\u0026gt; 22 \u0026lt;label for=\u0026#34;exampleInputPassword1\u0026#34; class=\u0026#34;form-label\u0026#34;\u0026gt;Password\u0026lt;/label\u0026gt; 23 \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;exampleInputPassword1\u0026#34;\u0026gt; 24 \u0026lt;/div\u0026gt; 25 \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#34;btn btn-primary\u0026#34; style=\u0026#34;width:100%\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; 26 27 \u0026lt;br/\u0026gt; 28 \u0026lt;br/\u0026gt; 29 30 \u0026lt;div th:if=\u0026#34;${param.logout}\u0026#34; class=\u0026#34;alert alert-success\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; 31 You have been logged out 32 \u0026lt;/div\u0026gt; 33 \u0026lt;div th:if=\u0026#34;${param.error}\u0026#34; class=\u0026#34;alert alert-danger\u0026#34; role=\u0026#34;alert\u0026#34;\u0026gt; 34 Invalid username and password! 35 \u0026lt;/div\u0026gt; 36 \u0026lt;/form\u0026gt; 37 38\u0026lt;/div\u0026gt; 39 40\u0026lt;/body\u0026gt; 41\u0026lt;/html\u0026gt; Setup Project 79 Spring Boot MVC Web project Thymeleaf, Login, Charts\nhttps://gitorko.github.io/spring-boot-thymeleaf/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the code.\n1./gradlew clean build 2./gradlew bootRun Prod To build the uber jar \u0026amp; run the jar.\n1./gradlew clean build 2cd build/libs 3java -jar project79-1.0.0.jar Open http://localhost:8080/\n1user: admin 2pwd: admin@123 Docker 1./gradlew clean build 2docker build -f docker/Dockerfile --force-rm -t project79:1.0.0 . 3docker images |grep project79 4docker tag project79:1.0.0 gitorko/project79:1.0.0 5docker push gitorko/project79:1.0.0 6docker-compose -f docker/docker-compose.yml up References https://getbootstrap.com/\nhttps://www.chartjs.org/\n","link":"https://gitorko.github.io/post/spring-boot-thymeleaf/","section":"post","tags":["spring-security","bootstrap","hsqldb","JPA","chart.js","thymeleaf"],"title":"Spring Boot - Thymeleaf"},{"body":"","link":"https://gitorko.github.io/tags/thymeleaf/","section":"tags","tags":null,"title":"thymeleaf"},{"body":"","link":"https://gitorko.github.io/categories/web/","section":"categories","tags":null,"title":"Web"},{"body":"","link":"https://gitorko.github.io/tags/checkstyle/","section":"tags","tags":null,"title":"checkstyle"},{"body":"","link":"https://gitorko.github.io/tags/code-coverage/","section":"tags","tags":null,"title":"code-coverage"},{"body":"","link":"https://gitorko.github.io/tags/hot-swap/","section":"tags","tags":null,"title":"hot-swap"},{"body":"","link":"https://gitorko.github.io/tags/openapi/","section":"tags","tags":null,"title":"openapi"},{"body":"","link":"https://gitorko.github.io/tags/vscode/","section":"tags","tags":null,"title":"vscode"},{"body":"","link":"https://gitorko.github.io/categories/vscode/","section":"categories","tags":null,"title":"VSCode"},{"body":"VSCode is free, open source IDE. We look at some of the tips and tricks to work with VSCode for java developers\nGithub: https://github.com/gitorko/project61\nVSCode Feature 1: Explore Git Clone \u0026amp; Spring Init commands You can use the command palette (Ctrl+Shift+P) to clone repositories, or create new projects using start.spring.io integration.\nFeature 2: Explore Java language support Use language support to avoid typing main: 'public static void main' or sysout: 'System.out.println'\nFeature 3: Explore the Gradle Exentison View the gradle tasks\nGradle Extension Pack\nFeature 4: Hide files you dont wish to view Add this to settings.json\n1\u0026#34;files.exclude\u0026#34;: { 2 \u0026#34;**/.classpath\u0026#34;: true, 3 \u0026#34;**/.DS_Store\u0026#34;: true, 4 \u0026#34;**/.factorypath\u0026#34;: true, 5 \u0026#34;**/.git\u0026#34;: true, 6 \u0026#34;**/.gitignore\u0026#34;: true, 7 \u0026#34;**/.gradle\u0026#34;: true, 8 \u0026#34;**/.hg\u0026#34;: true, 9 \u0026#34;**/.mvn\u0026#34;: true, 10 \u0026#34;**/.project\u0026#34;: true, 11 \u0026#34;**/.settings\u0026#34;: true, 12 \u0026#34;**/.sts4-cache\u0026#34;: true, 13 \u0026#34;**/.svn\u0026#34;: true, 14 \u0026#34;**/.vscode\u0026#34;: true, 15 \u0026#34;**/.idea\u0026#34;: true, 16 \u0026#34;**/out\u0026#34;: true, 17 \u0026#34;**/bin\u0026#34;: true, 18 \u0026#34;**/build\u0026#34;: true, 19 \u0026#34;**/CVS\u0026#34;: true, 20 \u0026#34;**/gradle\u0026#34;: true, 21 \u0026#34;**/target\u0026#34;: true, 22 \u0026#34;**/.attach_pid*\u0026#34;: true, 23 \u0026#34;**/logs\u0026#34;: true 24} Feature 5: Replace tabs with white spaces Add this to settings.json\n1\u0026#34;editor.renderWhitespace\u0026#34;: \u0026#34;all\u0026#34;, 2\u0026#34;editor.insertSpaces\u0026#34;: true, Feature 6: Increase page length to 120 Add this to settings.json to specify line length.\n1\u0026#34;editor.rulers\u0026#34;: [ 2 120 3] Feature 7: Decide on import order Add this to settings.json to specify the import order.\n1\u0026#34;java.completion.importOrder\u0026#34;: [ 2 \u0026#34;java\u0026#34;, 3 \u0026#34;javax\u0026#34;, 4 \u0026#34;org\u0026#34;, 5 \u0026#34;com\u0026#34; 6 ], Use Right click Source Action-\u0026gt;Organize Imports or (Alt+Shift+O)\nFeature 8: Enable eclipse formatting Enable specific formatter.\nFormatter settings\nFormatter xml\n1 \u0026#34;java.format.settings.url\u0026#34; :\u0026#34;file:///Users/home/dev_code-style_formatter.xml\u0026#34;, Use (Ctrl+Shift+I) to format\nFeature 9: Install Lombok plugin Avoid writing boilerplate code with lombok.\nLombok Annotations Support for VS Code\nFeature 10: Add license info to each file This will add a license header to the file.\nlicenser\nAdd this to settings.json\n1\u0026#34;licenser.customHeader\u0026#34;: \u0026#34;Copyright (c) 2021 Company, Inc. All Rights Reserved.\u0026#34;, 2\u0026#34;licenser.customTermsAndConditions\u0026#34;: \u0026#34;\u0026#34;, 3\u0026#34;licenser.license\u0026#34;: \u0026#34;Custom\u0026#34;, 4\u0026#34;licenser.useSingleLineStyle\u0026#34;: false, 5\u0026#34;licenser.author\u0026#34;: \u0026#34;Company\u0026#34;, Use command palette to insert license\nFeature 11: Explore java dependency tree View the dependency tree of the project.\nFeature 12: Explore Git Check git blame inline and view git commits. View the git graph to visualize the tree.\nFeature 13: Explore unit test support \u0026amp; debug unit tests Run the unit tests and view the report.\nFeature 14: Explore checkstyle support View the inline highlight feature. Make the settings change in the workspace instead of global user settings file so that this applies only to the specific project.\nCheckstyle for Java\n1\u0026#34;java.checkstyle.configuration\u0026#34;: \u0026#34;${workspaceFolder}/config/checkstyle/checkstyle.xml\u0026#34; Feature 15: Explore inline code coverage You need xml report enabled for this to work, check build.gradle, after the build the jacocoTestReport.xml is generated that is read by the coverage extension to highlight lines of code not covered by unit tests.\nCoverage Gutters\nIf the coverage file name is different then change the settings.json\n1\u0026#34;coverage-gutters.xmlname\u0026#34;: \u0026#34;jacocoTestReport.xml\u0026#34;, Feature 16: Explore Debugging and Hot Code Replacement/Hot Swap Dock the debugger tool bar.\n1\u0026#34;debug.toolBarLocation\u0026#34;: \u0026#34;docked\u0026#34; 1curl --location --request GET \u0026#39;http://localhost:9090/api/age/10-10-2020\u0026#39; --header \u0026#39;Content-Type: application/json\u0026#39; To enable hot code replace set the following properties, for spring boot projects with dev tools the reload is automatic, if dev tools is not present in the project then you can use Hot code replacement (HCR), which doesn’t require a restart, is a fast debugging technique in which the Java debugger transmits new class files over the debugging channel to the JVM. Make sure 'java.autobuild.enabled' is enabled.\n1\u0026#34;java.debug.settings.hotCodeReplace\u0026#34;: \u0026#34;auto\u0026#34;, 2\u0026#34;java.autobuild.enabled\u0026#34; : true Feature 17: Explore Spring Boot Support Start or debug spring boot application\nGet spring property support\nFeature 18: Create shortcut to key bindings to build project For gradle projects instead of running ./gradlew build each time in terminal you can map it to a task and give a keyboard shortcut.\nAdd this to the tasks.json, everytime you run a task called 'run' it will build the project.\n1{ 2 \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, 3 \u0026#34;tasks\u0026#34;: [ 4 { 5 \u0026#34;label\u0026#34;: \u0026#34;build\u0026#34;, 6 \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, 7 \u0026#34;command\u0026#34;: \u0026#34;./gradlew clean build\u0026#34;, 8 \u0026#34;group\u0026#34;: \u0026#34;none\u0026#34; 9 } 10 ] 11} Now lets create a shortcut goto \u0026quot;Keyboard Shortcuts\u0026quot; and click on '{}' icon. Add this to keybindings.json, now press F6 to build the project\n1[ 2 { 3 \u0026#34;key\u0026#34;: \u0026#34;f6\u0026#34;, 4 \u0026#34;command\u0026#34;: \u0026#34;workbench.action.tasks.runTask\u0026#34;, 5 \u0026#34;args\u0026#34; : \u0026#34;build\u0026#34; 6 } 7] Feature 19: Reading user input To take user input from command line you need to change shell type in launch.json config to integratedTerminal\n1{ 2 \u0026#34;type\u0026#34;: \u0026#34;java\u0026#34;, 3 \u0026#34;name\u0026#34;: \u0026#34;CodeLens (Launch) - Main\u0026#34;, 4 \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, 5 \u0026#34;mainClass\u0026#34;: \u0026#34;com.demo.project61.Application\u0026#34;, 6 \u0026#34;projectName\u0026#34;: \u0026#34;project61\u0026#34;, 7 \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34; 8} Feature 20: Explore Docker Build the docker image\nRun the docker image\nTag the docker image and push it to public docker hub registry. You need to run docker login before pushing the image.\n1docker login Push the image\nFeature 21: Explore Kubernetes Deploy to kubernetes cluster\nView the deployments\nFeature 22: Explore Rest Client Explore Reset client Thunder Client\nFeature 23: Sync the settings Link the accounts to sync the settings\nFeature 24: Connect to DB and query Query a database\nFeature 25: Use live share Share your workspace\nFeature 26: Explore Open API Create Open API spec file and test it\nFeature 27: Shortcuts Goto Implementation - (Ctrl + F12) Goto Terminal - (Ctrl + ~ ) Quick Fix - (Ctrl + . )\nProblems Often times workspace gets corrupted so I delete the storage in %APPDATA%\\Code\\User\\workspaceStorage and restart the IDE to get things back in order. Clean the workspace directory\nWindows : %APPDATA%\\Code[ - Variant]\\User\\workspaceStorage\nMacOS : $HOME/Library/Application Support/Code[ - Variant]/User/workspaceStorage/ Linux : $HOME/.config/Code[ - Variant]/User/workspaceStorage/\nAnother problem often seen is when multiple project exist on workspace but if one of them fails to build then all the projects in the workspace wont work. So for now keep one workspace to one project mapping.\nMaven Execution If you need to execute maven project from command line, You need to add org.codehaus.mojo.exec-maven-plugin in your pom.xml\n1\u0026lt;plugin\u0026gt; 2 \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt; 3 \u0026lt;artifactId\u0026gt;exec-maven-plugin\u0026lt;/artifactId\u0026gt; 4 \u0026lt;version\u0026gt;1.6.0\u0026lt;/version\u0026gt; 5\u0026lt;/plugin\u0026gt; Then configure task by 'Ctrl+Shift+P' then 'Tasks: Configure task' and select the project. Edit the tasks.json\n1{ 2 \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, 3 \u0026#34;tasks\u0026#34;: [ 4 { 5 \u0026#34;label\u0026#34;: \u0026#34;run\u0026#34;, 6 \u0026#34;type\u0026#34;: \u0026#34;shell\u0026#34;, 7 \u0026#34;command\u0026#34;: \u0026#34;mvn exec:java \u0026#39;-Dexec.mainClass=com.myproject.Main\u0026#39;\u0026#34;, 8 \u0026#34;group\u0026#34;: \u0026#34;none\u0026#34; 9 } 10 ] 11} Plugins recommended To export the plugins you use\n1code --list-extensions \u0026gt; extensions.list To install all plugins at one time\n1cat extensions.list |% { code --install-extension $_} extensions.list\n142Crunch.vscode-openapi 2Angular.ng-template 3CoenraadS.bracket-pair-colorizer-2 4DavidAnson.vscode-markdownlint 5dbaeumer.vscode-eslint 6DotJoshJohnson.xml 7eamodio.gitlens 8eg2.vscode-npm-script 9GabrielBB.vscode-lombok 10golang.go 11hashicorp.terraform 12humao.rest-client 13jim-moody.drools 14johnpapa.vscode-peacock 15mhutchie.git-graph 16ms-azuretools.vscode-docker 17ms-kubernetes-tools.vscode-kubernetes-tools 18ms-ossdata.vscode-postgresql 19ms-python.python 20ms-python.vscode-pylance 21ms-toolsai.jupyter 22ms-vscode-remote.remote-containers 23ms-vscode-remote.remote-ssh 24ms-vscode-remote.remote-ssh-edit 25ms-vscode-remote.remote-ssh-explorer 26ms-vscode-remote.remote-wsl 27ms-vscode-remote.vscode-remote-extensionpack 28ms-vscode.js-debug-nightly 29ms-vscode.vscode-typescript-next 30ms-vscode.vscode-typescript-tslint-plugin 31ms-vsliveshare.vsliveshare 32msjsdiag.debugger-for-chrome 33msjsdiag.vscode-react-native 34mtxr.sqltools 35mtxr.sqltools-driver-pg 36naco-siren.gradle-language 37Pivotal.vscode-spring-boot 38PKief.material-icon-theme 39rangav.vscode-thunder-client 40redhat.java 41redhat.vscode-commons 42redhat.vscode-xml 43redhat.vscode-yaml 44richardwillis.vscode-gradle 45richardwillis.vscode-gradle-extension-pack 46richardwillis.vscode-spotless-gradle 47ryanluker.vscode-coverage-gutters 48shengchen.vscode-checkstyle 49VisualStudioExptTeam.vscodeintellicode 50vscjava.vscode-java-debug 51vscjava.vscode-java-dependency 52vscjava.vscode-java-pack 53vscjava.vscode-java-test 54vscjava.vscode-maven 55vscjava.vscode-spring-boot-dashboard 56vscjava.vscode-spring-initializr 57vscode-icons-team.vscode-icons 58xabikos.JavaScriptSnippets 59ymotongpoo.licenser 60zhuangtongfa.material-theme References VSCode\nJava in VSCode\nJava Tutorial with VS Code\nSpring Boot with VS Code\nJava Debugging and Testing\n","link":"https://gitorko.github.io/post/vscode-java/","section":"post","tags":["vscode","checkstyle","openapi","code-coverage","docker","kubernetes","hot-swap"],"title":"VSCode Java"},{"body":"Generate a pdf report using jasper reports\nGithub: https://github.com/gitorko/project70\nJasper Report JasperReports is an open source java reporting engine. It can generate different types of reports in this example we look at generating a pdf report with data passed from the java layer. To generate the jasper template you will need to download and install jasper studio. Jasper report also comes with a server but for this demo you dont need to install it.\nhttps://community.jaspersoft.com/download\nCode 1package com.demo.project70; 2 3import java.io.File; 4import java.io.FileOutputStream; 5import java.io.OutputStream; 6import java.util.ArrayList; 7import java.util.HashMap; 8import java.util.List; 9import java.util.Map; 10 11import lombok.AllArgsConstructor; 12import lombok.Data; 13import lombok.NoArgsConstructor; 14import net.sf.jasperreports.engine.JREmptyDataSource; 15import net.sf.jasperreports.engine.JasperCompileManager; 16import net.sf.jasperreports.engine.JasperExportManager; 17import net.sf.jasperreports.engine.JasperFillManager; 18import net.sf.jasperreports.engine.JasperPrint; 19import net.sf.jasperreports.engine.JasperReport; 20import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource; 21import org.springframework.boot.CommandLineRunner; 22import org.springframework.boot.SpringApplication; 23import org.springframework.boot.autoconfigure.SpringBootApplication; 24 25@SpringBootApplication 26public class Main implements CommandLineRunner { 27 28 static final String fileName = \u0026#34;src/main/resources/EmployeeReports.jrxml\u0026#34;; 29 static final String outFile = \u0026#34;EmployeeReports.pdf\u0026#34;; 30 31 public static void main(String[] args) { 32 SpringApplication.run(Main.class, args); 33 } 34 35 @Override 36 public void run(String... args) throws Exception { 37 List\u0026lt;Employee\u0026gt; employeeList = new ArrayList\u0026lt;\u0026gt;(); 38 Map\u0026lt;String, Object\u0026gt; parameter = new HashMap\u0026lt;\u0026gt;(); 39 40 employeeList.add(new Employee(1, \u0026#34;Jack Ryan\u0026#34;, 100.0)); 41 employeeList.add(new Employee(2, \u0026#34;Cathy Mueller\u0026#34;, 130.0)); 42 employeeList.add(new Employee(3, \u0026#34;Matice\u0026#34;, 90.0)); 43 44 parameter.put(\u0026#34;employeeDataSource\u0026#34;, new JRBeanCollectionDataSource(employeeList)); 45 parameter.put(\u0026#34;title\u0026#34;, \u0026#34;Employee Report\u0026#34;); 46 47 JasperReport jasperDesign = JasperCompileManager.compileReport(fileName); 48 JasperPrint jasperPrint = JasperFillManager.fillReport(jasperDesign, parameter, new JREmptyDataSource()); 49 50 File file = new File(outFile); 51 OutputStream outputSteam = new FileOutputStream(file); 52 JasperExportManager.exportReportToPdfStream(jasperPrint, outputSteam); 53 54 System.out.println(\u0026#34;Report Generated!\u0026#34;); 55 } 56 57 @Data 58 @AllArgsConstructor 59 @NoArgsConstructor 60 public class Employee { 61 private int id; 62 private String name; 63 private Double salary; 64 } 65} 66 67 1\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; 2\u0026lt;!-- Created with Jaspersoft Studio version 6.14.0.final using JasperReports Library version 6.14.0-2ab0d8625be255bf609c78e1181801213e51db8f --\u0026gt; 3\u0026lt;jasperReport xmlns=\u0026#34;http://jasperreports.sourceforge.net/jasperreports\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://jasperreports.sourceforge.net/jasperreports http://jasperreports.sourceforge.net/xsd/jasperreport.xsd\u0026#34; name=\u0026#34;EmployeeReports\u0026#34; pageWidth=\u0026#34;595\u0026#34; pageHeight=\u0026#34;842\u0026#34; columnWidth=\u0026#34;555\u0026#34; leftMargin=\u0026#34;20\u0026#34; rightMargin=\u0026#34;20\u0026#34; topMargin=\u0026#34;20\u0026#34; bottomMargin=\u0026#34;20\u0026#34; uuid=\u0026#34;78066d92-d5f8-4a86-bde2-9824be76fbdf\u0026#34;\u0026gt; 4 \u0026lt;property name=\u0026#34;com.jaspersoft.studio.data.defaultdataadapter\u0026#34; value=\u0026#34;One Empty Record\u0026#34;/\u0026gt; 5 \u0026lt;style name=\u0026#34;Table_TH\u0026#34; mode=\u0026#34;Opaque\u0026#34; backcolor=\u0026#34;#F0F8FF\u0026#34;\u0026gt; 6 \u0026lt;box\u0026gt; 7 \u0026lt;pen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 8 \u0026lt;topPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 9 \u0026lt;leftPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 10 \u0026lt;bottomPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 11 \u0026lt;rightPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 12 \u0026lt;/box\u0026gt; 13 \u0026lt;/style\u0026gt; 14 \u0026lt;style name=\u0026#34;Table_CH\u0026#34; mode=\u0026#34;Opaque\u0026#34; backcolor=\u0026#34;#BFE1FF\u0026#34;\u0026gt; 15 \u0026lt;box\u0026gt; 16 \u0026lt;pen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 17 \u0026lt;topPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 18 \u0026lt;leftPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 19 \u0026lt;bottomPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 20 \u0026lt;rightPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 21 \u0026lt;/box\u0026gt; 22 \u0026lt;/style\u0026gt; 23 \u0026lt;style name=\u0026#34;Table_TD\u0026#34; mode=\u0026#34;Opaque\u0026#34; backcolor=\u0026#34;#FFFFFF\u0026#34;\u0026gt; 24 \u0026lt;box\u0026gt; 25 \u0026lt;pen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 26 \u0026lt;topPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 27 \u0026lt;leftPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 28 \u0026lt;bottomPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 29 \u0026lt;rightPen lineWidth=\u0026#34;0.5\u0026#34; lineColor=\u0026#34;#000000\u0026#34;/\u0026gt; 30 \u0026lt;/box\u0026gt; 31 \u0026lt;/style\u0026gt; 32 \u0026lt;subDataset name=\u0026#34;employeeDataSet\u0026#34; uuid=\u0026#34;9651295c-429d-420d-9e5b-42055e73efea\u0026#34;\u0026gt; 33 \u0026lt;property name=\u0026#34;com.jaspersoft.studio.data.defaultdataadapter\u0026#34; value=\u0026#34;One Empty Record\u0026#34;/\u0026gt; 34 \u0026lt;queryString\u0026gt; 35 \u0026lt;![CDATA[]]\u0026gt; 36 \u0026lt;/queryString\u0026gt; 37 \u0026lt;field name=\u0026#34;id\u0026#34; class=\u0026#34;java.lang.Integer\u0026#34;/\u0026gt; 38 \u0026lt;field name=\u0026#34;name\u0026#34; class=\u0026#34;java.lang.String\u0026#34;/\u0026gt; 39 \u0026lt;field name=\u0026#34;salary\u0026#34; class=\u0026#34;java.lang.Double\u0026#34;/\u0026gt; 40 \u0026lt;/subDataset\u0026gt; 41 \u0026lt;parameter name=\u0026#34;title\u0026#34; class=\u0026#34;java.lang.String\u0026#34;/\u0026gt; 42 \u0026lt;parameter name=\u0026#34;employeeDataSource\u0026#34; class=\u0026#34;net.sf.jasperreports.engine.data.JRBeanCollectionDataSource\u0026#34;/\u0026gt; 43 \u0026lt;queryString\u0026gt; 44 \u0026lt;![CDATA[]]\u0026gt; 45 \u0026lt;/queryString\u0026gt; 46 \u0026lt;background\u0026gt; 47 \u0026lt;band splitType=\u0026#34;Stretch\u0026#34;/\u0026gt; 48 \u0026lt;/background\u0026gt; 49 \u0026lt;title\u0026gt; 50 \u0026lt;band height=\u0026#34;79\u0026#34; splitType=\u0026#34;Stretch\u0026#34;\u0026gt; 51 \u0026lt;textField\u0026gt; 52 \u0026lt;reportElement x=\u0026#34;250\u0026#34; y=\u0026#34;20\u0026#34; width=\u0026#34;100\u0026#34; height=\u0026#34;30\u0026#34; uuid=\u0026#34;2f6bf147-59e5-4468-84b4-bf89a58646ef\u0026#34;/\u0026gt; 53 \u0026lt;textElement\u0026gt; 54 \u0026lt;font size=\u0026#34;12\u0026#34;/\u0026gt; 55 \u0026lt;/textElement\u0026gt; 56 \u0026lt;textFieldExpression\u0026gt;\u0026lt;![CDATA[$P{title}]]\u0026gt;\u0026lt;/textFieldExpression\u0026gt; 57 \u0026lt;/textField\u0026gt; 58 \u0026lt;/band\u0026gt; 59 \u0026lt;/title\u0026gt; 60 \u0026lt;pageHeader\u0026gt; 61 \u0026lt;band height=\u0026#34;35\u0026#34; splitType=\u0026#34;Stretch\u0026#34;/\u0026gt; 62 \u0026lt;/pageHeader\u0026gt; 63 \u0026lt;columnHeader\u0026gt; 64 \u0026lt;band height=\u0026#34;61\u0026#34; splitType=\u0026#34;Stretch\u0026#34;/\u0026gt; 65 \u0026lt;/columnHeader\u0026gt; 66 \u0026lt;detail\u0026gt; 67 \u0026lt;band height=\u0026#34;246\u0026#34; splitType=\u0026#34;Stretch\u0026#34;\u0026gt; 68 \u0026lt;componentElement\u0026gt; 69 \u0026lt;reportElement x=\u0026#34;180\u0026#34; y=\u0026#34;30\u0026#34; width=\u0026#34;200\u0026#34; height=\u0026#34;200\u0026#34; uuid=\u0026#34;63d288f4-369c-494f-85b0-f0108b22765e\u0026#34;\u0026gt; 70 \u0026lt;property name=\u0026#34;com.jaspersoft.studio.layout\u0026#34; value=\u0026#34;com.jaspersoft.studio.editor.layout.VerticalRowLayout\u0026#34;/\u0026gt; 71 \u0026lt;property name=\u0026#34;com.jaspersoft.studio.table.style.table_header\u0026#34; value=\u0026#34;Table_TH\u0026#34;/\u0026gt; 72 \u0026lt;property name=\u0026#34;com.jaspersoft.studio.table.style.column_header\u0026#34; value=\u0026#34;Table_CH\u0026#34;/\u0026gt; 73 \u0026lt;property name=\u0026#34;com.jaspersoft.studio.table.style.detail\u0026#34; value=\u0026#34;Table_TD\u0026#34;/\u0026gt; 74 \u0026lt;/reportElement\u0026gt; 75 \u0026lt;jr:table xmlns:jr=\u0026#34;http://jasperreports.sourceforge.net/jasperreports/components\u0026#34; xsi:schemaLocation=\u0026#34;http://jasperreports.sourceforge.net/jasperreports/components http://jasperreports.sourceforge.net/xsd/components.xsd\u0026#34;\u0026gt; 76 \u0026lt;datasetRun subDataset=\u0026#34;employeeDataSet\u0026#34; uuid=\u0026#34;6fe4bdfe-9dd2-4d5e-b94b-c951044cc1cf\u0026#34;\u0026gt; 77 \u0026lt;dataSourceExpression\u0026gt;\u0026lt;![CDATA[$P{employeeDataSource}]]\u0026gt;\u0026lt;/dataSourceExpression\u0026gt; 78 \u0026lt;/datasetRun\u0026gt; 79 \u0026lt;jr:column width=\u0026#34;66\u0026#34; uuid=\u0026#34;4ba6dc06-71ed-4eac-925f-3940726ecfa8\u0026#34;\u0026gt; 80 \u0026lt;jr:tableHeader style=\u0026#34;Table_TH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 81 \u0026lt;jr:tableFooter style=\u0026#34;Table_TH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 82 \u0026lt;jr:columnHeader style=\u0026#34;Table_CH\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; 83 \u0026lt;staticText\u0026gt; 84 \u0026lt;reportElement x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;66\u0026#34; height=\u0026#34;30\u0026#34; uuid=\u0026#34;2fa1464e-80ba-4599-b563-c9f922460fc6\u0026#34;/\u0026gt; 85 \u0026lt;text\u0026gt;\u0026lt;![CDATA[id]]\u0026gt;\u0026lt;/text\u0026gt; 86 \u0026lt;/staticText\u0026gt; 87 \u0026lt;/jr:columnHeader\u0026gt; 88 \u0026lt;jr:columnFooter style=\u0026#34;Table_CH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 89 \u0026lt;jr:detailCell style=\u0026#34;Table_TD\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; 90 \u0026lt;textField\u0026gt; 91 \u0026lt;reportElement x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;66\u0026#34; height=\u0026#34;30\u0026#34; uuid=\u0026#34;fcae93e6-a2e8-44d2-b05a-18cf222b2580\u0026#34;/\u0026gt; 92 \u0026lt;textFieldExpression\u0026gt;\u0026lt;![CDATA[$F{id}]]\u0026gt;\u0026lt;/textFieldExpression\u0026gt; 93 \u0026lt;/textField\u0026gt; 94 \u0026lt;/jr:detailCell\u0026gt; 95 \u0026lt;/jr:column\u0026gt; 96 \u0026lt;jr:column width=\u0026#34;66\u0026#34; uuid=\u0026#34;a9abc185-068b-44b0-ba3e-c52793b91a90\u0026#34;\u0026gt; 97 \u0026lt;jr:tableHeader style=\u0026#34;Table_TH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 98 \u0026lt;jr:tableFooter style=\u0026#34;Table_TH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 99 \u0026lt;jr:columnHeader style=\u0026#34;Table_CH\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; 100 \u0026lt;staticText\u0026gt; 101 \u0026lt;reportElement x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;66\u0026#34; height=\u0026#34;30\u0026#34; uuid=\u0026#34;02aa9397-a647-477d-ae35-d87a6d2c7bc1\u0026#34;/\u0026gt; 102 \u0026lt;text\u0026gt;\u0026lt;![CDATA[name]]\u0026gt;\u0026lt;/text\u0026gt; 103 \u0026lt;/staticText\u0026gt; 104 \u0026lt;/jr:columnHeader\u0026gt; 105 \u0026lt;jr:columnFooter style=\u0026#34;Table_CH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 106 \u0026lt;jr:detailCell style=\u0026#34;Table_TD\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; 107 \u0026lt;textField\u0026gt; 108 \u0026lt;reportElement x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;66\u0026#34; height=\u0026#34;30\u0026#34; uuid=\u0026#34;f13bc7e1-3206-4e65-9377-9e488acec741\u0026#34;/\u0026gt; 109 \u0026lt;textFieldExpression\u0026gt;\u0026lt;![CDATA[$F{name}]]\u0026gt;\u0026lt;/textFieldExpression\u0026gt; 110 \u0026lt;/textField\u0026gt; 111 \u0026lt;/jr:detailCell\u0026gt; 112 \u0026lt;/jr:column\u0026gt; 113 \u0026lt;jr:column width=\u0026#34;66\u0026#34; uuid=\u0026#34;d0e58992-65cf-48e0-a03a-3fc71f88c1da\u0026#34;\u0026gt; 114 \u0026lt;jr:tableHeader style=\u0026#34;Table_TH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 115 \u0026lt;jr:tableFooter style=\u0026#34;Table_TH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 116 \u0026lt;jr:columnHeader style=\u0026#34;Table_CH\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; 117 \u0026lt;staticText\u0026gt; 118 \u0026lt;reportElement x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;66\u0026#34; height=\u0026#34;30\u0026#34; uuid=\u0026#34;cb76f4a3-45a1-4b8c-9e41-e4e586c79496\u0026#34;/\u0026gt; 119 \u0026lt;text\u0026gt;\u0026lt;![CDATA[salary]]\u0026gt;\u0026lt;/text\u0026gt; 120 \u0026lt;/staticText\u0026gt; 121 \u0026lt;/jr:columnHeader\u0026gt; 122 \u0026lt;jr:columnFooter style=\u0026#34;Table_CH\u0026#34; height=\u0026#34;30\u0026#34;/\u0026gt; 123 \u0026lt;jr:detailCell style=\u0026#34;Table_TD\u0026#34; height=\u0026#34;30\u0026#34;\u0026gt; 124 \u0026lt;textField\u0026gt; 125 \u0026lt;reportElement x=\u0026#34;0\u0026#34; y=\u0026#34;0\u0026#34; width=\u0026#34;66\u0026#34; height=\u0026#34;30\u0026#34; uuid=\u0026#34;76129bc3-7141-42f8-9059-3fb60b79ec4d\u0026#34;/\u0026gt; 126 \u0026lt;textFieldExpression\u0026gt;\u0026lt;![CDATA[$F{salary}]]\u0026gt;\u0026lt;/textFieldExpression\u0026gt; 127 \u0026lt;/textField\u0026gt; 128 \u0026lt;/jr:detailCell\u0026gt; 129 \u0026lt;/jr:column\u0026gt; 130 \u0026lt;/jr:table\u0026gt; 131 \u0026lt;/componentElement\u0026gt; 132 \u0026lt;/band\u0026gt; 133 \u0026lt;/detail\u0026gt; 134 \u0026lt;columnFooter\u0026gt; 135 \u0026lt;band height=\u0026#34;45\u0026#34; splitType=\u0026#34;Stretch\u0026#34;/\u0026gt; 136 \u0026lt;/columnFooter\u0026gt; 137 \u0026lt;pageFooter\u0026gt; 138 \u0026lt;band height=\u0026#34;54\u0026#34; splitType=\u0026#34;Stretch\u0026#34;/\u0026gt; 139 \u0026lt;/pageFooter\u0026gt; 140 \u0026lt;summary\u0026gt; 141 \u0026lt;band height=\u0026#34;42\u0026#34; splitType=\u0026#34;Stretch\u0026#34;/\u0026gt; 142 \u0026lt;/summary\u0026gt; 143\u0026lt;/jasperReport\u0026gt; Run the project to generate the EmployeeReports.pdf file.\n1./gradlew bootRun To create the jasper report template file you can use jasper studio\nReferences https://community.jaspersoft.com/\n","link":"https://gitorko.github.io/post/jasper-reports-spring/","section":"post","tags":["jasper-report"],"title":"Jasper Reports with Spring"},{"body":"","link":"https://gitorko.github.io/tags/jasper-report/","section":"tags","tags":null,"title":"jasper-report"},{"body":"","link":"https://gitorko.github.io/categories/reports/","section":"categories","tags":null,"title":"Reports"},{"body":"","link":"https://gitorko.github.io/tags/freemarker/","section":"tags","tags":null,"title":"freemarker"},{"body":"HTML reports generated with freemarker templates\nGithub: https://github.com/gitorko/project69\nFreemarker We will generate a single html file report using freemarker template and provide a rest url to download the report.\nCode 1package org.gitokro.project69; 2 3import java.io.ByteArrayInputStream; 4import java.io.StringWriter; 5import java.util.Date; 6import java.util.HashMap; 7import java.util.List; 8import java.util.Map; 9import java.util.Random; 10import java.util.stream.Collectors; 11import java.util.stream.IntStream; 12 13import freemarker.template.Configuration; 14import freemarker.template.Template; 15import lombok.extern.slf4j.Slf4j; 16import org.springframework.core.io.InputStreamResource; 17import org.springframework.http.HttpHeaders; 18import org.springframework.http.MediaType; 19import org.springframework.http.ResponseEntity; 20import org.springframework.web.bind.annotation.GetMapping; 21import org.springframework.web.bind.annotation.RestController; 22 23@RestController 24@Slf4j 25public class HomeController { 26 27 @GetMapping(\u0026#34;/report\u0026#34;) 28 public ResponseEntity\u0026lt;InputStreamResource\u0026gt; getReport() throws Exception { 29 log.info(\u0026#34;Generating report!\u0026#34;); 30 String htmlReport = this.generateHtmlReport(); 31 ByteArrayInputStream bis = new ByteArrayInputStream(htmlReport.getBytes()); 32 return ResponseEntity.ok() 33 .contentType(MediaType.APPLICATION_OCTET_STREAM) 34 .header(HttpHeaders.CONTENT_DISPOSITION, \u0026#34;attachment; filename=\\\u0026#34;myreport.htm\\\u0026#34;\u0026#34;) 35 .body(new InputStreamResource(bis)); 36 } 37 38 private String generateHtmlReport() throws Exception { 39 Configuration cfg = new Configuration(Configuration.VERSION_2_3_30); 40 cfg.setClassForTemplateLoading(this.getClass(), \u0026#34;/\u0026#34;); 41 cfg.setDefaultEncoding(\u0026#34;UTF-8\u0026#34;); 42 Template template = cfg.getTemplate(\u0026#34;templates/my-report.ftl\u0026#34;); 43 List\u0026lt;Employee\u0026gt; employees = getEmployeeData(); 44 Map\u0026lt;String, Object\u0026gt; templateData = new HashMap\u0026lt;\u0026gt;(); 45 templateData.put(\u0026#34;reportTitle\u0026#34;, \u0026#34;Company Employee Report\u0026#34;); 46 templateData.put(\u0026#34;employees\u0026#34;, employees); 47 StringWriter out = new StringWriter(); 48 template.process(templateData, out); 49 return out.toString(); 50 } 51 52 private List\u0026lt;Employee\u0026gt; getEmployeeData() { 53 //Sample Data 54 Random random = new Random(); 55 return IntStream.range(0, 150) 56 .mapToObj(i -\u0026gt; Employee.builder() 57 .name(\u0026#34;Name \u0026#34; + i) 58 .age(random.nextInt(65 - 20) + 20) 59 .dob(new Date()) 60 .salary(40000 + (100000 - 40000) * random.nextDouble()) 61 .build()) 62 .collect(Collectors.toList()); 63 } 64} 1\u0026lt;html\u0026gt; 2 3\u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;Employee Report\u0026lt;/title\u0026gt; 5 \u0026lt;style\u0026gt; 6 table { 7 font-family: arial, sans-serif; 8 border-collapse: collapse; 9 width: 100%; 10 } 11 12 td, 13 th { 14 border: 1px solid #DDDDDD; 15 text-align: left; 16 padding: 8px; 17 } 18 19 th { 20 background-color: #CCCCCC; 21 } 22 23 p.yellow { 24 color: #FFDC0B; 25 font-weight: bold; 26 } 27 28 p.green { 29 color: #2F8400; 30 font-weight: bold; 31 } 32 \u0026lt;/style\u0026gt; 33\u0026lt;/head\u0026gt; 34 35\u0026lt;body\u0026gt; 36\u0026lt;h3\u0026gt;${(reportTitle)!\u0026#34;Default Title\u0026#34;}\u0026lt;/h3\u0026gt; 37\u0026lt;br/\u0026gt; 38 39\u0026lt;h4\u0026gt;Employee Details\u0026lt;/h4\u0026gt; 40\u0026lt;table\u0026gt; 41 \u0026lt;tr\u0026gt; 42 \u0026lt;th\u0026gt;Id\u0026lt;/th\u0026gt; 43 \u0026lt;th\u0026gt;Name\u0026lt;/th\u0026gt; 44 \u0026lt;th\u0026gt;Age\u0026lt;/th\u0026gt; 45 \u0026lt;th\u0026gt;Dob\u0026lt;/th\u0026gt; 46 \u0026lt;th\u0026gt;Salary\u0026lt;/th\u0026gt; 47 \u0026lt;/tr\u0026gt; 48 \u0026lt;#assign empCounter=1\u0026gt; 49 \u0026lt;#list employees as empObj\u0026gt; 50 \u0026lt;tr\u0026gt; 51 \u0026lt;td\u0026gt;${empCounter}\u0026lt;/td\u0026gt; 52 \u0026lt;td\u0026gt; 53 \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;${empObj.name}\u0026lt;/a\u0026gt; 54 \u0026lt;/td\u0026gt; 55 \u0026lt;td\u0026gt; 56 ${empObj.age} 57 \u0026lt;/td\u0026gt; 58 \u0026lt;td\u0026gt; 59 ${empObj.dob?date} 60 \u0026lt;/td\u0026gt; 61 \u0026lt;td\u0026gt; 62 \u0026lt;#if empObj.salary gt 50000\u0026gt; 63 \u0026lt;p class=\u0026#34;green\u0026#34;\u0026gt; 64 ${empObj.salary} 65 \u0026lt;/p\u0026gt; 66 \u0026lt;#else\u0026gt; 67 \u0026lt;p class=\u0026#34;yellow\u0026#34;\u0026gt; 68 ${empObj.salary} 69 \u0026lt;/p\u0026gt; 70 \u0026lt;/#if\u0026gt; 71 \u0026lt;/td\u0026gt; 72 \u0026lt;/tr\u0026gt; 73 \u0026lt;#assign empCounter=empCounter+1\u0026gt; 74 \u0026lt;/#list\u0026gt; 75\u0026lt;/table\u0026gt; 76\u0026lt;h2\u0026gt;Total Employees: ${employees?size}\u0026lt;/h2\u0026gt; 77\u0026lt;/body\u0026gt; 78\u0026lt;/html\u0026gt; Setup Project 69 HTML reports with freemarker\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Dev To run the backend in dev mode.\n1./gradlew clean build 2./gradlew bootRun Open http://localhost:8080/report\nReferences https://freemarker.apache.org/\n","link":"https://gitorko.github.io/post/freemarker-reports/","section":"post","tags":["freemarker"],"title":"Freemarker Reports"},{"body":"","link":"https://gitorko.github.io/tags/design-pattern/","section":"tags","tags":null,"title":"design-pattern"},{"body":"Scatter Gather enterprise integration pattern is used for scenarios such as \u0026quot;best quote\u0026quot;, where we need to request information from several suppliers and decide which one provides us with the best price for the requested item.\nGithub: https://github.com/gitorko/project62\nScatter Gather Pattern So we have a book product and we need to fetch the price from various sources and at max we can wait for 3 seconds. You could use a Thread.sleep or Threads join() method but then if the tasks complete before 3 seconds the tasks will still wait for 3 seconds before returning.\nCode We can use a CountDownLatch to wait for the prices to be fetched. It will wait only for 3 seconds and return the prices fetched.\n1package com.demo.project62.scattergather.latch; 2 3import java.util.Map; 4import java.util.concurrent.ConcurrentHashMap; 5import java.util.concurrent.CountDownLatch; 6import java.util.concurrent.ExecutorService; 7import java.util.concurrent.Executors; 8import java.util.concurrent.TimeUnit; 9 10import lombok.AllArgsConstructor; 11import lombok.SneakyThrows; 12 13public class ScatterGatherLatch { 14 15 ExecutorService threadPool = Executors.newCachedThreadPool(); 16 17 public static void main(String[] args) { 18 Map\u0026lt;String, Float\u0026gt; book1Prices = new ScatterGatherLatch().getPrices(\u0026#34;book1\u0026#34;); 19 System.out.println(book1Prices); 20 } 21 22 @SneakyThrows 23 private Map\u0026lt;String, Float\u0026gt; getPrices(String productId) { 24 Map\u0026lt;String, Float\u0026gt; prices = new ConcurrentHashMap\u0026lt;\u0026gt;(); 25 CountDownLatch latch = new CountDownLatch(3); 26 threadPool.submit(new FetchData(\u0026#34;http://amazon\u0026#34;, productId, prices, latch)); 27 threadPool.submit(new FetchData(\u0026#34;http://ebay\u0026#34;, productId, prices, latch)); 28 threadPool.submit(new FetchData(\u0026#34;http://flipkart\u0026#34;, productId, prices, latch)); 29 latch.await(3, TimeUnit.SECONDS); 30 threadPool.shutdown(); 31 return prices; 32 } 33 34 @AllArgsConstructor 35 class FetchData implements Runnable { 36 37 String url; 38 String productId; 39 Map\u0026lt;String, Float\u0026gt; prices; 40 CountDownLatch latch; 41 42 @SneakyThrows 43 @Override 44 public void run() { 45 if (url.contains(\u0026#34;amazon\u0026#34;)) { 46 //http fetch from amazon 47 System.out.println(\u0026#34;Fetching price from amazon!\u0026#34;); 48 TimeUnit.SECONDS.sleep(2); 49 prices.put(\u0026#34;amazon\u0026#34;, 2.35f); 50 latch.countDown(); 51 } 52 53 if (url.contains(\u0026#34;ebay\u0026#34;)) { 54 System.out.println(\u0026#34;Fetching price from ebay!\u0026#34;); 55 //http fetch from ebay 56 TimeUnit.SECONDS.sleep(4); 57 prices.put(\u0026#34;ebay\u0026#34;, 2.30f); 58 latch.countDown(); 59 } 60 61 if (url.contains(\u0026#34;flipkart\u0026#34;)) { 62 System.out.println(\u0026#34;Fetching price from flipkart!\u0026#34;); 63 //http fetch from flipkart 64 TimeUnit.SECONDS.sleep(1); 65 prices.put(\u0026#34;flipkart\u0026#34;, 2.10f); 66 latch.countDown(); 67 } 68 } 69 } 70} 71 We can also use the invokeAll method\n1package com.demo.project62.scattergather.invoke; 2 3import java.util.ArrayList; 4import java.util.List; 5import java.util.Map; 6import java.util.concurrent.Callable; 7import java.util.concurrent.ConcurrentHashMap; 8import java.util.concurrent.ExecutorService; 9import java.util.concurrent.Executors; 10import java.util.concurrent.TimeUnit; 11 12import lombok.AllArgsConstructor; 13import lombok.SneakyThrows; 14 15public class ScatterGatherInvoke { 16 ExecutorService threadPool = Executors.newCachedThreadPool(); 17 18 public static void main(String[] args) { 19 Map\u0026lt;String, Float\u0026gt; book1Prices = new ScatterGatherInvoke().getPrices(\u0026#34;book1\u0026#34;); 20 System.out.println(book1Prices); 21 } 22 23 @SneakyThrows 24 private Map\u0026lt;String, Float\u0026gt; getPrices(String productId) { 25 Map\u0026lt;String, Float\u0026gt; prices = new ConcurrentHashMap\u0026lt;\u0026gt;(); 26 List\u0026lt;Callable\u0026lt;Void\u0026gt;\u0026gt; tasks = new ArrayList\u0026lt;\u0026gt;(); 27 28 tasks.add(new FetchData(\u0026#34;http://amazon\u0026#34;, productId, prices)); 29 tasks.add(new FetchData(\u0026#34;http://ebay\u0026#34;, productId, prices)); 30 tasks.add(new FetchData(\u0026#34;http://flipkart\u0026#34;, productId, prices)); 31 threadPool.invokeAll(tasks, 3, TimeUnit.SECONDS); 32 threadPool.shutdown(); 33 return prices; 34 } 35 36 @AllArgsConstructor 37 class FetchData implements Callable\u0026lt;Void\u0026gt; { 38 39 String url; 40 String productId; 41 Map\u0026lt;String, Float\u0026gt; prices; 42 43 @Override 44 @SneakyThrows 45 public Void call() throws Exception { 46 if (url.contains(\u0026#34;amazon\u0026#34;)) { 47 //http fetch from amazon 48 System.out.println(\u0026#34;Fetching price from amazon!\u0026#34;); 49 TimeUnit.SECONDS.sleep(2); 50 prices.put(\u0026#34;amazon\u0026#34;, 2.35f); 51 } 52 53 if (url.contains(\u0026#34;ebay\u0026#34;)) { 54 System.out.println(\u0026#34;Fetching price from ebay!\u0026#34;); 55 //http fetch from ebay 56 TimeUnit.SECONDS.sleep(4); 57 prices.put(\u0026#34;ebay\u0026#34;, 2.30f); 58 } 59 60 if (url.contains(\u0026#34;flipkart\u0026#34;)) { 61 System.out.println(\u0026#34;Fetching price from flipkart!\u0026#34;); 62 //http fetch from flipkart 63 TimeUnit.SECONDS.sleep(1); 64 prices.put(\u0026#34;flipkart\u0026#34;, 2.10f); 65 } 66 return null; 67 } 68 } 69} 70 71 We can also use the CompletableFuture.\n1package com.demo.project62.scattergather.completable; 2 3import java.util.Map; 4import java.util.concurrent.CompletableFuture; 5import java.util.concurrent.ConcurrentHashMap; 6import java.util.concurrent.ExecutorService; 7import java.util.concurrent.Executors; 8import java.util.concurrent.TimeUnit; 9import java.util.concurrent.TimeoutException; 10 11import lombok.AllArgsConstructor; 12import lombok.SneakyThrows; 13 14public class ScatterGatherCompletable { 15 ExecutorService threadPool = Executors.newCachedThreadPool(); 16 17 public static void main(String[] args) { 18 Map\u0026lt;String, Float\u0026gt; book1Prices = new ScatterGatherCompletable().getPrices(\u0026#34;book1\u0026#34;); 19 System.out.println(book1Prices); 20 } 21 22 @SneakyThrows 23 private Map\u0026lt;String, Float\u0026gt; getPrices(String productId) { 24 Map\u0026lt;String, Float\u0026gt; prices = new ConcurrentHashMap\u0026lt;\u0026gt;(); 25 26 CompletableFuture\u0026lt;Void\u0026gt; task1 = CompletableFuture.runAsync(new FetchData(\u0026#34;http://amazon\u0026#34;, productId, prices)); 27 CompletableFuture\u0026lt;Void\u0026gt; task2 = CompletableFuture.runAsync(new FetchData(\u0026#34;http://ebay\u0026#34;, productId, prices)); 28 CompletableFuture\u0026lt;Void\u0026gt; task3 = CompletableFuture.runAsync(new FetchData(\u0026#34;http://flipkart\u0026#34;, productId, prices)); 29 30 CompletableFuture\u0026lt;Void\u0026gt; allTasks = CompletableFuture.allOf(task1,task2,task3); 31 try { 32 allTasks.get(3, TimeUnit.SECONDS); 33 } catch (TimeoutException ex) { 34 //Do Nothing! 35 } 36 return prices; 37 } 38 39 @AllArgsConstructor 40 class FetchData implements Runnable { 41 42 String url; 43 String productId; 44 Map\u0026lt;String, Float\u0026gt; prices; 45 46 @Override 47 @SneakyThrows 48 public void run() { 49 if (url.contains(\u0026#34;amazon\u0026#34;)) { 50 //http fetch from amazon 51 System.out.println(\u0026#34;Fetching price from amazon!\u0026#34;); 52 TimeUnit.SECONDS.sleep(2); 53 prices.put(\u0026#34;amazon\u0026#34;, 2.35f); 54 } 55 56 if (url.contains(\u0026#34;ebay\u0026#34;)) { 57 System.out.println(\u0026#34;Fetching price from ebay!\u0026#34;); 58 //http fetch from ebay 59 TimeUnit.SECONDS.sleep(4); 60 prices.put(\u0026#34;ebay\u0026#34;, 2.30f); 61 } 62 63 if (url.contains(\u0026#34;flipkart\u0026#34;)) { 64 System.out.println(\u0026#34;Fetching price from flipkart!\u0026#34;); 65 //http fetch from flipkart 66 TimeUnit.SECONDS.sleep(1); 67 prices.put(\u0026#34;flipkart\u0026#34;, 2.10f); 68 } 69 } 70 } 71} 72 Result\n1{amazon=2.35, flipkart=2.1} ","link":"https://gitorko.github.io/post/scatter-gather-pattern/","section":"post","tags":["design-pattern"],"title":"Scatter Gather Pattern"},{"body":"Spring Boot QueryDSL lets you query the database using domain specific language similar to SQL.\nGithub: https://github.com/gitorko/project75\nSpring QueryDSL Let's say you used Spring Data to query the db by using spring naming convention. If your table has 100's of column and you have to query by any column you can't write 100 access functions. This is where query dsl comes into play.\nCode 1package com.demo.project75; 2 3import java.util.stream.IntStream; 4import javax.persistence.Entity; 5import javax.persistence.GeneratedValue; 6import javax.persistence.GenerationType; 7import javax.persistence.Id; 8 9import com.querydsl.core.types.dsl.StringExpression; 10import com.querydsl.core.types.dsl.StringPath; 11import lombok.AllArgsConstructor; 12import lombok.Builder; 13import lombok.Data; 14import lombok.NoArgsConstructor; 15import org.springframework.beans.factory.annotation.Autowired; 16import org.springframework.boot.SpringApplication; 17import org.springframework.boot.autoconfigure.SpringBootApplication; 18import org.springframework.context.event.ContextRefreshedEvent; 19import org.springframework.context.event.EventListener; 20import org.springframework.data.jpa.repository.JpaRepository; 21import org.springframework.data.querydsl.QuerydslPredicateExecutor; 22import org.springframework.data.querydsl.binding.QuerydslBinderCustomizer; 23import org.springframework.data.querydsl.binding.QuerydslBindings; 24import org.springframework.data.querydsl.binding.QuerydslPredicate; 25import org.springframework.data.querydsl.binding.SingleValueBinding; 26import org.springframework.web.bind.annotation.RequestMapping; 27import org.springframework.web.bind.annotation.RequestMethod; 28import org.springframework.web.bind.annotation.RestController; 29 30@SpringBootApplication 31public class Main { 32 33 @Autowired 34 CustomerRepository customerRepository; 35 36 public static void main(String[] args) { 37 SpringApplication.run(Main.class, args); 38 } 39 40 @EventListener 41 public void onStartSeedData(ContextRefreshedEvent event) { 42 //Insert test data 43 IntStream.range(0,5).forEach(i -\u0026gt; { 44 customerRepository.save(Customer.builder() 45 .firstName(\u0026#34;firstname_\u0026#34; + i) 46 .lastName(\u0026#34;lastname \u0026#34; + i) 47 .age(30) 48 .email(\u0026#34;email@email.com\u0026#34;) 49 .build()); 50 }); 51 } 52} 53 54@Entity 55@Data 56@AllArgsConstructor 57@NoArgsConstructor 58@Builder 59class Customer { 60 @Id 61 @GeneratedValue(strategy = GenerationType.AUTO) 62 private Long id; 63 private String firstName; 64 private String lastName; 65 private String email; 66 private int age; 67} 68 69@RestController 70class HomeController{ 71 72 @Autowired 73 CustomerRepository customerRepository; 74 75 @RequestMapping(method = RequestMethod.GET, value = \u0026#34;/users\u0026#34;) 76 public Iterable\u0026lt;Customer\u0026gt; findAllByWebQuerydsl( 77 @QuerydslPredicate(root = Customer.class, 78 bindings = CustomerBinderCustomizer.class) com.querydsl.core.types.Predicate predicate) { 79 return customerRepository.findAll(predicate); 80 } 81} 82 83interface CustomerRepository extends JpaRepository\u0026lt;Customer, Long\u0026gt;, QuerydslPredicateExecutor\u0026lt;Customer\u0026gt; { 84} 85 86class CustomerBinderCustomizer implements QuerydslBinderCustomizer\u0026lt;QCustomer\u0026gt; { 87 88 @Override 89 public void customize(QuerydslBindings querydslBindings, QCustomer qCustomer) { 90 querydslBindings.including( 91 qCustomer.id, 92 qCustomer.firstName, 93 qCustomer.lastName, 94 qCustomer.age, 95 qCustomer.email); 96 97 // Allow case-insensitive partial searches on all strings. 98 querydslBindings.bind(String.class).first((SingleValueBinding\u0026lt;StringPath, String\u0026gt;) StringExpression::containsIgnoreCase); 99 } 100} It uses in memory h2 db to persist.\nSetup Project 75 Spring Boot - Querydsl\nhttps://gitorko.github.io/spring-boot-querydsl/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Dev To run the code.\n1./gradlew clean build 2./gradlew bootRun Testing You can now search based on all the columns of the db and get the response.\nhttp://localhost:8080/users?age=30\nhttp://localhost:8080/users?firstName=firstname_0\nhttp://localhost:8080/users?firstName=firstname_0\u0026amp;age=30\nReferences Spring Query DSL : http://www.querydsl.com/static/querydsl/latest/reference/html/ch02.html\n","link":"https://gitorko.github.io/post/spring-boot-querydsl/","section":"post","tags":["spring","querydsl"],"title":"Spring Boot - QueryDSL"},{"body":"Spring events provides event handling mechanism in spring.\nGithub: https://github.com/gitorko/project73\nSpring Events Spring events lets you create and consume events within an application thus providing loose coupling. Let's say you have 2 async functions that needs co-ordinate. When async1 is complete you need async2 to pick up the processed data and process it. You could use an external queue like rabbitmq, or you could write a producer consumer. Spring events lets you handle such a task easily. Do note that this will be in-memory so if the server restarts all events will be lost.\nCode 1package com.demo.project73; 2 3import lombok.extern.slf4j.Slf4j; 4import org.springframework.boot.context.event.ApplicationReadyEvent; 5import org.springframework.context.event.EventListener; 6import org.springframework.scheduling.annotation.Async; 7import org.springframework.scheduling.annotation.EnableAsync; 8import org.springframework.stereotype.Service; 9 10@Slf4j 11@EnableAsync 12@Service 13public class CustomEventListener { 14 15 /** 16 * When the application is ready it triggers this event 17 */ 18 @EventListener(ApplicationReadyEvent.class) 19 public void onStart() { 20 log.info(\u0026#34;Triggered when application ready!\u0026#34;); 21 } 22 23 /** 24 * Processes the custom event 25 */ 26 @Async 27 @EventListener 28 public void processEvent(CustomEvent myEvent) { 29 log.info(\u0026#34;Received event {}\u0026#34;, myEvent); 30 if (myEvent.getEntity() instanceof Project) { 31 log.info(\u0026#34;Project Name: {}\u0026#34;, ((Project) myEvent.getEntity()).getName()); 32 } 33 if (myEvent.getEntity() instanceof Audit) { 34 log.info(\u0026#34;Audit Message: {}\u0026#34;, ((Audit) myEvent.getEntity()).getMessage()); 35 } 36 } 37 38} 1package com.demo.project73; 2 3import org.springframework.context.ApplicationEvent; 4 5public class CustomEvent\u0026lt;T\u0026gt; extends ApplicationEvent { 6 7 private T entity; 8 9 public CustomEvent(Object source, T entity) { 10 super(source); 11 this.entity = entity; 12 } 13 14 public T getEntity() { 15 return entity; 16 } 17} 1package com.demo.project73; 2 3import java.time.LocalDateTime; 4import java.util.concurrent.TimeUnit; 5import java.util.stream.IntStream; 6 7import lombok.RequiredArgsConstructor; 8import lombok.SneakyThrows; 9import lombok.extern.slf4j.Slf4j; 10import org.springframework.context.ApplicationEventPublisher; 11import org.springframework.scheduling.annotation.Async; 12import org.springframework.scheduling.annotation.EnableAsync; 13import org.springframework.stereotype.Service; 14 15@Service 16@EnableAsync 17@Slf4j 18@RequiredArgsConstructor 19public class CustomAsync { 20 21 private final ApplicationEventPublisher applicationEventPublisher; 22 23 /** 24 * Runs the job in async thread 25 */ 26 @Async 27 public void doSomeAsyncTask1() { 28 log.info(\u0026#34;Running task!\u0026#34;); 29 IntStream.range(0, 5).forEach(i -\u0026gt; { 30 Project project = new Project(i, \u0026#34;Project_\u0026#34; + i); 31 Audit audit = new Audit(\u0026#34;Audit Message \u0026#34; + i, LocalDateTime.now()); 32 log.info(\u0026#34;Trigger event: {}\u0026#34;, project); 33 CustomEvent\u0026lt;Project\u0026gt; projectEvent = new CustomEvent(this, project); 34 CustomEvent\u0026lt;Audit\u0026gt; auditEvent = new CustomEvent(this, audit); 35 applicationEventPublisher.publishEvent(projectEvent); 36 sleep(1); 37 applicationEventPublisher.publishEvent(auditEvent); 38 }); 39 } 40 41 @SneakyThrows 42 public void sleep(int seconds) { 43 TimeUnit.SECONDS.sleep(seconds); 44 } 45 46} Run the project\n1./gradlew bootRun The doSomeAsyncTask1 posts 2 events on the async thread. Both these events are then processed on different async threads.\nReferences https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2\n","link":"https://gitorko.github.io/post/spring-events/","section":"post","tags":["spring"],"title":"Spring Events"},{"body":"HashiCorp's vault is a tool to store and secure secrets along with tight access control. You can store tokens, passwords, certificates, API keys and other secrets. Spring Vault provides spring abstractions to vault. Sometimes you need your running application to detect the changed property value in order to provide a toggle on/off feature.\nGithub: https://github.com/gitorko/project76\nCode Based on the spring profile the respective properties get loaded from vault.\nAfter the feature flag is changed, the new property value is detected by the application without needing a restart.\n1package com.demo.project76; 2 3import java.util.Arrays; 4 5import com.demo.project76.domain.Customer; 6import com.demo.project76.domain.MySecrets; 7import com.demo.project76.repository.CustomerRepository; 8import lombok.RequiredArgsConstructor; 9import lombok.extern.slf4j.Slf4j; 10import org.springframework.beans.factory.annotation.Value; 11import org.springframework.boot.CommandLineRunner; 12import org.springframework.boot.SpringApplication; 13import org.springframework.boot.autoconfigure.SpringBootApplication; 14import org.springframework.boot.context.properties.EnableConfigurationProperties; 15import org.springframework.context.annotation.Bean; 16import org.springframework.core.env.ConfigurableEnvironment; 17import org.springframework.vault.core.VaultKeyValueOperationsSupport; 18import org.springframework.vault.core.VaultOperations; 19import org.springframework.vault.core.VaultSysOperations; 20import org.springframework.vault.core.VaultTemplate; 21import org.springframework.vault.core.VaultTransitOperations; 22import org.springframework.vault.support.VaultMount; 23import org.springframework.vault.support.VaultResponse; 24 25@SpringBootApplication 26@Slf4j 27@RequiredArgsConstructor 28@EnableConfigurationProperties(MySecrets.class) 29public class Main { 30 31 private final VaultTemplate vaultTemplate; 32 private final MySecrets mySecrets; 33 private final VaultOperations operations; 34 35 @Value(\u0026#34;${my-group.username}\u0026#34;) 36 private String userName; 37 38 @Value(\u0026#34;${my-group.appType}\u0026#34;) 39 private String appType; 40 41 public static void main(String[] args) { 42 SpringApplication.run(Main.class, args); 43 } 44 45 @Bean 46 public CommandLineRunner onStart(CustomerRepository customerRepository, ConfigurableEnvironment environment) { 47 return args -\u0026gt; { 48 log.info(\u0026#34;Value injected via @Value userName : {}\u0026#34;, userName); 49 log.info(\u0026#34;Value injected via @Value environment : {}\u0026#34;, environment); 50 log.info(\u0026#34;Value injected via @Value appType : {}\u0026#34;, appType); 51 log.info(\u0026#34;Value injected via class mySecrets: {}\u0026#34;, mySecrets); 52 53 //Reading directly. 54 if (Arrays.stream(environment.getActiveProfiles()).anyMatch(t -\u0026gt; t.equals(\u0026#34;dev\u0026#34;))) { 55 VaultResponse response = vaultTemplate.opsForKeyValue(\u0026#34;secret\u0026#34;, 56 VaultKeyValueOperationsSupport.KeyValueBackend.KV_2).get(\u0026#34;myapp/dev\u0026#34;); 57 log.info(\u0026#34;Value of myKey: {} \u0026#34;, response.getData().get(\u0026#34;myKey\u0026#34;)); 58 } else { 59 VaultResponse response = vaultTemplate.opsForKeyValue(\u0026#34;secret\u0026#34;, 60 VaultKeyValueOperationsSupport.KeyValueBackend.KV_2).get(\u0026#34;myapp/prod\u0026#34;); 61 log.info(\u0026#34;Value of myKey: {} \u0026#34;, response.getData().get(\u0026#34;myKey\u0026#34;)); 62 } 63 64 //Writing new values to different path. 65 VaultTransitOperations transitOperations = vaultTemplate.opsForTransit(); 66 VaultSysOperations sysOperations = vaultTemplate.opsForSys(); 67 if (!sysOperations.getMounts().containsKey(\u0026#34;transit/\u0026#34;)) { 68 sysOperations.mount(\u0026#34;transit\u0026#34;, VaultMount.create(\u0026#34;transit\u0026#34;)); 69 transitOperations.createKey(\u0026#34;foo-key\u0026#34;); 70 } 71 72 // Encrypt a plain-text value 73 String ciphertext = transitOperations.encrypt(\u0026#34;foo-key\u0026#34;, \u0026#34;Secure message\u0026#34;); 74 log.info(\u0026#34;Encrypted value: {}\u0026#34;, ciphertext); 75 76 // Decrypt 77 String plaintext = transitOperations.decrypt(\u0026#34;foo-key\u0026#34;, ciphertext); 78 log.info(\u0026#34;Decrypted value: {}\u0026#34;, plaintext); 79 80 //Save to db, connection established via vault credentials 81 Customer customer = customerRepository.save(Customer.builder().firstName(\u0026#34;John\u0026#34;).lastName(\u0026#34;Rambo\u0026#34;).build()); 82 log.info(\u0026#34;Customer: {}\u0026#34;, customer); 83 84 }; 85 } 86} 1package com.demo.project76.controller; 2 3 4import lombok.extern.slf4j.Slf4j; 5import org.springframework.beans.factory.annotation.Value; 6import org.springframework.cloud.context.config.annotation.RefreshScope; 7import org.springframework.web.bind.annotation.GetMapping; 8import org.springframework.web.bind.annotation.RestController; 9 10@RestController 11@RefreshScope 12@Slf4j 13public class HomeController { 14 15 @Value(\u0026#34;${featureFlag}\u0026#34;) 16 private Boolean featureFlag; 17 18 @GetMapping(value = \u0026#34;/greet\u0026#34;) 19 public String greet() { 20 log.info(\u0026#34;featureFlag: {}\u0026#34;, featureFlag); 21 return featureFlag ? \u0026#34;Good Morning\u0026#34; : \u0026#34;Good Bye\u0026#34;; 22 } 23} 1package com.demo.project76.domain; 2 3import lombok.Data; 4import org.springframework.boot.context.properties.ConfigurationProperties; 5import org.springframework.context.annotation.Configuration; 6 7@Data 8@Configuration 9@ConfigurationProperties(\u0026#34;my-group\u0026#34;) 10public class MySecrets { 11 String username; 12 String password; 13 String dbname; 14} 1my-group: 2 dbname: ${dbname} 3 username: ${username} 4 password: ${password} 5 appType: dev 6spring: 7 application: 8 name: myapp 9 main: 10 banner-mode: \u0026#34;off\u0026#34; 11 datasource: 12 driver-class-name: org.postgresql.Driver 13 host: localhost 14 url: jdbc:postgresql://${spring.datasource.host}:5432/${my-group.dbname} 15 username: ${my-group.username} 16 password: ${my-group.password} 17 jpa: 18 show-sql: false 19 hibernate.ddl-auto: create-drop 20 properties.hibernate.temp.use_jdbc_metadata_defaults: false 21 database-platform: org.hibernate.dialect.PostgreSQLDialect 22 defer-datasource-initialization: true 23management: 24 endpoints: 25 web: 26 exposure: 27 include: refresh 1spring: 2 cloud: 3 # Configuration for a vault server running in dev mode 4 vault: 5 scheme: http 6 host: localhost 7 port: 8200 8 connection-timeout: 5000 9 read-timeout: 15000 10 authentication: TOKEN 11 token: 00000000-0000-0000-0000-000000000000 12 kv: 13 enabled=true: 14 application-name: myapp To provide a feature toggle feature you can use the @RefreshScope annotation and trigger a refresh using spring actuator.\nSetup Project 76 Spring Boot - Vault \u0026amp; Property Refresh\nhttps://gitorko.github.io/spring-vault/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS 3 4$vault --version 5Vault v1.5.0 (\u0026#39;340cc2fa263f6cbd2861b41518da8a62c153e2e7+CHANGES\u0026#39;) Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Vault To install vault on mac run the command, for other OS download and install vault.\n1brew install vault Start the dev server\n1vault server -dev -log-level=INFO -dev-root-token-id=00000000-0000-0000-0000-000000000000 Once vault is up, insert some values\n1export VAULT_ADDR=http://localhost:8200 2export VAULT_SKIP_VERIFY=true 3export VAULT_TOKEN=00000000-0000-0000-0000-000000000000 4vault kv put secret/myapp/dev username=test password=test@123 dbname=test-db myKey=foobar featureFlag=true 5vault kv put secret/myapp/prod username=test password=test@123 dbname=test-db myKey=fooprod featureFlag=true You can login to vault UI with token '00000000-0000-0000-0000-000000000000'\nVault UI: http://127.0.0.1:8200/\nTo update property value\n1vault kv patch secret/myapp/dev featureFlag=true 2vault kv patch secret/myapp/dev featureFlag=false Dev To run the code.\n1./gradlew clean build 2./gradlew bootRun --args=\u0026#39;--spring.profiles.active=dev\u0026#39; 3./gradlew bootRun --args=\u0026#39;--spring.profiles.active=prod\u0026#39; Testing You should now see the values being fetched from vault.\nYou can now invoke greet api to see a 'Good Morning' response.\n1curl --location --request GET \u0026#39;localhost:8080/greet\u0026#39; Now lets change the feature flag to false in vault\n1vault kv patch secret/myapp/dev featureFlag=false In order for the values to be refreshed by spring context you need to make a call to actuator api\n1curl --location --request POST \u0026#39;http://localhost:8080/actuator/refresh\u0026#39; Now the values will be refreshed and invoking greet api will show 'Good Bye' response.\n1curl --location --request GET \u0026#39;localhost:8080/greet\u0026#39; Few more vault commands to try out\n1vault kv get -field=username secret/myapp/dev 2vault kv delete secret/myapp/dev 3vault kv delete secret/myapp/prod References https://cloud.spring.io/spring-cloud-vault/reference/html/\nhttps://www.vaultproject.io/\nhttps://spring.io/guides/gs/accessing-vault/\n","link":"https://gitorko.github.io/post/spring-vault/","section":"post","tags":["spring"],"title":"Spring Vault"},{"body":"","link":"https://gitorko.github.io/categories/vault/","section":"categories","tags":null,"title":"Vault"},{"body":"","link":"https://gitorko.github.io/tags/sleuth/","section":"tags","tags":null,"title":"sleuth"},{"body":"","link":"https://gitorko.github.io/categories/sleuth/","section":"categories","tags":null,"title":"Sleuth"},{"body":"Spring cloud sleuth helps you trace a request and zipkin server help you trace in a distributed environment.\nGithub: https://github.com/gitorko/project72\nSpring Cloud Sleuth \u0026amp; Zipkin How do you trace \u0026amp; debug a request in a single server? Now when it is deployed in pods and scaled how do you trace a request in a distributed environment? Spring Cloud Sleuth help you trace a request by appending unique trace id in the log statements. You can the publish such traces to the zipkin server which lets you visualize a request across distributed environment. You can then see the latency of each request in a distributed transaction.\nInternally it has 4 modules –\nCollector – Once any component sends the trace data arrives to Zipkin collector daemon, it is validated, stored, and indexed for lookups by the Zipkin collector. Storage – This module store and index the lookup data in backend. Cassandra, ElasticSearch and MySQL are supported. Search – This module provides a simple JSON API for finding and retrieving traces stored in backend. The primary consumer of this API is the Web UI. Web UI – A very nice UI interface for viewing traces. Code 1package com.demo.project72.service; 2 3import java.util.concurrent.TimeUnit; 4 5import brave.Span; 6import brave.Tracer; 7import lombok.RequiredArgsConstructor; 8import lombok.SneakyThrows; 9import lombok.extern.slf4j.Slf4j; 10import org.springframework.scheduling.annotation.Async; 11import org.springframework.scheduling.annotation.EnableAsync; 12import org.springframework.stereotype.Service; 13 14@Service 15@Slf4j 16@EnableAsync 17@RequiredArgsConstructor 18public class GreetService { 19 20 private final Tracer tracer; 21 22 @SneakyThrows 23 public void doSomeWorkSameSpan() { 24 TimeUnit.SECONDS.sleep(1); 25 log.info(\u0026#34;Work Span\u0026#34;); 26 } 27 28 public void doSomeWorkNewSpan() throws InterruptedException { 29 log.info(\u0026#34;Original span\u0026#34;); 30 Span newSpan = tracer.nextSpan().name(\u0026#34;newSpan\u0026#34;).start(); 31 try (Tracer.SpanInScope ws = tracer.withSpanInScope(newSpan.start())) { 32 TimeUnit.SECONDS.sleep(1); 33 log.info(\u0026#34;New Span\u0026#34;); 34 } finally { 35 newSpan.finish(); 36 } 37 log.info(\u0026#34;Original span\u0026#34;); 38 } 39 40 @Async 41 public void asyncMethod() throws InterruptedException { 42 log.info(\u0026#34;Start Async Method\u0026#34;); 43 TimeUnit.SECONDS.sleep(1); 44 log.info(\u0026#34;End Async Method\u0026#34;); 45 } 46} 1package com.demo.project72.config; 2 3import java.util.concurrent.Executor; 4 5import lombok.RequiredArgsConstructor; 6import org.springframework.beans.factory.BeanFactory; 7import org.springframework.cloud.sleuth.instrument.async.LazyTraceExecutor; 8import org.springframework.context.annotation.Configuration; 9import org.springframework.scheduling.annotation.AsyncConfigurer; 10import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor; 11 12@Configuration 13@RequiredArgsConstructor 14class ThreadConfig implements AsyncConfigurer { 15 16 private final BeanFactory beanFactory; 17 18 @Override 19 public Executor getAsyncExecutor() { 20 ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor(); 21 threadPoolTaskExecutor.setCorePoolSize(1); 22 threadPoolTaskExecutor.setMaxPoolSize(1); 23 threadPoolTaskExecutor.initialize(); 24 return new LazyTraceExecutor(beanFactory, threadPoolTaskExecutor); 25 } 26 27} 1spring: 2 main: 3 banner-mode: \u0026#34;off\u0026#34; 4 application: 5 name: project72 6 sleuth: 7 enabled: true 8 sampler: 9 probability: 1.0 10 zipkin: 11 base-url: http://localhost:9411/ 12 enabled: true 13 sender: 14 type: web 15 service: 16 name: my-service Setup Project 72 Spring Cloud Sleuth \u0026amp; Zipkin\nhttps://gitorko.github.io/spring-cloud-sleuth-zipkin/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Zipkin To run zipkin server use the docker command\n1docker run -d -p 9411:9411 --name my-zipkin openzipkin/zipkin 2docker stop my-zipkin 3docker start my-zipkin Login to zipkin UI, wait for few seconds for server to be up.\nhttp://localhost:9411/zipkin/\nDev To run the code.\n1./gradlew clean build 2./gradlew bootRun Testing Invoke the rest api and notice the trace\nhttp://localhost:8080/hello-span\nhttp://localhost:8080/hello-new-span\nhttp://localhost:8080/hello-async\nYou can now view the trace in zipkin UI\nReferences https://cloud.spring.io/spring-cloud-sleuth/\nhttps://zipkin.io/\n","link":"https://gitorko.github.io/post/spring-cloud-sleuth-zipkin/","section":"post","tags":["zipkin","sleuth"],"title":"Spring Cloud Sleuth \u0026 Zipkin"},{"body":"","link":"https://gitorko.github.io/tags/zipkin/","section":"tags","tags":null,"title":"zipkin"},{"body":"","link":"https://gitorko.github.io/categories/zipkin/","section":"categories","tags":null,"title":"Zipkin"},{"body":"","link":"https://gitorko.github.io/tags/amqp/","section":"tags","tags":null,"title":"amqp"},{"body":"","link":"https://gitorko.github.io/tags/rpc/","section":"tags","tags":null,"title":"rpc"},{"body":"Spring with RabbitMQ message broker that implements Advanced Message Queuing Protocol(AMQP)\nGithub: https://github.com/gitorko/project78\nRabbitMQ Exchanges are like post offices or mailboxes and clients publish a message to an AMQP exchange. There are four built-in exchange types\nDirect Exchange – Routes messages to a queue by matching a complete routing key Fanout Exchange – Routes messages to all the queues bound to it Topic Exchange – Routes messages to multiple queues by matching a routing key to a pattern Headers Exchange – Routes messages based on message headers Queues are bound to an exchange using a routing key. Messages are sent to an exchange with a routing key. AMQP (Advanced Message Queuing Protocol) is an open standard wire specification for asynchronous message communication, AMQP provides platform-neutral binary protocol standard, hence it can run on different environments \u0026amp; programming languages unlike JMS.\nRemote procedure call (RPC) is a way to invoking a function on another computer and waiting for the result. The call is synchronous and blocking in nature, so the client will wait for the response.\nCode Queue to send and receive messages\n1package com.demo.project78.queue; 2 3import com.demo.project78.config.AmqpConfig; 4import org.springframework.amqp.core.Queue; 5import org.springframework.context.annotation.Bean; 6import org.springframework.context.annotation.Configuration; 7 8@Configuration 9public class QueueConfig { 10 11 @Bean 12 public Queue simpleQueue() { 13 return new Queue(AmqpConfig.SIMPLE_QUEUE, true); 14 } 15 16} 17 18 19 20 1package com.demo.project78.queue; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.RequiredArgsConstructor; 6import lombok.extern.slf4j.Slf4j; 7import org.springframework.amqp.rabbit.core.RabbitTemplate; 8import org.springframework.stereotype.Component; 9 10@Component 11@Slf4j 12@RequiredArgsConstructor 13public class QueueSender { 14 15 private final RabbitTemplate rabbitTemplate; 16 17 public void send(Customer customer) { 18 rabbitTemplate.convertAndSend(AmqpConfig.SIMPLE_QUEUE, customer); 19 log.info(\u0026#34;Sent to Simple Queue : {}\u0026#34;, customer); 20 } 21} 1package com.demo.project78.queue; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.extern.slf4j.Slf4j; 6import org.springframework.amqp.rabbit.annotation.RabbitListener; 7import org.springframework.stereotype.Component; 8 9@Component 10@Slf4j 11public class QueueReceiver { 12 13 @RabbitListener(queues = AmqpConfig.SIMPLE_QUEUE) 14 public void receive(Customer customer) { 15 log.info(\u0026#34;{} Received \u0026#39;{}\u0026#39;\u0026#34;, AmqpConfig.SIMPLE_QUEUE, customer); 16 17 //Simulate a failure on processing 18 if (customer.getName().equals(\u0026#34;NO_NAME\u0026#34;)) { 19 throw new RuntimeException(\u0026#34;No customer name!\u0026#34;); 20 } 21 } 22} Direct exchange with routing key\n1package com.demo.project78.exchange; 2 3import com.demo.project78.config.AmqpConfig; 4import org.springframework.amqp.core.Binding; 5import org.springframework.amqp.core.BindingBuilder; 6import org.springframework.amqp.core.Queue; 7import org.springframework.amqp.core.TopicExchange; 8import org.springframework.context.annotation.Bean; 9import org.springframework.context.annotation.Configuration; 10 11@Configuration 12public class ExchangeConfig { 13 14 @Bean 15 public Queue directQueue() { 16 return new Queue(AmqpConfig.DIRECT_QUEUE, true); 17 } 18 19 @Bean 20 TopicExchange directExchange() { 21 return new TopicExchange(AmqpConfig.DIRECT_EXCHANGE); 22 } 23 24 @Bean 25 Binding binding() { 26 return BindingBuilder.bind(directQueue()).to(directExchange()).with(AmqpConfig.DIRECT_KEY); 27 } 28 29} 1package com.demo.project78.exchange; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.RequiredArgsConstructor; 6import lombok.extern.slf4j.Slf4j; 7import org.springframework.amqp.rabbit.core.RabbitTemplate; 8import org.springframework.stereotype.Component; 9 10@Component 11@Slf4j 12@RequiredArgsConstructor 13public class ExchangeSender { 14 15 private final RabbitTemplate rabbitTemplate; 16 17 public void send(Customer customer, String routingKey) { 18 rabbitTemplate.convertAndSend(AmqpConfig.DIRECT_EXCHANGE, routingKey, customer); 19 log.info(\u0026#34;Direct with key: {} Sent to Exchange: {}\u0026#34;, routingKey, customer); 20 } 21} 1package com.demo.project78.exchange; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.extern.slf4j.Slf4j; 6import org.springframework.amqp.rabbit.annotation.RabbitListener; 7import org.springframework.stereotype.Component; 8 9@Component 10@Slf4j 11public class ExchangeReceiver { 12 13 @RabbitListener(queues = AmqpConfig.DIRECT_QUEUE) 14 public void receive(Customer customer) { 15 log.info(\u0026#34;{} Received \u0026#39;{}\u0026#39;\u0026#34;, AmqpConfig.DIRECT_QUEUE, customer); 16 } 17 18} Fanout exchange\n1package com.demo.project78.fanout; 2 3import com.demo.project78.config.AmqpConfig; 4import org.springframework.amqp.core.BindingBuilder; 5import org.springframework.amqp.core.Declarables; 6import org.springframework.amqp.core.FanoutExchange; 7import org.springframework.amqp.core.Queue; 8import org.springframework.context.annotation.Bean; 9import org.springframework.context.annotation.Configuration; 10 11import static org.springframework.amqp.core.BindingBuilder.bind; 12 13@Configuration 14public class FanoutExchangeConfig { 15 16 @Bean 17 public Declarables fanoutBindings() { 18 Queue fanoutQueue1 = new Queue(AmqpConfig.FANOUT_QUEUE_1, false); 19 Queue fanoutQueue2 = new Queue(AmqpConfig.FANOUT_QUEUE_2, false); 20 FanoutExchange fanoutExchange = new FanoutExchange(AmqpConfig.FANOUT_EXCHANGE); 21 22 return new Declarables( 23 fanoutQueue1, 24 fanoutQueue2, 25 fanoutExchange, 26 bind(fanoutQueue1).to(fanoutExchange), 27 BindingBuilder.bind(fanoutQueue2).to(fanoutExchange)); 28 } 29} 1package com.demo.project78.fanout; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.RequiredArgsConstructor; 6import lombok.extern.slf4j.Slf4j; 7import org.springframework.amqp.rabbit.core.RabbitTemplate; 8import org.springframework.stereotype.Component; 9 10@Component 11@Slf4j 12@RequiredArgsConstructor 13public class FanoutSender { 14 15 private final RabbitTemplate rabbitTemplate; 16 17 public void send(Customer customer, String routingKey) { 18 rabbitTemplate.convertAndSend(AmqpConfig.FANOUT_EXCHANGE, routingKey, customer); 19 //routing key doesnt matter 20 log.info(\u0026#34;Fanout with key: {} Sent to Exchange: {}\u0026#34;, routingKey, customer); 21 } 22} 1package com.demo.project78.fanout; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.extern.slf4j.Slf4j; 6import org.springframework.amqp.rabbit.annotation.RabbitListener; 7import org.springframework.stereotype.Component; 8 9@Component 10@Slf4j 11public class FanoutReceiver { 12 13 @RabbitListener(queues = AmqpConfig.FANOUT_QUEUE_1) 14 public void receive1(Customer customer) { 15 log.info(\u0026#34;{} Received \u0026#39;{}\u0026#39;\u0026#34;, AmqpConfig.FANOUT_QUEUE_1, customer); 16 } 17 18 @RabbitListener(queues = AmqpConfig.FANOUT_QUEUE_2) 19 public void receive2(Customer customer) { 20 log.info(\u0026#34;{} Received \u0026#39;{}\u0026#39;\u0026#34;, AmqpConfig.FANOUT_QUEUE_2, customer); 21 } 22} Topic exchange\n1package com.demo.project78.topic; 2 3import com.demo.project78.config.AmqpConfig; 4import org.springframework.amqp.core.BindingBuilder; 5import org.springframework.amqp.core.Declarables; 6import org.springframework.amqp.core.Queue; 7import org.springframework.amqp.core.TopicExchange; 8import org.springframework.context.annotation.Bean; 9import org.springframework.context.annotation.Configuration; 10 11@Configuration 12public class TopicExchangeConfig { 13 14 @Bean 15 public Declarables topicBindings() { 16 Queue topicQueue1 = new Queue(AmqpConfig.TOPIC_QUEUE_1, false); 17 Queue topicQueue2 = new Queue(AmqpConfig.TOPIC_QUEUE_2, false); 18 19 TopicExchange topicExchange = new TopicExchange(AmqpConfig.TOPIC_EXCHANGE); 20 21 return new Declarables( 22 topicQueue1, 23 topicQueue2, 24 topicExchange, 25 BindingBuilder 26 .bind(topicQueue1) 27 .to(topicExchange).with(\u0026#34;*.booking.*\u0026#34;), 28 BindingBuilder 29 .bind(topicQueue2) 30 .to(topicExchange).with(\u0026#34;#.error\u0026#34;)); 31 } 32} 1package com.demo.project78.topic; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.RequiredArgsConstructor; 6import lombok.extern.slf4j.Slf4j; 7import org.springframework.amqp.rabbit.core.RabbitTemplate; 8import org.springframework.stereotype.Component; 9 10@Component 11@Slf4j 12@RequiredArgsConstructor 13public class TopicSender { 14 15 private final RabbitTemplate rabbitTemplate; 16 17 public void send(Customer customer, String routingKey) { 18 rabbitTemplate.convertAndSend(AmqpConfig.TOPIC_EXCHANGE, routingKey, customer); 19 log.info(\u0026#34;Topic with key: {} Sent to Exchange: {}\u0026#34;, routingKey, customer); 20 } 21} 1package com.demo.project78.topic; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.extern.slf4j.Slf4j; 6import org.springframework.amqp.rabbit.annotation.RabbitListener; 7import org.springframework.stereotype.Component; 8 9@Component 10@Slf4j 11public class TopicReceiver { 12 13 @RabbitListener(queues = AmqpConfig.TOPIC_QUEUE_1) 14 public void receive1(Customer customer) { 15 log.info(\u0026#34;{} Received \u0026#39;{}\u0026#39;\u0026#34;, AmqpConfig.TOPIC_QUEUE_1, customer); 16 } 17 18 @RabbitListener(queues = AmqpConfig.TOPIC_QUEUE_2) 19 public void receive2(Customer customer) { 20 log.info(\u0026#34;{} Received \u0026#39;{}\u0026#39;\u0026#34;, AmqpConfig.TOPIC_QUEUE_2, customer); 21 } 22} Error handling \u0026amp; Exchange creation\n1package com.demo.project78.config; 2 3import com.fasterxml.jackson.databind.ObjectMapper; 4import lombok.extern.slf4j.Slf4j; 5import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory; 6import org.springframework.amqp.rabbit.connection.ConnectionFactory; 7import org.springframework.amqp.rabbit.core.RabbitTemplate; 8import org.springframework.amqp.rabbit.listener.ConditionalRejectingErrorHandler; 9import org.springframework.amqp.rabbit.support.ListenerExecutionFailedException; 10import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter; 11import org.springframework.context.annotation.Bean; 12import org.springframework.context.annotation.Configuration; 13import org.springframework.util.ErrorHandler; 14 15@Configuration 16@Slf4j 17public class AmqpConfig { 18 19 public static final String SIMPLE_QUEUE = \u0026#34;simple.queue\u0026#34;; 20 21 public static final String DIRECT_EXCHANGE = \u0026#34;direct.exchange\u0026#34;; 22 public static final String DIRECT_QUEUE = \u0026#34;direct.queue\u0026#34;; 23 public static final String DIRECT_KEY = \u0026#34;direct-key\u0026#34;; 24 25 public static final String RPC_EXCHANGE = \u0026#34;rpc.exchange\u0026#34;; 26 public static final String RPC_QUEUE = \u0026#34;rpc.queue\u0026#34;; 27 public static final String RPC_KEY = \u0026#34;rpc-key\u0026#34;; 28 29 public static final String FANOUT_QUEUE_1 = \u0026#34;fanout.queue1\u0026#34;; 30 public static final String FANOUT_QUEUE_2 = \u0026#34;fanout.queue2\u0026#34;; 31 public static final String FANOUT_EXCHANGE = \u0026#34;fanout.exchange\u0026#34;; 32 public static final String FANOUT_KEY1 = \u0026#34;*.fan-key1.*\u0026#34;; 33 public static final String FANOUT_KEY2 = \u0026#34;*.fan-key2.*\u0026#34;; 34 35 public static final String TOPIC_QUEUE_1 = \u0026#34;topic.booking\u0026#34;; 36 public static final String TOPIC_QUEUE_2 = \u0026#34;topic.error\u0026#34;; 37 public static final String TOPIC_EXCHANGE = \u0026#34;topic.exchange\u0026#34;; 38 39 @Bean 40 public Jackson2JsonMessageConverter jsonMessageConverter() { 41 ObjectMapper objectMapper = new ObjectMapper(); 42 return new Jackson2JsonMessageConverter(objectMapper); 43 } 44 45 @Bean 46 public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) { 47 final RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory); 48 rabbitTemplate.setMessageConverter(jsonMessageConverter()); 49 return rabbitTemplate; 50 } 51 52 /** 53 * Without setting the error handle the failed message getting re-queued will cause infinite loops 54 */ 55 @Bean 56 public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) { 57 SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory(); 58 factory.setConnectionFactory(connectionFactory); 59 factory.setMessageConverter(jsonMessageConverter()); 60 factory.setErrorHandler(errorHandler()); 61 return factory; 62 } 63 64 @Bean 65 public ErrorHandler errorHandler() { 66 return new ConditionalRejectingErrorHandler(new MyFatalExceptionStrategy()); 67 } 68 69 public static class MyFatalExceptionStrategy extends ConditionalRejectingErrorHandler.DefaultExceptionStrategy { 70 @Override 71 public boolean isFatal(Throwable t) { 72 if (t instanceof ListenerExecutionFailedException) { 73 log.error(\u0026#34;Fatal error: {}\u0026#34;, t.getMessage()); 74 return false; 75 } 76 return super.isFatal(t); 77 } 78 } 79} 80 RPC\n1package com.demo.project78.rpc.config; 2 3import com.demo.project78.config.AmqpConfig; 4import org.springframework.amqp.core.Binding; 5import org.springframework.amqp.core.BindingBuilder; 6import org.springframework.amqp.core.Queue; 7import org.springframework.amqp.core.TopicExchange; 8import org.springframework.context.annotation.Bean; 9import org.springframework.context.annotation.Configuration; 10 11@Configuration 12public class RpcConfig { 13 14 @Bean 15 public Queue rpcQueue() { 16 return new Queue(AmqpConfig.RPC_QUEUE, true); 17 } 18 19 @Bean 20 TopicExchange rpcExchange() { 21 return new TopicExchange(AmqpConfig.RPC_EXCHANGE); 22 } 23 24 @Bean 25 Binding binding() { 26 return BindingBuilder.bind(rpcQueue()).to(rpcExchange()).with(AmqpConfig.RPC_KEY); 27 } 28 29} 30 1package com.demo.project78.rpc.client; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.RequiredArgsConstructor; 6import lombok.extern.slf4j.Slf4j; 7import org.springframework.amqp.rabbit.core.RabbitTemplate; 8import org.springframework.stereotype.Component; 9 10@Component 11@RequiredArgsConstructor 12@Slf4j 13public class RpcClient { 14 15 private final RabbitTemplate rabbitTemplate; 16 17 public void send(Customer customer, String routingKey) { 18 rabbitTemplate.setReplyTimeout(60000); 19 log.info(\u0026#34;RPC Call with key: {} Sent to Exchange: {}\u0026#34;, routingKey, customer); 20 String response = (String) rabbitTemplate.convertSendAndReceive(AmqpConfig.RPC_EXCHANGE, routingKey, customer); 21 log.info(\u0026#34;RPC Call got \u0026#39;{}\u0026#39;\u0026#34;, response); 22 } 23 24} 1package com.demo.project78.rpc.server; 2 3import com.demo.project78.config.AmqpConfig; 4import com.demo.project78.model.Customer; 5import lombok.SneakyThrows; 6import lombok.extern.slf4j.Slf4j; 7import org.springframework.amqp.rabbit.annotation.RabbitListener; 8import org.springframework.stereotype.Component; 9 10import java.util.concurrent.TimeUnit; 11 12@Component 13@Slf4j 14public class RpcServer { 15 16 @SneakyThrows 17 @RabbitListener(queues = AmqpConfig.RPC_QUEUE) 18 public String receive(Customer customer) { 19 log.info(\u0026#34;{} Received \u0026#39;{}\u0026#39;\u0026#34;, AmqpConfig.RPC_QUEUE, customer); 20 TimeUnit.SECONDS.sleep(5); 21 return \u0026#34;Hello world, \u0026#34; + customer.getName(); 22 } 23 24 25} Setup Project 78 Spring \u0026amp; RabbitMQ\nhttps://gitorko.github.io/spring-amqp/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS RabbitMQ Run the docker command to start a rabbitmq instance\n1docker run -d --hostname my-rabbit --name my-rabbit -e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=guest -p 8080:15672 -p 5672:5672 rabbitmq:3-management Open the rabbitmq console\nhttp://localhost:8080\n1user:guest 2pwd: guest Dev 1./gradlew bootRun References https://spring.io/projects/spring-amqp\nhttps://www.rabbitmq.com/tutorials/tutorial-six-spring-amqp.html\n","link":"https://gitorko.github.io/post/spring-amqp/","section":"post","tags":["rabbitmq","amqp","rpc"],"title":"Spring AMQP"},{"body":"Java based implementation of a state machine \u0026amp; spring library based implementation of state machine. State machine lets you move to different states based on the events, you can also have listeners registered that get notified on state change events and carry out certain actions.\nGithub: https://github.com/gitorko/project77\nState Machine We will use the shopping cart state machine diagram as a reference to implement our code. If any invalid events are sent then an exception is thrown.\nCode Here we use state design pattern and observer pattern to design a state machine.\n1package com.demo.project77.simple; 2 3import java.util.ArrayList; 4import java.util.List; 5import java.util.concurrent.TimeUnit; 6 7import lombok.Builder; 8import lombok.Data; 9import lombok.SneakyThrows; 10 11public class Application { 12 13 @SneakyThrows 14 public static void main(String[] args) throws RuntimeException { 15 16 NotifyListener notifyListener = new NotifyListener(); 17 notifyListener.registerObserver(new ShippedEventObserver()); 18 19 StateMachineContext stateMachine = StateMachineContext.builder() 20 .state(new BeginState()) 21 .notifyListener(notifyListener) 22 .build(); 23 stateMachine.sendEvent(ShoppingCartEvent.ADD_ITEM); 24 if (stateMachine.getId() != ShoppingCartState.SHOPPING_STATE) throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 25 stateMachine.sendEvent(ShoppingCartEvent.ADD_ITEM); 26 if (stateMachine.getId() != ShoppingCartState.SHOPPING_STATE) throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 27 stateMachine.sendEvent(ShoppingCartEvent.MAKE_PAYMENT); 28 if (stateMachine.getId() != ShoppingCartState.PAYMENT_STATE) throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 29 stateMachine.sendEvent(ShoppingCartEvent.PAYMENT_FAIL); 30 if (stateMachine.getId() != ShoppingCartState.SHOPPING_STATE) throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 31 stateMachine.sendEvent(ShoppingCartEvent.MAKE_PAYMENT); 32 stateMachine.sendEvent(ShoppingCartEvent.PAYMENT_SUCESS); 33 if (stateMachine.getId() != ShoppingCartState.SHIPPED_STATE) throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 34 35 } 36} 37 38@Data 39@Builder 40class StateMachineContext { 41 State state; 42 ShoppingCartState id; 43 NotifyListener notifyListener; 44 45 public void sendEvent(ShoppingCartEvent event) { 46 state.nextState(this, event); 47 notifyListener.notifyObservers(this.state.getClass().getSimpleName()); 48 } 49} 50 51enum ShoppingCartState { 52 BEGIN_STATE, 53 SHOPPING_STATE, 54 PAYMENT_STATE, 55 SHIPPED_STATE; 56} 57 58enum ShoppingCartEvent { 59 ADD_ITEM, 60 MAKE_PAYMENT, 61 PAYMENT_SUCESS, 62 PAYMENT_FAIL; 63} 64 65 66interface State { 67 void nextState(StateMachineContext stateMachine, ShoppingCartEvent event); 68} 69 70@Data 71class BeginState implements State { 72 public ShoppingCartState id = ShoppingCartState.BEGIN_STATE; 73 74 @Override 75 public void nextState(StateMachineContext stateMachine, ShoppingCartEvent event) { 76 switch (event) { 77 case ADD_ITEM: { 78 ShoppingState nextState = new ShoppingState(); 79 stateMachine.setState(nextState); 80 stateMachine.setId(nextState.id); 81 break; 82 } 83 default: 84 throw new UnsupportedOperationException(\u0026#34;Not Supported!\u0026#34;); 85 } 86 } 87} 88 89@Data 90class ShoppingState implements State { 91 ShoppingCartState id = ShoppingCartState.SHOPPING_STATE; 92 93 @Override 94 public void nextState(StateMachineContext stateMachine, ShoppingCartEvent event) { 95 switch (event) { 96 case ADD_ITEM: { 97 ShoppingState nextState = new ShoppingState(); 98 stateMachine.setState(nextState); 99 stateMachine.setId(nextState.id); 100 break; 101 } 102 case MAKE_PAYMENT: { 103 PaymentState nextState = new PaymentState(); 104 stateMachine.setState(nextState); 105 stateMachine.setId(nextState.id); 106 break; 107 } 108 default: 109 throw new UnsupportedOperationException(\u0026#34;Not Supported!\u0026#34;); 110 } 111 } 112} 113 114@Data 115class PaymentState implements State { 116 ShoppingCartState id = ShoppingCartState.PAYMENT_STATE; 117 118 @Override 119 public void nextState(StateMachineContext stateMachine, ShoppingCartEvent event) { 120 switch (event) { 121 case PAYMENT_SUCESS: { 122 ShippedState nextState = new ShippedState(); 123 stateMachine.setState(nextState); 124 stateMachine.setId(nextState.id); 125 break; 126 } 127 case PAYMENT_FAIL: 128 ShoppingState nextState = new ShoppingState(); 129 stateMachine.setState(nextState); 130 stateMachine.setId(nextState.id); 131 break; 132 default: 133 throw new UnsupportedOperationException(\u0026#34;Not Supported!\u0026#34;); 134 } 135 } 136} 137 138@Data 139class ShippedState implements State { 140 ShoppingCartState id = ShoppingCartState.SHIPPED_STATE; 141 142 @Override 143 public void nextState(StateMachineContext stateMachine, ShoppingCartEvent event) { 144 throw new UnsupportedOperationException(\u0026#34;Not Supported!\u0026#34;); 145 } 146} 147 148interface Observer { 149 public void notify(String message); 150} 151 152class ShippedEventObserver implements Observer { 153 @Override 154 public void notify(String message) { 155 if (message.startsWith(\u0026#34;ShippedState\u0026#34;)) { 156 //This observer is interested only in shipped events. 157 System.out.println(\u0026#34;ShippedEventObserver got Message: \u0026#34; + message); 158 } 159 } 160} 161 162interface Subject { 163 public void registerObserver(Observer observer); 164 165 public void notifyObservers(String tick); 166} 167 168class NotifyListener implements Subject { 169 List\u0026lt;Observer\u0026gt; notifyList = new ArrayList\u0026lt;\u0026gt;(); 170 171 @Override 172 public void registerObserver(Observer observer) { 173 notifyList.add(observer); 174 } 175 176 @Override 177 public void notifyObservers(String message) { 178 notifyList.forEach(e -\u0026gt; e.notify(message)); 179 } 180} We can also use the spring state machine libraries\n1package com.demo.project77.spring; 2 3import java.util.EnumSet; 4 5import lombok.extern.slf4j.Slf4j; 6import org.springframework.boot.CommandLineRunner; 7import org.springframework.boot.SpringApplication; 8import org.springframework.boot.autoconfigure.SpringBootApplication; 9import org.springframework.context.annotation.Bean; 10import org.springframework.context.annotation.Configuration; 11import org.springframework.messaging.Message; 12import org.springframework.messaging.support.MessageBuilder; 13import org.springframework.statemachine.StateMachine; 14import org.springframework.statemachine.action.Action; 15import org.springframework.statemachine.config.EnableStateMachineFactory; 16import org.springframework.statemachine.config.EnumStateMachineConfigurerAdapter; 17import org.springframework.statemachine.config.StateMachineFactory; 18import org.springframework.statemachine.config.builders.StateMachineConfigurationConfigurer; 19import org.springframework.statemachine.config.builders.StateMachineStateConfigurer; 20import org.springframework.statemachine.config.builders.StateMachineTransitionConfigurer; 21import org.springframework.statemachine.listener.StateMachineListenerAdapter; 22import org.springframework.statemachine.state.State; 23import reactor.core.publisher.Mono; 24 25@SpringBootApplication 26@Slf4j 27public class Application { 28 29 public static void main(String[] args) { 30 SpringApplication.run(Application.class, args); 31 } 32 33 @Bean 34 public CommandLineRunner testStateMachine(StateMachineFactory\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; stateMachineFactory) { 35 return args -\u0026gt; { 36 StateMachine\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; stateMachine = stateMachineFactory.getStateMachine( 37 \u0026#34;mymachine\u0026#34;); 38 stateMachine.sendEvent(getEventMessage(ShoppingCartEvent.ADD_ITEM)).subscribe(); 39 if (!(stateMachine.getState().getId().equals(ShoppingCartState.SHOPPING_STATE))) 40 throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 41 stateMachine.sendEvent(getEventMessage(ShoppingCartEvent.ADD_ITEM)).subscribe(); 42 if (!(stateMachine.getState().getId().equals(ShoppingCartState.SHOPPING_STATE))) 43 throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 44 stateMachine.sendEvent(getEventMessage(ShoppingCartEvent.MAKE_PAYMENT)).subscribe(); 45 if (!(stateMachine.getState().getId().equals(ShoppingCartState.PAYMENT_STATE))) 46 throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 47 stateMachine.sendEvent(getEventMessage(ShoppingCartEvent.PAYMENT_FAIL)).subscribe(); 48 if (!(stateMachine.getState().getId().equals(ShoppingCartState.SHOPPING_STATE))) 49 throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 50 stateMachine.sendEvent(getEventMessage(ShoppingCartEvent.MAKE_PAYMENT)).subscribe(); 51 if (!(stateMachine.getState().getId().equals(ShoppingCartState.PAYMENT_STATE))) 52 throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 53 stateMachine.sendEvent(getEventMessage(ShoppingCartEvent.PAYMENT_SUCESS)).subscribe(); 54 if (!(stateMachine.getState().getId().equals(ShoppingCartState.SHIPPED_STATE))) 55 throw new RuntimeException(\u0026#34;ERROR\u0026#34;); 56 log.info(\u0026#34;Final State: {}\u0026#34;, stateMachine.getState().getId()); 57 }; 58 } 59 60 private Mono\u0026lt;Message\u0026lt;ShoppingCartEvent\u0026gt;\u0026gt; getEventMessage(ShoppingCartEvent event) { 61 return Mono.just(MessageBuilder.withPayload(event).build()); 62 } 63} 64 65enum ShoppingCartEvent { 66 ADD_ITEM, 67 MAKE_PAYMENT, 68 PAYMENT_SUCESS, 69 PAYMENT_FAIL 70} 71 72enum ShoppingCartState { 73 BEGIN_STATE, 74 SHOPPING_STATE, 75 PAYMENT_STATE, 76 SHIPPED_STATE; 77} 78 79@Configuration 80@EnableStateMachineFactory 81@Slf4j 82class ShoppingStateMachineConfig extends EnumStateMachineConfigurerAdapter\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; { 83 84 @Override 85 public void configure(StateMachineStateConfigurer\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; states) throws Exception { 86 states 87 .withStates() 88 .initial(ShoppingCartState.BEGIN_STATE) 89 .end(ShoppingCartState.SHIPPED_STATE) 90 .states(EnumSet.allOf(ShoppingCartState.class)); 91 } 92 93 @Override 94 public void configure(StateMachineTransitionConfigurer\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; transitions) 95 throws Exception { 96 transitions 97 .withExternal() 98 .source(ShoppingCartState.BEGIN_STATE) 99 .target(ShoppingCartState.SHOPPING_STATE) 100 .event(ShoppingCartEvent.ADD_ITEM) 101 .action(initAction()) 102 .and() 103 .withExternal() 104 .source(ShoppingCartState.SHOPPING_STATE) 105 .target(ShoppingCartState.SHOPPING_STATE) 106 .event(ShoppingCartEvent.ADD_ITEM) 107 .and() 108 .withExternal() 109 .source(ShoppingCartState.SHOPPING_STATE) 110 .target(ShoppingCartState.PAYMENT_STATE) 111 .event(ShoppingCartEvent.MAKE_PAYMENT) 112 .and() 113 .withExternal() 114 .source(ShoppingCartState.PAYMENT_STATE) 115 .target(ShoppingCartState.SHIPPED_STATE) 116 .event(ShoppingCartEvent.PAYMENT_SUCESS) 117 .and() 118 .withExternal() 119 .source(ShoppingCartState.PAYMENT_STATE) 120 .target(ShoppingCartState.SHOPPING_STATE) 121 .event(ShoppingCartEvent.PAYMENT_FAIL); 122 } 123 124 @Override 125 public void configure(StateMachineConfigurationConfigurer\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; config) 126 throws Exception { 127 config 128 .withConfiguration() 129 .autoStartup(true) 130 .listener(new GlobalStateMachineListener()); 131 } 132 133 @Bean 134 public Action\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; initAction() { 135 log.info(\u0026#34;init action called!\u0026#34;); 136 return ctx -\u0026gt; log.info(\u0026#34;Id: {}\u0026#34;, ctx.getTarget().getId()); 137 } 138} 139 140@Slf4j 141class GlobalStateMachineListener extends StateMachineListenerAdapter\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; { 142 @Override 143 public void stateChanged(State\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; from, State\u0026lt;ShoppingCartState, ShoppingCartEvent\u0026gt; to) { 144 log.info(\u0026#34;State changed to : {}\u0026#34;, to.getId()); 145 } 146} References https://spring.io/projects/spring-statemachine\n","link":"https://gitorko.github.io/post/state-machine/","section":"post","tags":["design-pattern","state-machine"],"title":"State Machine"},{"body":"","link":"https://gitorko.github.io/tags/state-machine/","section":"tags","tags":null,"title":"state-machine"},{"body":"","link":"https://gitorko.github.io/categories/locking/","section":"categories","tags":null,"title":"Locking"},{"body":"When an app is deployed on more than one server how to you ensure that 2 threads dont modify the same record in db? If the operation was performed on a single JVM you could look at locking but since there are many jvm the locking has to be done at database level.\nGithub: https://github.com/gitorko/project67\nLocking Lets say we have a ticket booking service with a table holding all the free tickets and multiple servers running our app. How do we ensure that 2 users cant book the same seat? Since the app runs on different JVM we cant syncronize or use jvm locks.\nHibernate provides two approaches to handle concurrency at database level:\nPessimistic Approach - The lock is now applied by the database at row level or table level. If the lock is a WRITE lock it prevents other threads from modifying the data. Optimistic Approach - A version field is introduced to the database table, The JPA ensures that version check is done before saving data. Scalability is high with this approach. Pessimistic locking Three Pessimistic LockModeTypes are supported in JPA.\nPESSIMISTIC_READ - Rows are locked and can be read by other transactions, but they cannot be deleted or modified. PESSIMISTIC_READ guarantees repeatable reads. PESSIMISTIC_WRITE - Rows are locked and cannot be read, modified or deleted by other transactions. For PESSIMISTIC_WRITE no phantom reads can occur and access to data must be serialized. PESSIMISTIC_FORCE_INCREMENT - Rows are locked and cannot be modified or deleted. For versioned entities, their version number is incremented as soon as the query executes. 1package com.demo.project67.pessimistic; 2 3import java.util.Date; 4import java.util.concurrent.ExecutorService; 5import java.util.concurrent.Executors; 6import java.util.concurrent.TimeUnit; 7import javax.persistence.Entity; 8import javax.persistence.GeneratedValue; 9import javax.persistence.GenerationType; 10import javax.persistence.Id; 11import javax.persistence.LockModeType; 12import javax.persistence.QueryHint; 13import javax.persistence.Temporal; 14import javax.persistence.TemporalType; 15import javax.transaction.Transactional; 16 17import lombok.AllArgsConstructor; 18import lombok.Builder; 19import lombok.Data; 20import lombok.NoArgsConstructor; 21import net.bytebuddy.implementation.bytecode.Throw; 22import org.springframework.beans.factory.annotation.Autowired; 23import org.springframework.boot.CommandLineRunner; 24import org.springframework.boot.SpringApplication; 25import org.springframework.boot.autoconfigure.EnableAutoConfiguration; 26import org.springframework.context.annotation.Bean; 27import org.springframework.context.annotation.ComponentScan; 28import org.springframework.context.annotation.Configuration; 29import org.springframework.data.jpa.repository.JpaRepository; 30import org.springframework.data.jpa.repository.Lock; 31import org.springframework.data.jpa.repository.QueryHints; 32import org.springframework.stereotype.Component; 33import org.springframework.stereotype.Repository; 34 35@Configuration 36@EnableAutoConfiguration 37@ComponentScan(basePackages = \u0026#34;com.demo.project67.pessimistic\u0026#34;) 38public class PessimisticMain { 39 40 @Autowired 41 MyService myService; 42 43 ExecutorService pool = Executors.newCachedThreadPool(); 44 45 public static void main(String[] args) { 46 SpringApplication.run(PessimisticMain.class, args); 47 } 48 49 @Bean 50 public CommandLineRunner commandLineRunner() { 51 return args -\u0026gt; { 52 myService.seedData(); 53 pool.submit(() -\u0026gt; { 54 Boolean status = myService.bookSeat(1, \u0026#34;Joe\u0026#34;); 55 System.out.println(\u0026#34;Booking for Joe success: \u0026#34;+ status); 56 }); 57 pool.submit(() -\u0026gt; { 58 Boolean status = myService.bookSeat(1, \u0026#34;Jack\u0026#34;); 59 System.out.println(\u0026#34;Booking for Jack success: \u0026#34;+ status); 60 }); 61 pool.shutdown(); 62 pool.awaitTermination(60, TimeUnit.SECONDS); 63 myService.showData(); 64 }; 65 } 66} 67 68@Entity 69@Data 70@Builder 71@AllArgsConstructor 72@NoArgsConstructor 73class Ticket { 74 @Id 75 @GeneratedValue(strategy = GenerationType.AUTO) 76 private Long id; 77 private Integer seatNumber; 78 @Temporal(TemporalType.DATE) 79 private Date onDay; 80 private String bookedBy; 81} 82 83@Repository 84interface TicketRepository extends JpaRepository\u0026lt;Ticket, Long\u0026gt; { 85 86 @Lock(LockModeType.PESSIMISTIC_WRITE) 87 @QueryHints({@QueryHint(name = \u0026#34;javax.persistence.lock.timeout\u0026#34;, value = \u0026#34;3000\u0026#34;)}) 88 Ticket findBySeatNumberAndOnDay(Integer seatNumber, Date onDay); 89 90} 91 92@Component 93class MyService { 94 @Autowired 95 TicketRepository ticketRepository; 96 97 @Transactional 98 public Boolean bookSeat(Integer seatNumber, String personName) { 99 try { 100 System.out.println(\u0026#34;Booking seat: \u0026#34; + seatNumber + \u0026#34; By: \u0026#34; + personName); 101 Ticket seat = ticketRepository.findBySeatNumberAndOnDay(seatNumber, new Date()); 102 if (seat.getBookedBy() == null) { 103 seat.setBookedBy(personName); 104 ticketRepository.save(seat); 105 return true; 106 } else { 107 return false; 108 } 109 } catch (Exception ex) { 110 System.out.println(ex.getMessage()); 111 } 112 return false; 113 } 114 115 public void showData() { 116 ticketRepository.findAll().forEach(e -\u0026gt; { 117 System.out.println(e); 118 }); 119 } 120 121 public void seedData() { 122 ticketRepository.deleteAll(); 123 for (int i = 1; i \u0026lt;= 3; i++) { 124 ticketRepository.save(Ticket.builder().seatNumber(i).onDay(new Date()).build()); 125 } 126 } 127} Run the code and you will see that only one person is able to book the ticket. Notice the 'for update' in the sql query that is fired which will lock the row.\n1Booking seat: 1 By: Joe 2Booking seat: 1 By: Jack 3Hibernate: select ticket0_.id as id1_0_, ticket0_.booked_by as booked_b2_0_, ticket0_.on_day as on_day3_0_, ticket0_.seat_number as seat_num4_0_ from ticket ticket0_ where ticket0_.seat_number=? and ticket0_.on_day=? for update 4Hibernate: select ticket0_.id as id1_0_, ticket0_.booked_by as booked_b2_0_, ticket0_.on_day as on_day3_0_, ticket0_.seat_number as seat_num4_0_ from ticket ticket0_ where ticket0_.seat_number=? and ticket0_.on_day=? for update 5Hibernate: update ticket set booked_by=?, on_day=?, seat_number=? where id=? 6Booking for Jack success: true 7Booking for Joe success: false 8Hibernate: select ticket0_.id as id1_0_, ticket0_.booked_by as booked_b2_0_, ticket0_.on_day as on_day3_0_, ticket0_.seat_number as seat_num4_0_ from ticket ticket0_ 9Ticket(id=1, seatNumber=1, onDay=2020-08-17, bookedBy=Jack) 10Ticket(id=2, seatNumber=2, onDay=2020-08-17, bookedBy=null) 11Ticket(id=3, seatNumber=3, onDay=2020-08-17, bookedBy=null) Optimistic locking 1package com.demo.project67.optimistic; 2 3import java.util.Date; 4import java.util.concurrent.ExecutorService; 5import java.util.concurrent.Executors; 6import java.util.concurrent.TimeUnit; 7import javax.persistence.Entity; 8import javax.persistence.GeneratedValue; 9import javax.persistence.GenerationType; 10import javax.persistence.Id; 11import javax.persistence.Temporal; 12import javax.persistence.TemporalType; 13import javax.persistence.Version; 14import javax.transaction.Transactional; 15 16import lombok.AllArgsConstructor; 17import lombok.Builder; 18import lombok.Data; 19import lombok.NoArgsConstructor; 20import org.springframework.beans.factory.annotation.Autowired; 21import org.springframework.boot.CommandLineRunner; 22import org.springframework.boot.SpringApplication; 23import org.springframework.boot.autoconfigure.EnableAutoConfiguration; 24import org.springframework.context.annotation.Bean; 25import org.springframework.context.annotation.ComponentScan; 26import org.springframework.context.annotation.Configuration; 27import org.springframework.data.jpa.repository.JpaRepository; 28import org.springframework.stereotype.Component; 29import org.springframework.stereotype.Repository; 30 31@Configuration 32@EnableAutoConfiguration 33@ComponentScan(basePackages = \u0026#34;com.demo.project67.optimistic\u0026#34;) 34public class OptimisticMain { 35 36 @Autowired 37 MyService myService; 38 39 ExecutorService pool = Executors.newCachedThreadPool(); 40 41 public static void main(String[] args) { 42 SpringApplication.run(OptimisticMain.class, args); 43 } 44 45 @Bean 46 public CommandLineRunner commandLineRunner() { 47 return args -\u0026gt; { 48 myService.seedData(); 49 pool.submit(() -\u0026gt; { 50 Boolean status = myService.bookSeat(1, \u0026#34;Joe\u0026#34;); 51 System.out.println(\u0026#34;Booking for Joe success: \u0026#34;+ status); 52 }); 53 pool.submit(() -\u0026gt; { 54 Boolean status = myService.bookSeat(1, \u0026#34;Jack\u0026#34;); 55 System.out.println(\u0026#34;Booking for Jack success: \u0026#34;+ status); 56 }); 57 pool.shutdown(); 58 pool.awaitTermination(60, TimeUnit.SECONDS); 59 myService.showData(); 60 }; 61 } 62} 63 64@Entity 65@Data 66@Builder 67@AllArgsConstructor 68@NoArgsConstructor 69class Ticket { 70 @Id 71 @GeneratedValue(strategy = GenerationType.AUTO) 72 private Long id; 73 private Integer seatNumber; 74 @Temporal(TemporalType.DATE) 75 private Date onDay; 76 private String bookedBy; 77 @Version 78 private int version; 79} 80 81@Repository 82interface TicketRepository extends JpaRepository\u0026lt;Ticket, Long\u0026gt; { 83 @Transactional 84 Ticket findBySeatNumberAndOnDay(Integer seatNumber, Date onDay); 85} 86 87@Component 88class MyService { 89 @Autowired 90 TicketRepository ticketRepository; 91 92 public Boolean bookSeat(Integer seatNumber, String personName) { 93 try { 94 System.out.println(\u0026#34;Booking seat: \u0026#34; + seatNumber + \u0026#34; By: \u0026#34; + personName); 95 Ticket seat = ticketRepository.findBySeatNumberAndOnDay(seatNumber, new Date()); 96 if (seat.getBookedBy() == null) { 97 seat.setBookedBy(personName); 98 ticketRepository.save(seat); 99 return true; 100 } else { 101 return false; 102 } 103 } catch (Exception ex) { 104 System.out.println(ex.getMessage()); 105 } 106 return false; 107 } 108 109 public void showData() { 110 ticketRepository.findAll().forEach(e -\u0026gt; { 111 System.out.println(e); 112 }); 113 } 114 115 public void seedData() { 116 ticketRepository.deleteAll(); 117 for (int i = 1; i \u0026lt;= 3; i++) { 118 ticketRepository.save(Ticket.builder().seatNumber(i).onDay(new Date()).build()); 119 } 120 } 121} Run the code and you will see that only one person is able to book the ticket. Notice the exception of 'StaleObjectStateException' thrown.\n1Booking seat: 1 By: Joe 2Booking seat: 1 By: Jack 3Hibernate: select ticket0_.id as id1_0_, ticket0_.booked_by as booked_b2_0_, ticket0_.on_day as on_day3_0_, ticket0_.seat_number as seat_num4_0_, ticket0_.version as version5_0_ from ticket ticket0_ where ticket0_.seat_number=? and ticket0_.on_day=? 4Hibernate: select ticket0_.id as id1_0_, ticket0_.booked_by as booked_b2_0_, ticket0_.on_day as on_day3_0_, ticket0_.seat_number as seat_num4_0_, ticket0_.version as version5_0_ from ticket ticket0_ where ticket0_.seat_number=? and ticket0_.on_day=? 5Hibernate: select ticket0_.id as id1_0_0_, ticket0_.booked_by as booked_b2_0_0_, ticket0_.on_day as on_day3_0_0_, ticket0_.seat_number as seat_num4_0_0_, ticket0_.version as version5_0_0_ from ticket ticket0_ where ticket0_.id=? 6Hibernate: select ticket0_.id as id1_0_0_, ticket0_.booked_by as booked_b2_0_0_, ticket0_.on_day as on_day3_0_0_, ticket0_.seat_number as seat_num4_0_0_, ticket0_.version as version5_0_0_ from ticket ticket0_ where ticket0_.id=? 7Hibernate: update ticket set booked_by=?, on_day=?, seat_number=?, version=? where id=? and version=? 8Hibernate: update ticket set booked_by=?, on_day=?, seat_number=?, version=? where id=? and version=? 9Booking for Joe success: true 10Hibernate: select ticket0_.id as id1_0_0_, ticket0_.booked_by as booked_b2_0_0_, ticket0_.on_day as on_day3_0_0_, ticket0_.seat_number as seat_num4_0_0_, ticket0_.version as version5_0_0_ from ticket ticket0_ where ticket0_.id=? 11Object of class [com.demo.project67.optimistic.Ticket] with identifier [1]: optimistic locking failed; nested exception is org.hibernate.StaleObjectStateException: Row was updated or deleted by another transaction (or unsaved-value mapping was incorrect) : [com.demo.project67.optimistic.Ticket#1] 12Booking for Jack success: false 13Hibernate: select ticket0_.id as id1_0_, ticket0_.booked_by as booked_b2_0_, ticket0_.on_day as on_day3_0_, ticket0_.seat_number as seat_num4_0_, ticket0_.version as version5_0_ from ticket ticket0_ 14Ticket(id=1, seatNumber=1, onDay=2020-08-17, bookedBy=Joe, version=1) 15Ticket(id=2, seatNumber=2, onDay=2020-08-17, bookedBy=null, version=0) 16Ticket(id=3, seatNumber=3, onDay=2020-08-17, bookedBy=null, version=0) 1spring: 2 main: 3 web-application-type: none 4 jpa: 5 hibernate.ddl-auto: create-drop 6 show-sql: true References Spring Data JPA : https://spring.io/projects/spring-data-jpa\n","link":"https://gitorko.github.io/post/optimistic-pessimistic-locking/","section":"post","tags":["optimistic-locking","pessimistic-locking","JPA"],"title":"Optimistic vs Pessimistic Locking"},{"body":"","link":"https://gitorko.github.io/tags/pessimistic-locking/","section":"tags","tags":null,"title":"pessimistic-locking"},{"body":"Producer consumer problem implementations\nGithub: https://github.com/gitorko/project01\nProducer Consumer Producer consumer using ArrayBlockingQueue.\n1package com.demo.basics.concurrency._04_producerconsumer; 2 3import java.util.concurrent.ArrayBlockingQueue; 4import java.util.concurrent.BlockingQueue; 5 6import lombok.SneakyThrows; 7import org.junit.jupiter.api.Test; 8 9/** 10 * [Produce Consumer - EASY]() 11 * 12 * - blocking queue 13 */ 14public class ProduceConsumer { 15 16 @SneakyThrows 17 @Test 18 public void test() { 19 // BlockingQueue\u0026lt;String\u0026gt; queue = new SynchronousQueue\u0026lt;\u0026gt;(); 20 BlockingQueue\u0026lt;String\u0026gt; queue = new ArrayBlockingQueue\u0026lt;\u0026gt;(5); 21 22 Runnable producer = () -\u0026gt; { 23 for (int i = 0; i \u0026lt; 20; i++) { 24 try { 25 queue.put(String.valueOf(i)); 26 System.out.println(\u0026#34;Published: \u0026#34; + i); 27 } catch (InterruptedException e) { 28 e.printStackTrace(); 29 } 30 } 31 try { 32 queue.put(\u0026#34;END\u0026#34;); 33 } catch (InterruptedException e) { 34 e.printStackTrace(); 35 } 36 37 }; 38 39 Runnable consumer = () -\u0026gt; { 40 while (true) { 41 try { 42 //TimeUnit.SECONDS.sleep(3); 43 String val = queue.take(); 44 if (val.equals(\u0026#34;END\u0026#34;)) break; 45 System.out.println(\u0026#34;Consumed: \u0026#34; + val); 46 } catch (InterruptedException e) { 47 e.printStackTrace(); 48 } 49 } 50 }; 51 52 Thread p = new Thread(producer); 53 Thread c = new Thread(consumer); 54 p.start(); 55 c.start(); 56 System.out.println(\u0026#34;Producer and Consumer has been started\u0026#34;); 57 p.join(); 58 c.join(); 59 System.out.println(\u0026#34;Completed\u0026#34;); 60 } 61} Producer consumer using wait notify.\n1package com.demo.basics.concurrency._04_producerconsumer; 2 3import java.util.LinkedList; 4import java.util.Queue; 5 6import lombok.SneakyThrows; 7import org.junit.jupiter.api.Test; 8 9/** 10 * [Produce Consumer - EASY]() 11 * 12 * - wait \u0026amp; notify 13 */ 14public class PCWaitNotify { 15 16 @SneakyThrows 17 @Test 18 public void test() { 19 MyBlockingQueue\u0026lt;String\u0026gt; queue = new MyBlockingQueue\u0026lt;\u0026gt;(); 20 Runnable producer = () -\u0026gt; { 21 for (int i = 0; i \u0026lt; 20; i++) { 22 queue.put(String.valueOf(i)); 23 System.out.println(\u0026#34;Published: \u0026#34; + i); 24 } 25 queue.put(\u0026#34;END\u0026#34;); 26 }; 27 28 Runnable consumer = () -\u0026gt; { 29 while (true) { 30 String val = queue.take(); 31 if (val.equals(\u0026#34;END\u0026#34;)) break; 32 System.out.println(\u0026#34;Consumed: \u0026#34; + val); 33 } 34 }; 35 36 Thread p = new Thread(producer); 37 Thread c = new Thread(consumer); 38 p.start(); 39 c.start(); 40 System.out.println(\u0026#34;Producer and Consumer has been started\u0026#34;); 41 p.join(); 42 c.join(); 43 System.out.println(\u0026#34;Completed\u0026#34;); 44 } 45 46 class MyBlockingQueue\u0026lt;E\u0026gt; { 47 private Queue\u0026lt;E\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); 48 private int size = 5; 49 50 public void put(E e) { 51 synchronized (queue) { 52 try { 53 if (queue.size() == size) { 54 queue.wait(); 55 } 56 queue.add(e); 57 queue.notifyAll(); 58 } catch (InterruptedException ex) { 59 ex.printStackTrace(); 60 } 61 } 62 } 63 64 public E take() { 65 synchronized (queue) { 66 try { 67 while (queue.size() == 0) { 68 queue.wait(); 69 } 70 E item = queue.remove(); 71 queue.notifyAll(); 72 return item; 73 } catch (InterruptedException e) { 74 e.printStackTrace(); 75 return null; 76 } 77 } 78 } 79 } 80} 81 82 Producer Consumer using locks\n1package com.demo.basics.concurrency._04_producerconsumer; 2 3import java.util.LinkedList; 4import java.util.Queue; 5import java.util.concurrent.CountDownLatch; 6import java.util.concurrent.ExecutorService; 7import java.util.concurrent.Executors; 8import java.util.concurrent.locks.Condition; 9import java.util.concurrent.locks.Lock; 10import java.util.concurrent.locks.ReentrantLock; 11 12import lombok.SneakyThrows; 13import org.junit.jupiter.api.Test; 14 15/** 16 * [Produce Consumer - EASY]() 17 * 18 * - locks 19 */ 20public class PCLock { 21 22 @SneakyThrows 23 @Test 24 public void test() { 25 26 MyBlockingQueue\u0026lt;String\u0026gt; queue = new MyBlockingQueue\u0026lt;\u0026gt;(); 27 ExecutorService executor = Executors.newFixedThreadPool(5); 28 CountDownLatch latch = new CountDownLatch(2); 29 Runnable producer = () -\u0026gt; { 30 try { 31 for (int i = 0; i \u0026lt; 20; i++) { 32 queue.put(String.valueOf(i)); 33 System.out.println(\u0026#34;Published: \u0026#34; + i); 34 } 35 queue.put(\u0026#34;END\u0026#34;); 36 } finally { 37 latch.countDown(); 38 } 39 }; 40 41 Runnable consumer = () -\u0026gt; { 42 try { 43 while (true) { 44 //TimeUnit.SECONDS.sleep(3); 45 String val = queue.take(); 46 if (val.equals(\u0026#34;END\u0026#34;)) break; 47 System.out.println(\u0026#34;Consumed: \u0026#34; + val); 48 } 49 } catch (Exception ex) { 50 //Do Nothing 51 } finally { 52 latch.countDown(); 53 } 54 }; 55 executor.submit(producer); 56 executor.submit(consumer); 57 latch.await(); 58 59 } 60 61 class MyBlockingQueue\u0026lt;E\u0026gt; { 62 private Queue\u0026lt;E\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); 63 private int size = 5; 64 private Lock lock = new ReentrantLock(true); 65 private Condition notFull = lock.newCondition(); 66 private Condition notEmpty = lock.newCondition(); 67 68 public void put(E e) { 69 lock.lock(); 70 try { 71 if (queue.size() == size) { 72 notFull.await(); 73 } 74 queue.add(e); 75 notEmpty.signalAll(); 76 } catch (InterruptedException ex) { 77 ex.printStackTrace(); 78 } finally { 79 lock.unlock(); 80 } 81 } 82 83 public E take() { 84 lock.lock(); 85 try { 86 while (queue.size() == 0) { 87 notEmpty.await(); 88 } 89 E item = queue.remove(); 90 notFull.signalAll(); 91 return item; 92 } catch (InterruptedException e) { 93 e.printStackTrace(); 94 return null; 95 } finally { 96 lock.unlock(); 97 } 98 } 99 } 100} 101 102 ","link":"https://gitorko.github.io/post/producer-consumer/","section":"post","tags":["design-pattern"],"title":"Producer Consumer"},{"body":"The N+1 query problem occurs when the framework executes N additional SQL statements to fetch the same data that could have been retrieved when executing the primary SQL query.\nGithub: https://github.com/gitorko/project66\nN+1 problem N+1 problem is a performance issue in ORM that fires multiple select queries By default fetch is FetchType.LAZY in hibernate, changing to FetchType.EAGER wont guarantee a fix either also eager fetch will fetch more data than needed. The @ManyToOne and @OneToOne associations use FetchType.EAGER by default.\nCode 1package com.demo.project66; 2 3import java.util.Arrays; 4import java.util.List; 5import javax.persistence.CascadeType; 6import javax.persistence.Entity; 7import javax.persistence.GeneratedValue; 8import javax.persistence.GenerationType; 9import javax.persistence.Id; 10import javax.persistence.OneToMany; 11import javax.transaction.Transactional; 12 13import lombok.AllArgsConstructor; 14import lombok.Builder; 15import lombok.Data; 16import lombok.NoArgsConstructor; 17import lombok.RequiredArgsConstructor; 18import org.springframework.beans.factory.annotation.Autowired; 19import org.springframework.boot.CommandLineRunner; 20import org.springframework.boot.SpringApplication; 21import org.springframework.boot.autoconfigure.SpringBootApplication; 22import org.springframework.context.ApplicationContext; 23import org.springframework.context.annotation.Bean; 24import org.springframework.data.jpa.repository.EntityGraph; 25import org.springframework.data.jpa.repository.Query; 26import org.springframework.data.repository.CrudRepository; 27import org.springframework.stereotype.Component; 28 29@SpringBootApplication 30public class Main { 31 32 public static void main(String[] args) { 33 SpringApplication.run(Main.class, args); 34 } 35 36 @Bean 37 public CommandLineRunner commandLineRunner(MyService myService) { 38 return args -\u0026gt; { 39 myService.seedData(); 40 myService.getData(); 41 }; 42 } 43 44} 45 46@Entity 47@Data 48@Builder 49@AllArgsConstructor 50@NoArgsConstructor 51class Post { 52 @Id 53 @GeneratedValue(strategy = GenerationType.AUTO) 54 private Long id; 55 private String title; 56 @OneToMany(cascade = { CascadeType.ALL }) 57 private List\u0026lt;PostComment\u0026gt; comments; 58} 59 60@Entity 61@Data 62@Builder 63@AllArgsConstructor 64@NoArgsConstructor 65class PostComment { 66 @Id 67 @GeneratedValue(strategy = GenerationType.AUTO) 68 private Long id; 69 private String comment; 70} 71 72interface PostRepository extends CrudRepository\u0026lt;Post, Long\u0026gt; { 73 @Query(\u0026#34;SELECT p FROM Post p LEFT JOIN FETCH p.comments\u0026#34;) 74 List\u0026lt;Post\u0026gt; findAllFixed(); 75 76 @EntityGraph(attributePaths = {\u0026#34;comments\u0026#34;}) 77 List\u0026lt;Post\u0026gt; findAll(); 78} 79 80@Component 81@RequiredArgsConstructor 82class MyService { 83 84 PostRepository postRepository; 85 86 @Transactional 87 public void getData() { 88 Iterable\u0026lt;Post\u0026gt; all = postRepository.findAll(); 89 //Iterable\u0026lt;Post\u0026gt; all = postRepository.findAllFixed(); 90 for (Post post : all) { 91 System.out.println(post.getTitle()); 92 List\u0026lt;PostComment\u0026gt; comments = post.getComments(); 93 for (PostComment comment : comments) { 94 System.out.println(comment); 95 } 96 } 97 } 98 99 public void seedData() { 100 postRepository.deleteAll(); 101 for (int i = 1; i \u0026lt;= 5; i++) { 102 List\u0026lt;PostComment\u0026gt; comments = Arrays.asList( 103 PostComment.builder().comment(\u0026#34;Comment 1 for \u0026#34; + i).build(), 104 PostComment.builder().comment(\u0026#34;Comment 2 for \u0026#34; + i).build(), 105 PostComment.builder().comment(\u0026#34;Comment 3 for \u0026#34; + i).build() 106 ); 107 postRepository.save(Post.builder().title(\u0026#34;My Post \u0026#34; + i).comments(comments).build()); 108 } 109 110 } 111} 1spring: 2 main: 3 web-application-type: none 4 jpa: 5 hibernate: 6 ddl-auto=none 7 show-sql: true Testing Run the project\n1./gradlew bootRun You will see a sql query being fired to fetch each post comment object.\n1Hibernate: select post0_.id as id1_0_, post0_.title as title2_0_ from post post0_ 2My Post 1 3Hibernate: select comments0_.post_id as post_id1_1_0_, comments0_.comments_id as comments2_1_0_, postcommen1_.id as id1_2_1_, postcommen1_.comment as comment2_2_1_ from post_comments comments0_ inner join post_comment postcommen1_ on comments0_.comments_id=postcommen1_.id where comments0_.post_id=? 4PostComment(id=2, comment=Comment 1 for 1) 5PostComment(id=3, comment=Comment 2 for 1) 6PostComment(id=4, comment=Comment 3 for 1) 7My Post 2 8Hibernate: select comments0_.post_id as post_id1_1_0_, comments0_.comments_id as comments2_1_0_, postcommen1_.id as id1_2_1_, postcommen1_.comment as comment2_2_1_ from post_comments comments0_ inner join post_comment postcommen1_ on comments0_.comments_id=postcommen1_.id where comments0_.post_id=? 9PostComment(id=6, comment=Comment 1 for 2) 10PostComment(id=7, comment=Comment 2 for 2) 11PostComment(id=8, comment=Comment 3 for 2) 12My Post 3 13Hibernate: select comments0_.post_id as post_id1_1_0_, comments0_.comments_id as comments2_1_0_, postcommen1_.id as id1_2_1_, postcommen1_.comment as comment2_2_1_ from post_comments comments0_ inner join post_comment postcommen1_ on comments0_.comments_id=postcommen1_.id where comments0_.post_id=? 14PostComment(id=10, comment=Comment 1 for 3) 15PostComment(id=11, comment=Comment 2 for 3) 16PostComment(id=12, comment=Comment 3 for 3) 17My Post 4 18Hibernate: select comments0_.post_id as post_id1_1_0_, comments0_.comments_id as comments2_1_0_, postcommen1_.id as id1_2_1_, postcommen1_.comment as comment2_2_1_ from post_comments comments0_ inner join post_comment postcommen1_ on comments0_.comments_id=postcommen1_.id where comments0_.post_id=? 19PostComment(id=14, comment=Comment 1 for 4) 20PostComment(id=15, comment=Comment 2 for 4) 21PostComment(id=16, comment=Comment 3 for 4) 22My Post 5 23Hibernate: select comments0_.post_id as post_id1_1_0_, comments0_.comments_id as comments2_1_0_, postcommen1_.id as id1_2_1_, postcommen1_.comment as comment2_2_1_ from post_comments comments0_ inner join post_comment postcommen1_ on comments0_.comments_id=postcommen1_.id where comments0_.post_id=? 24PostComment(id=18, comment=Comment 1 for 5) 25PostComment(id=19, comment=Comment 2 for 5) 26PostComment(id=20, comment=Comment 3 for 5) Now use the 'findAllFixed' method you will see that only 1 query is fired. You can also use the @EntityGraph function to achieve the same result.\n1Hibernate: select post0_.id as id1_0_0_, postcommen2_.id as id1_2_1_, post0_.title as title2_0_0_, postcommen2_.comment as comment2_2_1_, comments1_.post_id as post_id1_1_0__, comments1_.comments_id as comments2_1_0__ from post post0_ left outer join post_comments comments1_ on post0_.id=comments1_.post_id left outer join post_comment postcommen2_ on comments1_.comments_id=postcommen2_.id 2My Post 1 3PostComment(id=2, comment=Comment 1 for 1) 4PostComment(id=3, comment=Comment 2 for 1) 5PostComment(id=4, comment=Comment 3 for 1) 6My Post 1 7PostComment(id=2, comment=Comment 1 for 1) 8PostComment(id=3, comment=Comment 2 for 1) 9PostComment(id=4, comment=Comment 3 for 1) 10My Post 1 11PostComment(id=2, comment=Comment 1 for 1) 12PostComment(id=3, comment=Comment 2 for 1) 13PostComment(id=4, comment=Comment 3 for 1) 14My Post 2 15PostComment(id=6, comment=Comment 1 for 2) 16PostComment(id=7, comment=Comment 2 for 2) 17PostComment(id=8, comment=Comment 3 for 2) 18My Post 2 19PostComment(id=6, comment=Comment 1 for 2) 20PostComment(id=7, comment=Comment 2 for 2) 21PostComment(id=8, comment=Comment 3 for 2) 22My Post 2 23PostComment(id=6, comment=Comment 1 for 2) 24PostComment(id=7, comment=Comment 2 for 2) 25PostComment(id=8, comment=Comment 3 for 2) 26My Post 3 27PostComment(id=10, comment=Comment 1 for 3) 28PostComment(id=11, comment=Comment 2 for 3) 29PostComment(id=12, comment=Comment 3 for 3) 30My Post 3 31PostComment(id=10, comment=Comment 1 for 3) 32PostComment(id=11, comment=Comment 2 for 3) 33PostComment(id=12, comment=Comment 3 for 3) 34My Post 3 35PostComment(id=10, comment=Comment 1 for 3) 36PostComment(id=11, comment=Comment 2 for 3) 37PostComment(id=12, comment=Comment 3 for 3) 38My Post 4 39PostComment(id=14, comment=Comment 1 for 4) 40PostComment(id=15, comment=Comment 2 for 4) 41PostComment(id=16, comment=Comment 3 for 4) 42My Post 4 43PostComment(id=14, comment=Comment 1 for 4) 44PostComment(id=15, comment=Comment 2 for 4) 45PostComment(id=16, comment=Comment 3 for 4) 46My Post 4 47PostComment(id=14, comment=Comment 1 for 4) 48PostComment(id=15, comment=Comment 2 for 4) 49PostComment(id=16, comment=Comment 3 for 4) 50My Post 5 51PostComment(id=18, comment=Comment 1 for 5) 52PostComment(id=19, comment=Comment 2 for 5) 53PostComment(id=20, comment=Comment 3 for 5) 54My Post 5 55PostComment(id=18, comment=Comment 1 for 5) 56PostComment(id=19, comment=Comment 2 for 5) 57PostComment(id=20, comment=Comment 3 for 5) 58My Post 5 59PostComment(id=18, comment=Comment 1 for 5) 60PostComment(id=19, comment=Comment 2 for 5) 61PostComment(id=20, comment=Comment 3 for 5) References https://vladmihalcea.com/n-plus-1-query-problem\n","link":"https://gitorko.github.io/post/spring-jpa-n-plus-1/","section":"post","tags":["spring","jpa"],"title":"Spring JPA N+1"},{"body":"","link":"https://gitorko.github.io/tags/azul/","section":"tags","tags":null,"title":"azul"},{"body":"","link":"https://gitorko.github.io/tags/correto/","section":"tags","tags":null,"title":"correto"},{"body":"","link":"https://gitorko.github.io/categories/jdk/","section":"categories","tags":null,"title":"JDK"},{"body":"","link":"https://gitorko.github.io/tags/openjdk/","section":"tags","tags":null,"title":"openjdk"},{"body":"Oracle JDK requires licensing for use in commercial products. OpenJDK is free, We look at the various distributions of OpenJDK that are available.\nDistributions Oracle made JDK 17 free for all again, however if you hold existing Oracle Master Agreement (\u0026quot;OMA\u0026quot;) there is still some confusion.\nAzul Platform Core https://www.azul.com/downloads/ Amazon Corretto https://aws.amazon.com/corretto/ Red Hat OpenJDK https://developers.redhat.com/products/openjdk/download Adoptium (AdoptOpenJDK) https://adoptium.net/ JNLP In OpenJDK, javaws is missing, this is need to open old JNLP files if the project has it. You can download the IceTea binaries to get JNLP working in amazon correto.\nEdit $icedTeaDirectory\\bin\\javaws.bat and replace set INST_JAVA_HOME= with set INST_JAVA_HOME=”$correttoDirectory” to use Corretto Java runtime\nhttp://icedtea.wildebeest.org/download/icedtea-web-binaries/1.8/\nDownload and unzip the zip file. Add the $icedTeaDirectory\\bin\\ path to the path environment variable and invoke\n1javaw.bat client.jnlp Versions To deal with different versions of java you can use jenv\n1brew install jenv Set the jdk version either globally or locally\n1jenv versions 2jenv version 3jenv global 11.0 4jenv local 17.0 Tools You can also download the various tools needed to work with java\nVisualVM - https://visualvm.github.io/ Memory Analyzer - https://www.eclipse.org/mat/ Mission Control - https://www.azul.com/products/components/azul-mission-control/ ","link":"https://gitorko.github.io/post/open-jdk/","section":"post","tags":["azul","openjdk","correto"],"title":"OpenJDK"},{"body":"","link":"https://gitorko.github.io/tags/grafana/","section":"tags","tags":null,"title":"grafana"},{"body":"","link":"https://gitorko.github.io/categories/grafana/","section":"categories","tags":null,"title":"Grafana"},{"body":"","link":"https://gitorko.github.io/tags/jmx/","section":"tags","tags":null,"title":"jmx"},{"body":"","link":"https://gitorko.github.io/tags/micrometer/","section":"tags","tags":null,"title":"micrometer"},{"body":"","link":"https://gitorko.github.io/categories/micrometer/","section":"categories","tags":null,"title":"MicroMeter"},{"body":"","link":"https://gitorko.github.io/tags/prometheus/","section":"tags","tags":null,"title":"prometheus"},{"body":"","link":"https://gitorko.github.io/categories/prometheus/","section":"categories","tags":null,"title":"Prometheus"},{"body":"Spring Boot with Micrometer \u0026amp; Integration with Prometheus \u0026amp; Grafana.\nGithub: https://github.com/gitorko/project68\nMicrometer Micrometer provides vendor neutral application metrics facade that can integrate with various monitoring systems like Prometheus, Wavefront, Atlas, Datadog, Graphite, Ganglia, Influx, JMX etc.\nTraditional systems which monitored JMX attributes could only do so at a particular instance of time. With the arrival of time series database we can now use that data and visualize it over a period in time. Writing the integration to various monitoring systems is time consuming, hence micrometer simplifies it. Underlying metrics are exposed by Spring Boot Actuator and then Micrometer provides a facade that can be used to either push or pull metrics to monitoring systems.\nEvery meter has a name (hierarchical) and tag. There are 4 main types of meters.\nTimers - Time taken to run something. Counter - Number of time something was run. Guages - Report data when observed. Gauges can be useful when monitoring stats of cache, collections Distribution summary - Distribution of events. MeterRegistryCustomizer, you can customize the whole set of registries at once or individual implementation.\nCode 1package com.demo.project68; 2 3import io.micrometer.core.annotation.Timed; 4import io.micrometer.core.instrument.Counter; 5import io.micrometer.core.instrument.MeterRegistry; 6import io.micrometer.core.instrument.Metrics; 7import lombok.extern.slf4j.Slf4j; 8import org.springframework.beans.factory.annotation.Value; 9import org.springframework.boot.SpringApplication; 10import org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer; 11import org.springframework.boot.autoconfigure.SpringBootApplication; 12import org.springframework.context.annotation.Bean; 13import org.springframework.context.annotation.Configuration; 14import org.springframework.context.annotation.EnableAspectJAutoProxy; 15import org.springframework.web.bind.annotation.GetMapping; 16import org.springframework.web.bind.annotation.RequestMapping; 17import org.springframework.web.bind.annotation.RestController; 18 19import javax.annotation.PostConstruct; 20import java.util.Random; 21import java.util.concurrent.TimeUnit; 22 23@SpringBootApplication 24@Slf4j 25public class Main { 26 public static void main(String[] args) { 27 SpringApplication.run(Main.class, args); 28 } 29} 30 31@RestController 32@RequestMapping(\u0026#34;/api\u0026#34;) 33@Slf4j 34class AppController { 35 36 @Timed(\u0026#34;hello.api.time\u0026#34;) 37 @GetMapping(\u0026#34;/hello\u0026#34;) 38 public String sayHello() throws InterruptedException { 39 RegistryConfig.helloApiCounter.increment(); 40 int sleepTime = new Random().nextInt(10); 41 log.info(\u0026#34;Sleeping for seconds: {}\u0026#34;, sleepTime); 42 TimeUnit.SECONDS.sleep(sleepTime); 43 return \u0026#34;Hello, Sleep for \u0026#34; + sleepTime + \u0026#34; Seconds!\u0026#34;; 44 } 45} 46 47@Configuration 48@EnableAspectJAutoProxy 49class RegistryConfig { 50 51 public static Counter helloApiCounter; 52 53 @Bean 54 MeterRegistryCustomizer\u0026lt;MeterRegistry\u0026gt; configurer(@Value(\u0026#34;${spring.application.name}\u0026#34;) String applicationName) { 55 return registry -\u0026gt; registry.config().commonTags(\u0026#34;application\u0026#34;, applicationName); 56 } 57 58 @PostConstruct 59 public void postInit() { 60 helloApiCounter = Metrics.counter(\u0026#34;hello.api.count\u0026#34;, \u0026#34;type\u0026#34;, \u0026#34;order\u0026#34;); 61 } 62} 1server: 2 port: 8080 3management: 4 metrics: 5 export: 6 prometheus: 7 enabled: true 8 endpoints: 9 web: 10 exposure: 11 include: \u0026#34;*\u0026#34; 12 endpoint: 13 metrics: 14 enabled: true 15 prometheus: 16 enabled: true 17 metrics.enabled: true 18spring: 19 application: 20 name: myapp 1global: 2 scrape_interval: 10s 3 scrape_timeout: 5s 4 evaluation_interval: 10s 5alerting: 6 alertmanagers: 7 - static_configs: 8 - targets: [] 9 scheme: http 10 timeout: 10s 11scrape_configs: 12 - job_name: myapp 13 scrape_interval: 10s 14 scrape_timeout: 5s 15 metrics_path: /actuator/prometheus 16 scheme: http 17 static_configs: 18 - targets: 19 - 192.168.68.104:8080 Setup Project 68 Spring Boot Micrometer - Prometheus, Wavefront\nhttps://gitorko.github.io/spring-boot-micrometer/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Dev To run code.\n1./gradlew clean build 2./gradlew bootRun Prometheus Update the target ip-address in the prometheus.yml file, don't use localhost when using docker container\nTo start the prometheus docker instance build the docker image \u0026amp; run the image.\n1cd project68 2docker build -f docker/Dockerfile --force-rm -t my-prometheus . 3docker run -p 9090:9090 my-prometheus Grafana To start the grafana docker instance run the command.\n1docker run --name grafana -d -p 3000:3000 grafana/grafana Dashboard - Prometheus \u0026amp; Grafana Invoke the rest api couple of times.\n1curl http://localhost:8080/api/hello Check if the metrics are returned by actuator\nhttp://localhost:8080/actuator/prometheus\nYou should see metrics similar to\n1hello_api_count_total{application=\u0026#34;myapp\u0026#34;,type=\u0026#34;order\u0026#34;,} 27.0 2hello_api_time_seconds_count{application=\u0026#34;myapp\u0026#34;,exception=\u0026#34;None\u0026#34;,method=\u0026#34;GET\u0026#34;,outcome=\u0026#34;SUCCESS\u0026#34;,status=\u0026#34;200\u0026#34;,uri=\u0026#34;/api/hello\u0026#34;,} 27.0 3hello_api_time_seconds_sum{application=\u0026#34;myapp\u0026#34;,exception=\u0026#34;None\u0026#34;,method=\u0026#34;GET\u0026#34;,outcome=\u0026#34;SUCCESS\u0026#34;,status=\u0026#34;200\u0026#34;,uri=\u0026#34;/api/hello\u0026#34;,} 102.162818601 4hello_api_time_seconds_max{application=\u0026#34;myapp\u0026#34;,exception=\u0026#34;None\u0026#34;,method=\u0026#34;GET\u0026#34;,outcome=\u0026#34;SUCCESS\u0026#34;,status=\u0026#34;200\u0026#34;,uri=\u0026#34;/api/hello\u0026#34;,} 0.0 Open Prometheus url: http://localhost:9090\nPrometheus should now start pulling data from the spring application. Click on status -\u0026gt; targets on prometheus dashboard to confirm that endpoint is up.\nQuery the metric hello_api_count_total and view as graph\nThe dashboard in Prometheus is minimal, to add more complex dashboard and visualization you can look at Grafana.\nOpen Grafana url: http://localhost:3000/\nLogin, you will need to change the password on first login\n1user: admin 2password: admin Add the prometheus data source, make sure its the ip address of your system, dont add localhost\nhttp://IP-ADDRESS:9090\nThere are existing grafana dashboards that can be imported. Import a dashboard, Download the json file or copy the ID of the dashboard for micrometer dashboard.\nhttps://grafana.com/dashboards/4701\nCreate a custom dashboard, Add a new panel, add 'hello_api_count_total' metric in the query, save the dashboard.\nReferences https://micrometer.io/docs\nhttps://prometheus.io/\nhttps://grafana.com/\nhttps://grafana.com/grafana/dashboards/4701\nhttps://grafana.com/grafana/dashboards/\n","link":"https://gitorko.github.io/post/spring-boot-micrometer/","section":"post","tags":["prometheus","grafana","jmx","micrometer"],"title":"Spring Boot - Micrometer"},{"body":"Create a blog in github using Hugo.\nHugo You need go installed\n1brew install go 2 3$go version 4go version go1.14.6 darwin/amd64 Install Hugo\n1brew install hugo Create Site Create the site\n1hugo new site myblog 2cd myblog 3git init . 4git add . 5git commit -am \u0026#34;Base Commit\u0026#34; Theme Add clarity theme, this will also bring sample templates, that you can delete/modify\n1hugo mod init myblog 2wget -O - https://github.com/chipzoller/hugo-clarity/archive/master.tar.gz | tar xz \u0026amp;\u0026amp; cp -a hugo-clarity-master/exampleSite/* . \u0026amp;\u0026amp; rm -rf hugo-clarity-master \u0026amp;\u0026amp; rm -f config.toml 3git add . 4git commit -am \u0026#34;Theme Commit\u0026#34; In the file config/_default/config.toml\nChange the theme from 'theme = \u0026quot;hugo-clarity\u0026quot;' to 'theme = [\u0026quot;github.com/chipzoller/hugo-clarity\u0026quot;]'\nStart the hugo server locally\n1hugo server Theme update To update the clarity theme to take any latest changes to themes. Need not be done frequently.\n1hugo mod clean 2hugo mod get -u github.com/chipzoller/hugo-clarity Hugo Module update If you want to update all the hugo modules to use the latest version. Need not be done frequently.\n1hugo mod clean 2hugo mod get -u ./... Page Bundles We will use page bundles feature where the images and post reside in same folder as its easier to manage. To enable this add this to params.toml\n1usePageBundles = true Robots.txt Enable robots.txt in config.toml for google crawler to skip certain files, be sure to put this at the beginning of the file\n1enableRobotsTXT = true If you want you can add additional files by creating a robots.txt file under layouts\n1User-agent: * 2 3Disallow: /css/ 4Disallow: /en/ 5Disallow: /docs/ 6Disallow: /fonts/ 7Disallow: /js/ 8Disallow: /tags/ 9Disallow: /icons/ 10Disallow: /images/ 11Disallow: /showcase/ 12Disallow: /categories/ 13Disallow: /search/ Disqus comments Add disqus username to config.toml to allow comments on the blog\n1disqusShortname = \u0026#34;myusername\u0026#34; Menu Bar To modify the menu edit the menu.en.toml file\nFolders If you want additional folder modify the mainSections and add other folder names\n1mainSections = [\u0026#34;post\u0026#34;] Images Images can be added like\n1![](image-01.png) Table of Contents To add table of contents add the following in each posts .md file\n1toc: true Notices To post notices use the following code\n{{% notice note \u0026quot;Note Title\u0026quot; %}} This will be the content of the note. {{% /notice %}}\nEmbed Raw Github file Create a file called ghcode.html under layouts/shortcodes\n1{{ $file := .Get 0 }} 2{{ with resources.GetRemote $file }} 3 {{ with .Err }} 4 {{ errorf \u0026#34;%s\u0026#34; . }} 5 {{ else }} 6 {{ $lang := path.Ext $file | strings.TrimPrefix \u0026#34;.\u0026#34; }} 7 {{ highlight .Content $lang }} 8 {{ end }} 9{{ else }} 10 {{ errorf \u0026#34;Unable to get remote resource.\u0026#34; }} 11{{ end }} To use the tag in the post\n{{\u0026lt; ghcode \u0026quot;https://raw.githubusercontent.com/..file.java\u0026quot; \u0026gt;}\nEmbed Raw Markdown file Create a file called markcode.html under layouts/shortcodes\n1{{ $file := .Get 0 }} 2{{ with resources.GetRemote $file }} 3 {{ with .Err }} 4 {{ errorf \u0026#34;%s\u0026#34; . }} 5 {{ else }} 6 {{ .Content | $.Page.RenderString }} 7 {{ end }} 8{{ else }} 9 {{ errorf \u0026#34;Unable to get remote resource.\u0026#34; }} 10{{ end }} To use the tag in the post\n{{\u0026lt; markcode \u0026quot;https://raw.githubusercontent.com/../file.md\u0026quot; \u0026gt;}}\nSitemap Hugo generates a sitemap.xml that contains tags, categories and other taxonomies. To exclude them from Google search indexing, create a sitemap.xml under layouts.\n1{{ printf \u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;utf-8\\\u0026#34; standalone=\\\u0026#34;yes\\\u0026#34;?\u0026gt;\u0026#34; | safeHTML }} 2\u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34; 3 xmlns:xhtml=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; 4 {{ $exclude := slice \u0026#34;tags\u0026#34; \u0026#34;categories\u0026#34; }} 5 {{ range .Pages }} 6 {{ if not (in $exclude .Data.Plural) }} 7 \u0026lt;url\u0026gt; 8 \u0026lt;loc\u0026gt;{{ .Permalink }}\u0026lt;/loc\u0026gt;{{ if not .Lastmod.IsZero }} 9 \u0026lt;lastmod\u0026gt;{{ safeHTML ( .Lastmod.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; ) }}\u0026lt;/lastmod\u0026gt;{{ end }}{{ with .Sitemap.ChangeFreq }} 10 \u0026lt;changefreq\u0026gt;{{ . }}\u0026lt;/changefreq\u0026gt;{{ end }}{{ if ge .Sitemap.Priority 0.0 }} 11 \u0026lt;priority\u0026gt;{{ .Sitemap.Priority }}\u0026lt;/priority\u0026gt;{{ end }}{{ if .IsTranslated }}{{ range .Translations }} 12 \u0026lt;xhtml:link 13 rel=\u0026#34;alternate\u0026#34; 14 hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; 15 href=\u0026#34;{{ .Permalink }}\u0026#34; 16 /\u0026gt;{{ end }} 17 \u0026lt;xhtml:link 18 rel=\u0026#34;alternate\u0026#34; 19 hreflang=\u0026#34;{{ .Language.Lang }}\u0026#34; 20 href=\u0026#34;{{ .Permalink }}\u0026#34; 21 /\u0026gt;{{ end }} 22 \u0026lt;/url\u0026gt; 23 {{ end }} 24 {{ end }} 25\u0026lt;/urlset\u0026gt; Start Blog Run the server\n1hugo server Github Create a Github repository, It should be of the exact format \u0026lt;GITHUB-USERNAME\u0026gt;-github.io\nWe will create 2 branches in this repository where one branch will store the markdown content and other branch will store the live html site.\nUpdate the base url in config.toml\n1baseurl = \u0026#34;https://\u0026lt;GITHUB-USERNAME\u0026gt;.github.io/\u0026#34; Blog Commit 1git remote add origin https://github.com/\u0026lt;GITHUB-USERNAME\u0026gt;/\u0026lt;GITHUB-USERNAME\u0026gt;.github.io.git 2git branch -M blog 3git push -u origin blog Now your markdown files will be present on github under the branch blog.\nGithub Actions To automatically deploy the site on each commit, first create the github token under the repository\nYou need to generate a token if you dont have one already https://github.com/settings/tokens\nNote! The token must not be shared with anyone or uploaded in any static file or html.\nCreate a new workflow action and commit\nUse the below yaml\n1name: CI 2 3on: 4 push: 5 branches: 6 - blog 7 pull_request: 8 9jobs: 10 deploy: 11 runs-on: ubuntu-20.04 12 steps: 13 - uses: actions/checkout@v2 14 with: 15 submodules: true # Fetch Hugo themes (true OR recursive) 16 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod 17 18 - name: Setup Hugo 19 uses: peaceiris/actions-hugo@v2 20 with: 21 hugo-version: \u0026#39;latest\u0026#39; 22 # extended: true 23 24 - name: Build 25 run: hugo --minify 26 27 - name: Deploy 28 uses: peaceiris/actions-gh-pages@v3 29 if: github.ref == \u0026#39;refs/heads/blog\u0026#39; 30 with: 31 github_token: ${{ secrets.TOKEN }} 32 publish_dir: ./public By default the actions generate the live site in gh-pages branch, so goto github pages and change the branch to gh-pages and save.\nNow when you commit and push and changes to the blog branch, github actions automatically builds your site and deploys it.\nLegacy Deploy If you don't want use github actions to deploy the site then you can generate the site and publish it manually\nAdd a github submodule for the public folder\n1git submodule add -b gh-pages https://github.com/\u0026lt;GITHUB-USERNAME\u0026gt;/\u0026lt;GITHUB-USERNAME\u0026gt;.github.io.git public Generate the site in the public folder\n1hugo Note! Add public to .gitignore file so that public folder is not committed to the blog repo.\nCommit blog content (Markdown files) to the blog branch, double check to make sure public folder and its files are not part of this commit.\n1cd \u0026lt;GITHUB-USERNAME\u0026gt; 2git status 3git add . 4git commit -am \u0026#34;blog update\u0026#34; 5git push origin blog Commit \u0026amp; push site (HTML files) to the gh-pages branch\n1cd \u0026lt;GITHUB-USERNAME\u0026gt;/public 2git add . 3git commit -am \u0026#34;Live HTML\u0026#34; 4git push origin gh-pages You should now be seeing the public html files in your .github.io.git repostiory in the gh-pages branch.\nOpen url https://.github.io/ and your blog should be up.\nGoogle Analytics Modify the params.toml and add your google analytics tracking id.\n1ga_analytics = \u0026#34;\u0026lt;YOUR_VALUE\u0026gt;\u0026#34; This will help you track your website traffic\nGoogle Search Indexing Google search will not include your blog.\nTo get your site to show up in google search ensure there is a sitemap.xml.\nhttp://.github.io/sitemap.xml\nLogin to google search console https://search.google.com/search-console and add your blog\nCopy the hmtl file to static folder for site verification\nIt will take an hour for the site to be indexed and show up on search results.\nMarkdown Learn markdown syntax https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\nReferences https://github.com/chipzoller/hugo-clarity\nhttps://gohugo.io/\nhttps://gohugo.io/hosting-and-deployment/hosting-on-github/\n","link":"https://gitorko.github.io/post/github-blog-with-hugo/","section":"post","tags":["hugo"],"title":"Github Blog with Hugo"},{"body":"","link":"https://gitorko.github.io/tags/hugo/","section":"tags","tags":null,"title":"hugo"},{"body":"","link":"https://gitorko.github.io/categories/hugo/","section":"categories","tags":null,"title":"Hugo"},{"body":"","link":"https://gitorko.github.io/tags/reactive-jdbc/","section":"tags","tags":null,"title":"reactive-jdbc"},{"body":"Webflux integration with reactive JDBC, to allow non-blocking calls to database. R2DBC is still not recommended for production, hence this approach should help you integrate existing relational database with webflux.\nGithub: https://github.com/gitorko/project64\nCode 1package com.demo.project64; 2 3import java.time.Duration; 4 5import com.demo.project64.domain.Customer; 6import com.demo.project64.service.CustomerReactiveService; 7import lombok.extern.slf4j.Slf4j; 8import org.springframework.boot.CommandLineRunner; 9import org.springframework.boot.SpringApplication; 10import org.springframework.boot.autoconfigure.SpringBootApplication; 11import org.springframework.context.annotation.Bean; 12import reactor.core.publisher.Flux; 13 14@SpringBootApplication 15@Slf4j 16public class Main { 17 18 public static void main(String[] args) { 19 SpringApplication.run(Main.class, args); 20 } 21 22 @Bean 23 public CommandLineRunner seedData(CustomerReactiveService customerReactiveService) { 24 return args -\u0026gt; { 25 log.info(\u0026#34;Seeding data!\u0026#34;); 26 27 Flux\u0026lt;String\u0026gt; names = Flux.just(\u0026#34;raj\u0026#34;, \u0026#34;david\u0026#34;, \u0026#34;pam\u0026#34;).delayElements(Duration.ofSeconds(1)); 28 Flux\u0026lt;Integer\u0026gt; ages = Flux.just(25, 27, 30).delayElements(Duration.ofSeconds(1)); 29 Flux\u0026lt;Customer\u0026gt; customers = Flux.zip(names, ages).map(tupple -\u0026gt; { 30 return new Customer(null, tupple.getT1(), tupple.getT2()); 31 }); 32 33 customerReactiveService.deleteAll().thenMany(customers.flatMap(c -\u0026gt; customerReactiveService.save(c)) 34 .thenMany(customerReactiveService.findAll())).subscribe(System.out::println); 35 }; 36 } 37 38} 39 1package com.demo.project64.service; 2 3import java.util.Optional; 4import java.util.concurrent.Callable; 5 6import com.demo.project64.domain.Customer; 7import org.springframework.beans.factory.annotation.Autowired; 8import org.springframework.beans.factory.annotation.Qualifier; 9import org.springframework.data.repository.CrudRepository; 10import reactor.core.publisher.Flux; 11import reactor.core.publisher.Mono; 12import reactor.core.scheduler.Scheduler; 13import reactor.core.scheduler.Schedulers; 14 15public abstract class AbstractReactiveService\u0026lt;T\u0026gt; { 16 17 @Qualifier(\u0026#34;jdbcScheduler\u0026#34;) 18 @Autowired 19 Scheduler jdbcScheduler; 20 21 public Flux\u0026lt;T\u0026gt; findAll() { 22 return asyncIterable(() -\u0026gt; getRepository().findAll().iterator()); 23 } 24 25 public Mono\u0026lt;Optional\u0026lt;T\u0026gt;\u0026gt; findById(Long id) { 26 return asyncCallable(() -\u0026gt; getRepository().findById(id)); 27 } 28 29 public Mono\u0026lt;T\u0026gt; save(Customer customer) { 30 return (Mono\u0026lt;T\u0026gt;) asyncCallable(() -\u0026gt; getRepository().save(customer)); 31 } 32 33 public Mono\u0026lt;Void\u0026gt; delete(Customer customer) { 34 return asyncCallable(() -\u0026gt; { 35 getRepository().delete(customer); 36 return null; 37 }); 38 } 39 40 public Mono\u0026lt;Void\u0026gt; deleteAll() { 41 return asyncCallable(() -\u0026gt; { 42 getRepository().deleteAll(); 43 return null; 44 }); 45 } 46 47 protected \u0026lt;T\u0026gt; Mono\u0026lt;T\u0026gt; asyncCallable(Callable\u0026lt;T\u0026gt; callable) { 48 return Mono.fromCallable(callable).subscribeOn(Schedulers.parallel()).publishOn(jdbcScheduler); 49 } 50 51 protected \u0026lt;T\u0026gt; Flux\u0026lt;T\u0026gt; asyncIterable(Iterable\u0026lt;T\u0026gt; iterable) { 52 return Flux.fromIterable(iterable).subscribeOn(Schedulers.parallel()).publishOn(jdbcScheduler); 53 } 54 55 protected abstract CrudRepository getRepository(); 56} 1package com.demo.project64.service; 2 3import java.util.List; 4 5import com.demo.project64.domain.Customer; 6import com.demo.project64.repository.CustomerRepository; 7import lombok.RequiredArgsConstructor; 8import org.springframework.data.repository.CrudRepository; 9import org.springframework.stereotype.Service; 10import reactor.core.publisher.Mono; 11 12@Service 13@RequiredArgsConstructor 14public class CustomerReactiveService extends AbstractReactiveService\u0026lt;Customer\u0026gt; { 15 16 private final CustomerRepository repository; 17 18 public Mono\u0026lt;List\u0026lt;Customer\u0026gt;\u0026gt; findByNameAndAge(String name, Integer age) { 19 return asyncCallable(() -\u0026gt; repository.findByNameAndAge(name, age)); 20 } 21 22 @Override 23 protected CrudRepository getRepository() { 24 return repository; 25 } 26} 1package com.demo.project64.repository; 2 3import java.util.List; 4 5import com.demo.project64.domain.Customer; 6import org.springframework.data.repository.CrudRepository; 7 8public interface CustomerRepository extends CrudRepository\u0026lt;Customer, Long\u0026gt; { 9 List\u0026lt;Customer\u0026gt; findByNameAndAge(String name, Integer age); 10} 1package com.demo.project64.controller; 2 3import java.util.List; 4import java.util.Optional; 5 6import com.demo.project64.domain.Customer; 7import com.demo.project64.service.CustomerReactiveService; 8import lombok.RequiredArgsConstructor; 9import org.springframework.web.bind.annotation.GetMapping; 10import org.springframework.web.bind.annotation.PathVariable; 11import org.springframework.web.bind.annotation.PostMapping; 12import org.springframework.web.bind.annotation.RequestBody; 13import org.springframework.web.bind.annotation.RequestMapping; 14import org.springframework.web.bind.annotation.RequestParam; 15import org.springframework.web.bind.annotation.RestController; 16import reactor.core.publisher.Flux; 17import reactor.core.publisher.Mono; 18 19@RestController 20@RequestMapping(\u0026#34;/api\u0026#34;) 21@RequiredArgsConstructor 22public class HomeController { 23 24 private final CustomerReactiveService customerReactiveService; 25 26 @GetMapping(\u0026#34;/all\u0026#34;) 27 public Flux\u0026lt;Customer\u0026gt; findAll() { 28 return customerReactiveService.findAll(); 29 } 30 31 @GetMapping(\u0026#34;/id/{customerId}\u0026#34;) 32 public Mono\u0026lt;Optional\u0026lt;Customer\u0026gt;\u0026gt; findById(@PathVariable Long customerId) { 33 return customerReactiveService.findById(customerId); 34 } 35 36 @PostMapping(value = \u0026#34;/save\u0026#34;) 37 public Mono\u0026lt;Customer\u0026gt; save(@RequestBody Customer customer) { 38 return customerReactiveService.save(customer); 39 } 40 41 @GetMapping(\u0026#34;/find\u0026#34;) 42 public Mono\u0026lt;List\u0026lt;Customer\u0026gt;\u0026gt; findById(@RequestParam String name, @RequestParam Integer age) { 43 return customerReactiveService.findByNameAndAge(name, age); 44 } 45} 1package com.demo.project64.config; 2 3import java.util.concurrent.Executors; 4 5import org.springframework.beans.factory.annotation.Value; 6import org.springframework.context.annotation.Bean; 7import org.springframework.context.annotation.Configuration; 8import org.springframework.transaction.PlatformTransactionManager; 9import org.springframework.transaction.support.TransactionTemplate; 10import reactor.core.scheduler.Scheduler; 11import reactor.core.scheduler.Schedulers; 12 13@Configuration 14class SchedulerConfig { 15 16 @Value(\u0026#34;${spring.datasource.hikari.maximum-pool-size:100}\u0026#34;) 17 private int connectionPoolSize; 18 19 @Bean 20 public Scheduler jdbcScheduler() { 21 return Schedulers.fromExecutor(Executors.newFixedThreadPool(connectionPoolSize)); 22 } 23 24} 1spring: 2 main: 3 banner-mode: \u0026#34;off\u0026#34; 4 datasource: 5 driver-class-name: org.postgresql.Driver 6 host: localhost 7 url: jdbc:postgresql://${spring.datasource.host}:5432/test-db 8 username: test 9 password: test@123 10 jpa: 11 show-sql: false 12 hibernate.ddl-auto: create-drop 13 properties.hibernate.temp.use_jdbc_metadata_defaults: false 14 database-platform: org.hibernate.dialect.PostgreSQLDialect 15 defer-datasource-initialization: true Setup Project 64 Spring WebFlux Reactive JDBC\nhttps://gitorko.github.io/spring-webflux-reactive-jdbc/\nVersion Check version\n1$java --version 2openjdk 17.0.3 2022-04-19 LTS Postgres DB 1docker run -p 5432:5432 --name pg-container -e POSTGRES_PASSWORD=password -d postgres:9.6.10 2docker ps 3docker exec -it pg-container psql -U postgres -W postgres 4CREATE USER test WITH PASSWORD \u0026#39;test@123\u0026#39;; 5CREATE DATABASE \u0026#34;test-db\u0026#34; WITH OWNER \u0026#34;test\u0026#34; ENCODING UTF8 TEMPLATE template0; 6grant all PRIVILEGES ON DATABASE \u0026#34;test-db\u0026#34; to test; 7 8docker stop pg-container 9docker start pg-container Dev To run the code.\n1./gradlew clean build 2./gradlew bootRun Testing Postman collection https://raw.githubusercontent.com/gitorko/project64/main/postman/Project64.postman_collection.json\nReferences https://spring.io/blog/2018/12/07/reactive-programming-and-relational-databases\n","link":"https://gitorko.github.io/post/spring-webflux-reactive-jdbc/","section":"post","tags":["reactive-jdbc","webflux"],"title":"Spring Webflux \u0026 Reactive JDBC"},{"body":"","link":"https://gitorko.github.io/tags/drools/","section":"tags","tags":null,"title":"drools"},{"body":"","link":"https://gitorko.github.io/categories/drools/","section":"categories","tags":null,"title":"Drools"},{"body":"Spring boot integration with Drools. Drools is a Business Rule Management System (BRMS). Business \u0026amp; Non-Technical users can write the rules in a format that is easy to understand and plug it into drools engine. These rules/facts are processed to produce results. Cost of changing the rules is low.\nGithub: https://github.com/gitorko/project63\nCode 1package com.demo.project63; 2 3import java.util.Arrays; 4import java.util.Collections; 5import java.util.HashMap; 6import java.util.Map; 7 8import lombok.extern.slf4j.Slf4j; 9import org.kie.api.KieServices; 10import org.kie.api.builder.KieBuilder; 11import org.kie.api.builder.KieFileSystem; 12import org.kie.api.builder.KieModule; 13import org.kie.api.runtime.KieContainer; 14import org.kie.api.runtime.KieSession; 15import org.kie.internal.io.ResourceFactory; 16import org.springframework.boot.CommandLineRunner; 17import org.springframework.boot.SpringApplication; 18import org.springframework.boot.autoconfigure.SpringBootApplication; 19import org.springframework.context.annotation.Bean; 20 21@SpringBootApplication 22@Slf4j 23public class Main { 24 25 public static void main(String[] args) { 26 SpringApplication.run(Main.class, args); 27 } 28 29 @Bean 30 public CommandLineRunner sendData(KieContainer kContainer) { 31 return args -\u0026gt; { 32 //Simple 33 KieSession kieSession1 = kContainer.newKieSession(); 34 Product p1 = new Product(); 35 p1.setType(\u0026#34;desktop\u0026#34;); 36 p1.setRegions(Collections.emptyMap()); 37 p1.setManufacturers(Collections.emptyList()); 38 kieSession1.insert(p1); 39 kieSession1.fireAllRules(); 40 kieSession1.dispose(); 41 log.info(\u0026#34;Discount on {} is {}\u0026#34;, p1.getType(), p1.getDiscount()); 42 43 //Iterates a Map. 44 KieSession kieSession2 = kContainer.newKieSession(); 45 Product p2 = new Product(); 46 p2.setType(\u0026#34;laptop\u0026#34;); 47 Map\u0026lt;String, String\u0026gt; r2 = new HashMap\u0026lt;\u0026gt;(); 48 r2.put(\u0026#34;region1\u0026#34;, \u0026#34;A\u0026#34;); 49 r2.put(\u0026#34;region2\u0026#34;, \u0026#34;B\u0026#34;); 50 r2.put(\u0026#34;region3\u0026#34;, \u0026#34;C\u0026#34;); 51 p2.setRegions(r2); 52 p2.setManufacturers(Collections.emptyList()); 53 kieSession2.insert(p2); 54 kieSession2.fireAllRules(); 55 kieSession2.dispose(); 56 log.info(\u0026#34;Discount on {} is {}\u0026#34;, p2.getType(), p2.getDiscount()); 57 58 //Iterates List 59 KieSession kieSession3 = kContainer.newKieSession(); 60 Product p3 = new Product(); 61 p3.setType(\u0026#34;keyboard\u0026#34;); 62 p3.setRegions(Collections.emptyMap()); 63 p3.setManufacturers(Arrays.asList(\u0026#34;Company1\u0026#34;, \u0026#34;Company2\u0026#34;)); 64 kieSession3.insert(p3); 65 kieSession3.fireAllRules(); 66 kieSession3.dispose(); 67 log.info(\u0026#34;Discount on {} is {}\u0026#34;, p3.getType(), p3.getDiscount()); 68 }; 69 } 70 71 @Bean 72 public KieContainer kieContainer() { 73 KieServices kieServices = KieServices.Factory.get(); 74 KieFileSystem kieFileSystem = kieServices.newKieFileSystem(); 75 kieFileSystem.write(ResourceFactory.newClassPathResource(\u0026#34;product-discount.drl\u0026#34;)); 76 KieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem); 77 kieBuilder.buildAll(); 78 KieModule kieModule = kieBuilder.getKieModule(); 79 return kieServices.newKieContainer(kieModule.getReleaseId()); 80 } 81 82} 1import com.demo.project63.Product; 2import java.util.Map; 3 4rule \u0026#34;Discount Based on Product\u0026#34; 5\twhen 6\t$product: Product(type == \u0026#34;desktop\u0026#34;) 7\tthen 8\tSystem.out.println(\u0026#34;Discount provided for product\u0026#34;); 9\t$product.setDiscount(15); 10\tend 11 12 13rule \u0026#34;Discount Based on Store A,B,C\u0026#34; 14\twhen 15\t$product: Product($regions : regions) 16\t$region: Map() from $regions 17\t$entry: Map.Entry( $key: key, $val: value ) from $region.entrySet() 18\teval($val.equals(\u0026#34;A\u0026#34;) || $val.equals(\u0026#34;B\u0026#34;) || $val.equals(\u0026#34;C\u0026#34;)) 19\tthen 20\tSystem.out.println(\u0026#34;Discount provided for product in specific region\u0026#34;); 21\t$product.setDiscount(10); 22\tend 23 24rule \u0026#34;Discount Based Manufacturer\u0026#34; 25\twhen 26\t$product: Product($manufacturers : manufacturers) 27\t$manufacturer: String() from $manufacturers 28\teval($manufacturer.equals(\u0026#34;Company1\u0026#34;) || $manufacturer.equals(\u0026#34;Company2\u0026#34;)) 29\tthen 30\tSystem.out.println(\u0026#34;Discount provided for manufacturer\u0026#34;); 31\t$product.setDiscount(5); 32\tend Run the project\n1./gradlew bootRun References https://www.drools.org/\n","link":"https://gitorko.github.io/post/spring-boot-drools/","section":"post","tags":["spring","drools"],"title":"Spring Boot - Drools"},{"body":"Java Design Patterns - Creational, Structural \u0026amp; Behavioral design patterns.\nGithub: https://github.com/gitorko/project62\nCreational Design Patterns Provides way to create objects while hiding the creation logic.\n1. Singleton Pattern Singleton pattern ensures that only one instance of the class exists in the java virtual machine.\nA singleton class has these common features\nprivate constructor to restrict creation of instance by other classes. private static variable of the same class. public static method to get instance of class. We will first look at eager loaded singleton. This is costly as object is created at time of class loading,also no scope for exception handling if instantiation fails.\n1package com.demo.project62.singleton; 2 3public class EagerLoadedSingleton { 4 5 private static final EagerLoadedSingleton instance = new EagerLoadedSingleton(); 6 7 private EagerLoadedSingleton() { 8 } 9 10 public static void main(String[] args) { 11 System.out.println(EagerLoadedSingleton.getInstance().hello()); 12 } 13 14 public static EagerLoadedSingleton getInstance() { 15 return instance; 16 } 17 18 public String hello() { 19 return (\u0026#34;Hello from EagerLoadedSingleton!\u0026#34;); 20 } 21} This can be modified to static block singleton which provides room for handling exception.\n1package com.demo.project62.singleton; 2 3public class StaticBlockSingleton { 4 5 private static final StaticBlockSingleton instance; 6 7 static { 8 try { 9 instance = new StaticBlockSingleton(); 10 } catch (Exception e) { 11 throw new RuntimeException(\u0026#34;Exception occured in creatingsingleton instance\u0026#34;); 12 } 13 } 14 15 private StaticBlockSingleton() { 16 } 17 18 public static void main(String[] args) { 19 System.out.println(StaticBlockSingleton.getInstance().hello()); 20 } 21 22 public static StaticBlockSingleton getInstance() { 23 return instance; 24 } 25 26 public String hello() { 27 return (\u0026#34;Hello from StaticBlockSingleton!\u0026#34;); 28 } 29} The next step is to use lazy initialization singleton as creating singleton at class loading time and not using it will be costly.\n1package com.demo.project62.singleton; 2 3public class LazyLoadedSingleton { 4 5 private static LazyLoadedSingleton instance; 6 7 private LazyLoadedSingleton() { 8 } 9 10 public static void main(String[] args) { 11 System.out.println(LazyLoadedSingleton.getInstance().hello()); 12 } 13 14 public static LazyLoadedSingleton getInstance() { 15 if (instance == null) { 16 instance = new LazyLoadedSingleton(); 17 } 18 return instance; 19 } 20 21 public String hello() { 22 return (\u0026#34;Hello from LazyLoadedSingleton!\u0026#34;); 23 } 24} However this is not thread safe as in multithread environment 2 threads can get 2 different instances of the object. So lets make this thread safe. Notice we introduced synchronized keyword on the getInstance method.\n1package com.demo.project62.singleton; 2 3public class ThreadSafeSingleton { 4 5 private static ThreadSafeSingleton instance; 6 7 private ThreadSafeSingleton() { 8 } 9 10 public static void main(String[] args) { 11 System.out.println(ThreadSafeSingleton.getInstance().hello()); 12 } 13 14 public static synchronized ThreadSafeSingleton getInstance() { 15 if (instance == null) { 16 instance = new ThreadSafeSingleton(); 17 } 18 return instance; 19 } 20 21 public String hello() { 22 return (\u0026#34;Hello from ThreadSafeSingleton!\u0026#34;); 23 } 24} The above program is thread safe but reduces performance as each thread waits to enter the synchronized block. We now fix that by introducing double check locking. Notice that we removed the synchronized keyword on the getInstance method and moved it inside the method. We now perform 2 if checks on the instance.\n1package com.demo.project62.singleton; 2 3public class ThreadSafeSingletonDoubleCheckLock { 4 5 private static ThreadSafeSingletonDoubleCheckLock instance; 6 7 private ThreadSafeSingletonDoubleCheckLock() { 8 } 9 10 public static void main(String[] args) { 11 System.out.println(ThreadSafeSingletonDoubleCheckLock.getInstance().hello()); 12 } 13 14 public static ThreadSafeSingletonDoubleCheckLock getInstance() { 15 if (instance == null) { 16 synchronized (ThreadSafeSingletonDoubleCheckLock.class) { 17 if (instance == null) { 18 instance = new ThreadSafeSingletonDoubleCheckLock(); 19 } 20 } 21 22 } 23 return instance; 24 } 25 26 public String hello() { 27 return (\u0026#34;Hello from ThreadSafeSingleton!\u0026#34;); 28 } 29} Using reflection all previous singleton implementation can be broken\n1package com.demo.project62.singleton; 2 3import java.lang.reflect.Constructor; 4import java.lang.reflect.InvocationTargetException; 5 6public class BreakSingletonByReflection { 7 8 public static void main(String[] args) { 9 new BreakSingletonByReflection().testSingleton(); 10 } 11 12 public void testSingleton() { 13 14 ThreadSafeSingletonDoubleCheckLock instanceOne = ThreadSafeSingletonDoubleCheckLock.getInstance(); 15 ThreadSafeSingletonDoubleCheckLock instanceTwo = null; 16 try { 17 Constructor[] constructors = ThreadSafeSingletonDoubleCheckLock.class.getDeclaredConstructors(); 18 for (Constructor constructor : constructors) { 19 constructor.setAccessible(true); 20 instanceTwo = (ThreadSafeSingletonDoubleCheckLock) constructor.newInstance(); 21 break; 22 } 23 } catch (InstantiationException | IllegalAccessException | IllegalArgumentException 24 | InvocationTargetException ex) { 25 ex.printStackTrace(); 26 } 27 if (instanceOne.hashCode() != instanceTwo.hashCode()) { 28 System.out.println(\u0026#34;Singleton broken!\u0026#34;); 29 } 30 } 31} To safeguard against reflection we will throw RuntimeException in the constructor. We will introduce the volatile keyword to make it even more thread safe.\nHow volatile works in java? The volatile keyword in Java is used as an indicator to Java compiler and Thread that do not cache value of this variable and always read it from main memory. Java volatile keyword also guarantees visibility and ordering, write to any volatile variable happens before any read into the volatile variable. It also prevents compiler or JVM from the reordering of code.\nIf we do not make the instance variable volatile than the Thread which is creating instance of Singleton is not able to communicate to the other thread, that the instance has been created until it comes out of the Singleton block, so if Thread A is creating Singleton instance and just after creation lost the CPU, all other thread will not be able to see value of instance as not null and they will believe its still null. By adding volatile java will not read the variable into thread context local memory and instead read it from the main memory each time.\n1package com.demo.project62.singleton; 2 3public class SingletonDefendReflection { 4 5 private static volatile SingletonDefendReflection instance; 6 7 private SingletonDefendReflection() { 8 if (instance != null) { 9 throw new RuntimeException(\u0026#34;Use get instance to create object!\u0026#34;); 10 } 11 } 12 13 public static void main(String[] args) { 14 System.out.println(SingletonDefendReflection.getInstance().hello()); 15 } 16 17 public static SingletonDefendReflection getInstance() { 18 if (instance == null) { 19 synchronized (SingletonDefendReflection.class) { 20 if (instance == null) { 21 instance = new SingletonDefendReflection(); 22 } 23 } 24 } 25 return instance; 26 } 27 28 public String hello() { 29 return (\u0026#34;Hello from ThreadSafeSingleton!\u0026#34;); 30 } 31} To defend against reflection you can also use Enum based singleton, The disadvantage is you cant do lazy loading, you cant extend the singleton.\n1package com.demo.project62.singleton; 2 3public enum EnumSingleton { 4 5 INSTANCE; 6 7 public static void main(String[] args) { 8 System.out.println(EnumSingleton.INSTANCE.hello()); 9 } 10 11 public String hello() { 12 return (\u0026#34;Hello from EnumSingleTon!\u0026#34;); 13 } 14 15} There is another approach of writing a singleton called Bill Pugh Singleton implementation which uses static inner helper class instead of using synchronized keyword.\n1package com.demo.project62.singleton; 2 3 4public class BillPughSingleton { 5 6 private BillPughSingleton() { 7 } 8 9 public static void main(String[] args) { 10 BillPughSingleton.getInstance().hello(); 11 } 12 13 public static BillPughSingleton getInstance() { 14 return SingletonHelper.INSTANCE; 15 } 16 17 public String hello() { 18 return \u0026#34;Hello from BillPughSingleton\u0026#34;; 19 } 20 21 private static class SingletonHelper { 22 private static final BillPughSingleton INSTANCE = new BillPughSingleton(); 23 } 24} In a distributed systems a singleton needs to be serialized and restored from store later and care must be taken to ensure that new instance is not created and the same instance that was serialized is restored. Notice the method readResolve if this method is removed then the singleton design breaks during de-serialization.\n1package com.demo.project62.singleton; 2 3import java.io.FileInputStream; 4import java.io.FileOutputStream; 5import java.io.ObjectInput; 6import java.io.ObjectInputStream; 7import java.io.ObjectOutput; 8import java.io.ObjectOutputStream; 9import java.io.Serializable; 10 11public class SerializedSingleton implements Serializable { 12 13 private static final long serialVersionUID = -1L; 14 15 private SerializedSingleton() { 16 } 17 18 public static void main(String[] args) throws Exception { 19 20 SerializedSingleton instanceOne = SerializedSingleton.getInstance(); 21 ObjectOutput out = new ObjectOutputStream(new FileOutputStream(\u0026#34;filename.ser\u0026#34;)); 22 out.writeObject(instanceOne); 23 out.close(); 24 25 ObjectInput in = new ObjectInputStream(new FileInputStream(\u0026#34;filename.ser\u0026#34;)); 26 SerializedSingleton instanceTwo = (SerializedSingleton) in.readObject(); 27 in.close(); 28 if (instanceOne.hashCode() != instanceTwo.hashCode()) { 29 System.out.println(\u0026#34;Singleton broken!\u0026#34;); 30 } else { 31 System.out.println(instanceOne.getInstance().hello()); 32 } 33 34 } 35 36 public static SerializedSingleton getInstance() { 37 return SingletonHelper.instance; 38 } 39 40 public String hello() { 41 return (\u0026#34;Hello from singleton!\u0026#34;); 42 } 43 44 protected Object readResolve() { 45 return getInstance(); 46 } 47 48 private static class SingletonHelper { 49 private static final SerializedSingleton instance = new SerializedSingleton(); 50 } 51 52} A singleton example within java sdk is the Runtime class for garbage collection.\n1package com.demo.project62.singleton; 2 3public class RuntimeSingleton { 4 public static void main(String[] args) { 5 Runtime singleton1 = Runtime.getRuntime(); 6 singleton1.gc(); 7 Runtime singleton2 = Runtime.getRuntime(); 8 if (singleton1 == singleton2) { 9 System.out.println(\u0026#34;Singleton!\u0026#34;); 10 } else { 11 System.out.println(\u0026#34;Not Singleton!\u0026#34;); 12 } 13 } 14} Why not use a static class instead of writing a singleton class? Because static class doesnt guarantee thread safety.\nCan i have parameters in a singleton? A singleton constructor cant take parameters that violates the rule of singleton. If there are parameters then it classifies as a factory pattern.\nIf singleton is unique instance per JVM instance how does it work in a tomcat server which can have 2 instances of same web application deployed on it. Since the applications still run on single JVM will they share the singleton? In this case both web applications will get their own instance of singleton because of class loader visibility.Tomcat uses individual class loaders for webapps. However if both application request a JRE or Tomcat singleton eg: Runtime then both get the same singleton.\n2. Factory Pattern Factory design pattern is used when we have a super class with multiple sub-classes and based on input, we need to return one of the sub-class. The main method doesnt know the details of instantiating a object its deferred to the factory subclass. Factory calls the new operator.\n1package com.demo.project62.factory; 2 3enum AnimalType { 4 DOG, DUCK, CAT; 5} 6 7interface Animal { 8 public String sound(); 9} 10 11public class Main { 12 13 public static void main(String[] args) { 14 Animal animal = Factory.getAnimal(AnimalType.CAT); 15 System.out.println(animal.sound()); 16 } 17} 18 19class Duck implements Animal { 20 21 @Override 22 public String sound() { 23 return \u0026#34;Quak!\u0026#34;; 24 } 25} 26 27class Dog implements Animal { 28 29 @Override 30 public String sound() { 31 return \u0026#34;Bark!\u0026#34;; 32 } 33} 34 35class Cat implements Animal { 36 37 @Override 38 public String sound() { 39 return \u0026#34;Meow!\u0026#34;; 40 } 41} 42 43class Factory { 44 public static Animal getAnimal(AnimalType type) { 45 switch (type) { 46 case DOG: 47 return new Dog(); 48 case CAT: 49 return new Cat(); 50 case DUCK: 51 return new Duck(); 52 default: 53 return null; 54 } 55 } 56} 3. Abstract Factory Pattern Abstract factory pattern is similar to Factory pattern and it’s factory of factories. In factory pattern we used switch statement to decide which object to return in abstract factory we remove the if-else/switch block and have a factory class for each sub-class.\n1package com.demo.project62.abstractfactory; 2 3interface Animal { 4 public String sound(); 5} 6 7interface BaseFactory { 8 public Animal createAnimal(); 9} 10 11public class Main { 12 13 public static void main(String[] args) { 14 Animal animal = AbstractFactory.getAnimal(new DogFactory()); 15 System.out.println(animal.sound()); 16 } 17} 18 19class Duck implements Animal { 20 @Override 21 public String sound() { 22 return \u0026#34;Quak!\u0026#34;; 23 } 24} 25 26class Dog implements Animal { 27 @Override 28 public String sound() { 29 return \u0026#34;Bark!\u0026#34;; 30 } 31} 32 33class Cat implements Animal { 34 @Override 35 public String sound() { 36 return \u0026#34;Meow!\u0026#34;; 37 } 38} 39 40class AbstractFactory { 41 public static Animal getAnimal(BaseFactory bf) { 42 return bf.createAnimal(); 43 } 44} 45 46class DuckFactory implements BaseFactory { 47 @Override 48 public Animal createAnimal() { 49 return new Duck(); 50 } 51} 52 53class DogFactory implements BaseFactory { 54 @Override 55 public Animal createAnimal() { 56 return new Dog(); 57 } 58} 59 60class CatFactory implements BaseFactory { 61 @Override 62 public Animal createAnimal() { 63 return new Cat(); 64 } 65} 4. Builder Pattern Builder pattern is used to build a complex object with lot of attributes. It becomes difficult to pass the correct type in correct order to a constructor when there are many attributes. If some of the attributes are optional then there is overhead of having to pass null each time to the constructor or having to write multiple constructors(telescoping). Notice that in the example below builder pattern returns immutable object hence no setter methods exist. Notice the static inner class you can write an external class as well if you choose not to modify an existing class. Notice the private constructor of the Dog class as the only way to create an instance is via Builder. The name of dog and breed are the only mandatory fields this defines a contract that a dog object atleast needs these 2 attributes.\n1package com.demo.project62.builder; 2 3import lombok.Getter; 4import lombok.ToString; 5 6public class Main { 7 8 public static void main(String[] args) { 9 Dog dog1 = new Dog.DogBuilder(\u0026#34;rocky\u0026#34;, \u0026#34;German Sheperd\u0026#34;).setColor(\u0026#34;Grey\u0026#34;).setAge(6).setWeight(40.5).build(); 10 System.out.println(dog1); 11 Dog dog2 = new Dog.DogBuilder(\u0026#34;rocky\u0026#34;, \u0026#34;German Sheperd\u0026#34;).build(); 12 System.out.println(dog2); 13 } 14 15} 16 17@Getter 18@ToString 19class Dog { 20 21 String name; 22 String breed; 23 String color; 24 int age; 25 double weight; 26 27 private Dog(DogBuilder builder) { 28 this.name = builder.name; 29 this.breed = builder.breed; 30 this.color = builder.color; 31 this.age = builder.age; 32 this.weight = builder.weight; 33 } 34 35 @Getter 36 public static class DogBuilder { 37 38 String name; 39 String breed; 40 String color; 41 int age; 42 double weight; 43 44 public DogBuilder(String name, String breed) { 45 this.name = name; 46 this.breed = breed; 47 } 48 49 public Dog build() { 50 return new Dog(this); 51 } 52 53 public DogBuilder setColor(String color) { 54 this.color = color; 55 return this; 56 } 57 58 public DogBuilder setAge(int age) { 59 this.age = age; 60 return this; 61 } 62 63 public DogBuilder setWeight(double weight) { 64 this.weight = weight; 65 return this; 66 } 67 } 68} Output:\n1Dog(name=rocky, breed=German Sheperd, color=Grey, age=6, weight=40.5) 2Dog(name=rocky, breed=German Sheperd, color=null, age=0, weight=0.0) Using lombok @Builder annotation you can reduce the code further\n1package com.demo.project62.builder.other; 2 3import lombok.Builder; 4import lombok.Getter; 5import lombok.ToString; 6 7public class Main { 8 public static void main(String[] args) { 9 Dog dog1 = Dog.builder().name(\u0026#34;Rocky\u0026#34;).breed(\u0026#34;German Sheperd\u0026#34;).build(); 10 System.out.println(dog1); 11 } 12} 13 14@Builder 15@Getter 16@ToString 17class Dog { 18 19 String name; 20 String breed; 21 String color; 22 int age; 23 @Builder.Default 24 double weight = 30.0; 25} Output:\n1Dog(name=Rocky, breed=German Sheperd, color=null, age=0, weight=30.0) An example in the java SDK is the StringBuilder class.\n5. Prototype Pattern Prototype pattern is used when the object creation is expensive. Instead of creating a new object you can copy the original object using clone and then modify it according to your needs. Prototype design pattern mandates that the object which you are copying should provide the copying feature, it should not be done by any other class. Decision to use shallow or deep copy of the object attributes is a design decision a shallow copy just copies immediate property and deep copy copies all object references as well. Notice we dont use new to create prototype objects after the first instance is created. Prototype avoid subclassing.\n1package com.demo.project62.prototype; 2 3import java.util.ArrayList; 4import java.util.List; 5 6import lombok.AllArgsConstructor; 7import lombok.Data; 8 9public class Main { 10 11 public static void main(String[] args) throws CloneNotSupportedException { 12 Employees emps = new Employees(new ArrayList\u0026lt;\u0026gt;()); 13 emps.seedData(); 14 Employees dataSet1 = (Employees) emps.clone(); 15 Employees dataSet2 = (Employees) emps.clone(); 16 17 System.out.println(\u0026#34;dataSet1 size: \u0026#34; + dataSet1.getEmpList().size()); 18 System.out.println(\u0026#34;dataSet2 size: \u0026#34; + dataSet2.getEmpList().size()); 19 20 dataSet2.getEmpList().add(\u0026#34;jhon\u0026#34;); 21 System.out.println(\u0026#34;dataSet1 size: \u0026#34; + dataSet1.getEmpList().size()); 22 System.out.println(\u0026#34;dataSet2 size: \u0026#34; + dataSet2.getEmpList().size()); 23 } 24 25} 26 27@AllArgsConstructor 28@Data 29class Employees implements Cloneable { 30 31 private List\u0026lt;String\u0026gt; empList; 32 33 public void seedData() { 34 //Invoke a remote call and fetch data and load it to list. The fetch is costly op. 35 for (int i = 0; i \u0026lt; 100; i++) { 36 empList.add(\u0026#34;employee_\u0026#34; + i); 37 } 38 } 39 40 @Override 41 public Object clone() throws CloneNotSupportedException { 42 List\u0026lt;String\u0026gt; temp = new ArrayList\u0026lt;\u0026gt;(); 43 for (String s : this.empList) { 44 temp.add(s); 45 } 46 return new Employees(temp); 47 } 48} Output:\n1dataSet1 size: 100 2dataSet2 size: 100 3dataSet1 size: 100 4dataSet2 size: 101 You can also create a registry to stored newly created objects when there are different types of objects and lookup against the registry when you want to clone objects.\nStructural Design Patterns Deal with class and object composition. Provide different ways to create a class structure, using inheritance and composition to create a large object from small objects\n1. Adapter Pattern Adapter pattern is used when two unrelated interfaces need to work together. There is a AlienCraft which has different type of fire \u0026amp; scan api that takes additional parameter compared to the human readable ship interface. However by writing the adapter we map the appropriate functions for fire and scan.\n1package com.demo.project62.adapter; 2 3import lombok.AllArgsConstructor; 4 5interface Ship { 6 public void scan(); 7 8 public void fire(); 9} 10 11public class Main { 12 13 public static void main(String[] args) { 14 SpaceShipAdapter shipAdapter = new SpaceShipAdapter(new AlienCraft()); 15 shipAdapter.scan(); 16 shipAdapter.fire(); 17 } 18} 19 20class AlienCraft { 21 public void drakarys() { 22 System.out.println(\u0026#34;Firing weapon\u0026#34;); 23 } 24 25 public void jorarghugon() { 26 System.out.println(\u0026#34;Scanning enemy\u0026#34;); 27 } 28} 29 30@AllArgsConstructor 31class SpaceShipAdapter implements Ship { 32 AlienCraft ship; 33 34 @Override 35 public void scan() { 36 ship.jorarghugon(); 37 } 38 39 @Override 40 public void fire() { 41 ship.drakarys(); 42 } 43 44} Output:\n1Scanning enemy in sector NORTH 2Firing weapon at sector NORTH UML Diagram Adapter design pattern.\n2. Composite Pattern Composite pattern is used when we have to represent a part-whole hierarchy.A group of objects should behave in a similar way,tree like structure. Here we have a playlist which can contain songs or other playlist and those playlist can have songs of their own.\n1package com.demo.project62.composite; 2 3import java.util.ArrayList; 4import java.util.List; 5 6import lombok.AllArgsConstructor; 7import lombok.RequiredArgsConstructor; 8 9//When the group of objects should behave as the single object 10public class Main { 11 12 public static void main(String[] args) { 13 SongComponent playlist1 = new PlayList(\u0026#34;playlist_1\u0026#34;); 14 SongComponent playlist2 = new PlayList(\u0026#34;playlist_2\u0026#34;); 15 SongComponent playlist3 = new PlayList(\u0026#34;playlist_3\u0026#34;); 16 SongComponent myplaylist = new PlayList(\u0026#34;myplaylist\u0026#34;); 17 myplaylist.add(playlist1); 18 myplaylist.add(playlist2); 19 playlist1.add(new Song(\u0026#34;Song1\u0026#34;)); 20 playlist1.add(new Song(\u0026#34;Song2\u0026#34;)); 21 playlist1.add(playlist3); 22 playlist3.add(new Song(\u0026#34;Song3\u0026#34;)); 23 24 myplaylist.displaySongInfo(); 25 } 26} 27 28abstract class SongComponent { 29 30 public void add(SongComponent c) { 31 throw new UnsupportedOperationException(); 32 } 33 34 public String getSong() { 35 throw new UnsupportedOperationException(); 36 } 37 38 public void displaySongInfo() { 39 throw new UnsupportedOperationException(); 40 } 41} 42 43@RequiredArgsConstructor 44class PlayList extends SongComponent { 45 46 final String playListName; 47 List\u0026lt;SongComponent\u0026gt; componentLst = new ArrayList\u0026lt;\u0026gt;(); 48 49 @Override 50 public void add(SongComponent c) { 51 componentLst.add(c); 52 } 53 54 @Override 55 public void displaySongInfo() { 56 System.out.println(\u0026#34;Playlist Name: \u0026#34; + playListName); 57 for (SongComponent s : componentLst) { 58 s.displaySongInfo(); 59 } 60 } 61} 62 63@AllArgsConstructor 64class Song extends SongComponent { 65 String songName; 66 67 @Override 68 public String getSong() { 69 return songName; 70 } 71 72 @Override 73 public void displaySongInfo() { 74 System.out.println(\u0026#34;Song: \u0026#34; + songName); 75 } 76} Output:\n1Playlist Name: myplaylist 2Playlist Name: playlist_1 3Song: Song1 4Song: Song2 5Playlist Name: playlist_3 6Song: Song3 7Playlist Name: playlist_2 3. Proxy Pattern Proxy pattern is used when we want to provide controlled access of a functionality. A real world example would be when a lawyer restricts the questions police would ask a mob boss. You can add only one proxy per class.\n1package com.demo.project62.proxy; 2 3interface Command { 4 public void runCommand(String cmd); 5} 6 7public class Main { 8 9 public static void main(String[] args) { 10 Proxy proxy = new Proxy(); 11 proxy.runCommand(\u0026#34;rm\u0026#34;); 12 proxy.runCommand(\u0026#34;dir\u0026#34;); 13 } 14} 15 16class CommandImpl implements Command { 17 18 @Override 19 public void runCommand(String cmd) { 20 System.out.println(\u0026#34;Running : \u0026#34; + cmd); 21 } 22} 23 24class Proxy implements Command { 25 26 Command cmdObj; 27 28 public Proxy() { 29 this.cmdObj = new CommandImpl(); 30 } 31 32 @Override 33 public void runCommand(String cmd) { 34 if (cmd.contains(\u0026#34;rm\u0026#34;)) { 35 System.out.println(\u0026#34;Cant run rm\u0026#34;); 36 } else { 37 cmdObj.runCommand(cmd); 38 } 39 } 40 41} Output:\n1Cant run rm 2Running : dir A much more generic way to doing this using default java class InvocationHandler is shown below.\n1package com.demo.project62.proxy.other; 2 3import java.lang.reflect.InvocationHandler; 4import java.lang.reflect.InvocationTargetException; 5import java.lang.reflect.Method; 6 7interface Command { 8 public void runCommand(String cmd); 9} 10 11public class Main { 12 13 public static void main(String[] args) { 14 Command cmd = (Command) CommandProxy.newInstance(new CommandImpl()); 15 cmd.runCommand(\u0026#34;ls\u0026#34;); 16 cmd.runCommand(\u0026#34;rm\u0026#34;); 17 } 18 19} 20 21class CommandImpl implements Command { 22 23 @Override 24 public void runCommand(String cmd) { 25 System.out.println(\u0026#34;Running : \u0026#34; + cmd); 26 } 27} 28 29class CommandProxy implements InvocationHandler { 30 private Object obj; 31 32 private CommandProxy(Object obj) { 33 this.obj = obj; 34 } 35 36 public static Object newInstance(Object obj) { 37 return java.lang.reflect.Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), 38 new CommandProxy(obj)); 39 } 40 41 @Override 42 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { 43 Object result; 44 try { 45 if (args[0].equals(\u0026#34;rm\u0026#34;)) { 46 throw new IllegalAccessException(\u0026#34;rm command not allowed\u0026#34;); 47 } else { 48 result = method.invoke(obj, args); 49 } 50 return result; 51 } catch (InvocationTargetException ex) { 52 throw ex.getTargetException(); 53 } catch (Exception ex) { 54 throw new RuntimeException(\u0026#34;invocation exception \u0026#34; + ex.getMessage()); 55 } 56 } 57 58} 4. Flyweight Pattern Flyweight pattern is used when we need to create a lot of Objects of a class eg 100,000 objects. Reduce cost of storage for large objects by sharing. When we share objects we need to determine what is intrinsic and extrinsic attributes. Here beeType is an intrinsic state and will be shared by all bees. The (x,y) coordinates are the extrinsic properties which will vary for each object. Notice that a factory pattern is also seen in the flyweight example below.\n1package com.demo.project62.flyweight; 2 3import java.util.HashMap; 4import java.util.Random; 5import java.util.concurrent.TimeUnit; 6 7import lombok.SneakyThrows; 8 9//divide Object property into intrinsic and extrinsic properties 10enum BeeType { 11 WORKER, ATTACKER; 12 public static BeeType getRandom() { 13 return BeeType.values()[new Random().nextInt(2)]; 14 } 15} 16 17interface Bee { 18 public void carryOutMission(int x, int y); 19} 20 21public class Main { 22 23 public static void main(String[] args) { 24 for (int i = 0; i \u0026lt; 100000; i++) { 25 int posx = new Random().nextInt(10); 26 int posy = new Random().nextInt(10); 27 FlyweightBeeFactory.getBeeType(BeeType.getRandom()).carryOutMission(posx, posy); 28 } 29 System.out.println(\u0026#34;Total Bee objects created:\u0026#34; + FlyweightBeeFactory.bees.size()); 30 } 31} 32 33class WorkerBee implements Bee { 34 35 @SneakyThrows 36 public WorkerBee() { 37 //Takes long time 38 System.out.println(\u0026#34;Creating worker bee!\u0026#34;); 39 TimeUnit.SECONDS.sleep(1); 40 } 41 42 @Override 43 public void carryOutMission(int x, int y) { 44 System.out.println(\u0026#34;Depositing honey at (\u0026#34; + x + \u0026#34;,\u0026#34; + y + \u0026#34;) quadrant!\u0026#34;); 45 } 46 47} 48 49class AttackBee implements Bee { 50 51 @SneakyThrows 52 public AttackBee() { 53 //Takes long time 54 System.out.println(\u0026#34;Creating attack bee!\u0026#34;); 55 TimeUnit.SECONDS.sleep(1); 56 } 57 58 @Override 59 public void carryOutMission(int x, int y) { 60 System.out.println(\u0026#34;Defending (\u0026#34; + x + \u0026#34;,\u0026#34; + y + \u0026#34;) quadrant!\u0026#34;); 61 } 62 63} 64 65class FlyweightBeeFactory { 66 67 public static final HashMap\u0026lt;BeeType, Bee\u0026gt; bees = new HashMap\u0026lt;\u0026gt;(); 68 69 public static Bee getBeeType(BeeType beeType) { 70 Bee bee = bees.get(beeType); 71 if (bee == null) { 72 if (beeType.equals(BeeType.WORKER)) { 73 bee = new WorkerBee(); 74 } else { 75 bee = new AttackBee(); 76 } 77 bees.put(beeType, bee); 78 } 79 return bee; 80 } 81 82} Output:\n1... 2... 3WORKER_LEADER, Depositing honey at (9,50) quadrant! 4ATTACKER, Depositing honey at (75,68) quadrant! 5WORKER_LEADER, Depositing honey at (25,78) quadrant! 6Total Bee objects created:4 Now lets look at how the bad design would have looked, Here we end up creating large number of objects there by wasting memory. In the solution above we have moved out the extrinsic properties from the Bee class so that we can share the objects.\nBad Design Alert!\n1package com.demo.project62.flyweight.bad; 2 3import java.util.Random; 4import java.util.concurrent.TimeUnit; 5 6import lombok.AllArgsConstructor; 7import lombok.SneakyThrows; 8 9enum BeeType { 10 WORKER, ATTACKER; 11 public static BeeType getRandom() { 12 //Returns random bee types. 13 return BeeType.values()[new Random().nextInt(2)]; 14 } 15} 16 17interface Bee { 18 public void carryOutMission(int x, int y); 19} 20 21public class Main { 22 23 public static void main(String[] args) { 24 int i = 0; 25 for (; i \u0026lt; 100000; i++) { 26 int posx = new Random().nextInt(10); 27 int posy = new Random().nextInt(10); 28 BeeType type = BeeType.getRandom(); 29 if(type.equals(BeeType.WORKER)) { 30 new WorkerBee(BeeType.getRandom()).carryOutMission(posx,posy); 31 } else { 32 new AttackBee(BeeType.getRandom()).carryOutMission(posx,posy); 33 } 34 35 } 36 System.out.println(\u0026#34;Total Bee objects created:\u0026#34; + i); 37 } 38} 39 40class WorkerBee implements Bee { 41 42 BeeType beeType; 43 44 @SneakyThrows 45 public WorkerBee(BeeType beeType) { 46 //Takes long time 47 TimeUnit.SECONDS.sleep(1); 48 this.beeType = beeType; 49 } 50 51 @Override 52 public void carryOutMission(int x, int y) { 53 System.out.println(beeType + \u0026#34;, Depositing honey at (\u0026#34; + x + \u0026#34;,\u0026#34; + y + \u0026#34;) quadrant!\u0026#34;); 54 } 55 56} 57 58class AttackBee implements Bee { 59 60 BeeType beeType; 61 62 @SneakyThrows 63 public AttackBee(BeeType beeType) { 64 //Takes long time 65 TimeUnit.SECONDS.sleep(1); 66 this.beeType = beeType; 67 } 68 69 @Override 70 public void carryOutMission(int x, int y) { 71 System.out.println(beeType + \u0026#34;, Defending (\u0026#34; + x + \u0026#34;,\u0026#34; + y + \u0026#34;) quadrant!\u0026#34;); 72 } 73 74} Output:\n1... 2... 3WORKER_LEADER, Depositing honey at (77,41) quadrant! 4ATTACKER_LEADER, Depositing honey at (54,35) quadrant! 5WORKER, Depositing honey at (7,17) quadrant! 6Total Bee objects created:100000 5. Facade Pattern Facade pattern is used to give unified interface to a set of interfaces in a subsystem.\n1package com.demo.project62.facade; 2 3//makes the subsystem easier to use 4enum DbType { 5 ORACLE, MYSQL; 6} 7 8public class Main { 9 public static void main(String[] args) { 10 HelperFacade.generateReport(DbType.ORACLE); 11 HelperFacade.generateReport(DbType.MYSQL); 12 } 13} 14 15class MysqlHelper { 16 17 public void mysqlReport() { 18 System.out.println(\u0026#34;Generating report in mysql\u0026#34;); 19 } 20} 21 22class OracleHelper { 23 24 public void oracleReport() { 25 System.out.println(\u0026#34;Generating report in oracle\u0026#34;); 26 } 27 28} 29 30class HelperFacade { 31 32 public static void generateReport(DbType db) { 33 34 switch (db) { 35 case ORACLE: 36 OracleHelper ohelper = new OracleHelper(); 37 ohelper.oracleReport(); 38 break; 39 case MYSQL: 40 MysqlHelper mhelper = new MysqlHelper(); 41 mhelper.mysqlReport(); 42 break; 43 } 44 45 } 46} Output:\n1Generating report in oracle 2Generating report in mysql 6. Bridge Pattern Bridge Pattern is used to decouple the interfaces from implementation. Prefer Composition over inheritance. There are interface hierarchies in both interfaces as well a implementations.\nBy decoupling the switch \u0026amp; electric device from each other each can vary independently. You can add new switches, you can add new electric devices independently without increasing complexity.\n1package com.demo.project62.bridge; 2 3import lombok.AllArgsConstructor; 4 5//Decouple an abstraction from its implementation so that the two can vary independently 6interface Color { 7 public void applyColor(); 8} 9 10public class Main { 11 12 public static void main(String[] args) { 13 Shape tri = new Triangle(new RedColor()); 14 tri.applyColor(); 15 Shape sqr = new Square(new GreenColor()); 16 sqr.applyColor(); 17 } 18 19} 20 21class GreenColor implements Color { 22 @Override 23 public void applyColor() { 24 System.out.println(\u0026#34;green!\u0026#34;); 25 } 26} 27 28class RedColor implements Color { 29 public void applyColor() { 30 System.out.println(\u0026#34;red!\u0026#34;); 31 } 32} 33 34@AllArgsConstructor 35abstract class Shape { 36 37 protected Color color; 38 39 public abstract void applyColor(); 40} 41 42class Square extends Shape { 43 44 public Square(Color c) { 45 super(c); 46 } 47 48 @Override 49 public void applyColor() { 50 System.out.print(\u0026#34;Square filled with color \u0026#34;); 51 color.applyColor(); 52 } 53} 54 55class Triangle extends Shape { 56 57 public Triangle(Color c) { 58 super(c); 59 } 60 61 @Override 62 public void applyColor() { 63 System.out.print(\u0026#34;Triangle filled with color \u0026#34;); 64 color.applyColor(); 65 } 66} Output:\n1Pulled Switch, Now turning on :Light! 2---------------- 3Pressed Switch, Now turning on :Fan! UML of Bridge Pattern. There is a bridge between Switch class and ElectricDevice class.\nBad Design Alert!\nLets look at how a problematic code looks like and its eligibility for bridge pattern. In the below code trying to add a new Electric Device + Switch combination is a pain which is solved by the bridge pattern mentioned above.\n1package com.demo.project62.bridge.badway; 2 3public class Main { 4 5 public static void main(String[] args) { 6 PullSwitch switch1 = new PullSwitchFan(); 7 PressSwitch switch2 = new PressSwitchLight(); 8 switch1.toggle(); 9 switch2.toggle(); 10 } 11} 12 13abstract class Switch { 14 abstract public void toggle(); 15} 16 17abstract class PullSwitch extends Switch { 18} 19 20abstract class PressSwitch extends Switch { 21} 22 23class PullSwitchFan extends PullSwitch { 24 25 boolean state; 26 27 @Override 28 public void toggle() { 29 if (state) { 30 System.out.println(\u0026#34;Pulled Switch, Now turning off fan\u0026#34;); 31 state = Boolean.FALSE; 32 } else { 33 System.out.println(\u0026#34;Pulled Switch, Now turning on fan\u0026#34;); 34 state = Boolean.TRUE; 35 } 36 } 37} 38 39class PullSwitchLight extends PullSwitch { 40 41 boolean state; 42 43 @Override 44 public void toggle() { 45 if (state) { 46 System.out.println(\u0026#34;Pulled Switch, Now turning off light\u0026#34;); 47 state = Boolean.FALSE; 48 } else { 49 System.out.println(\u0026#34;Pulled Switch, Now turning on light\u0026#34;); 50 state = Boolean.TRUE; 51 } 52 } 53} 54 55class PressSwitchFan extends PressSwitch { 56 57 boolean state; 58 59 @Override 60 public void toggle() { 61 if (state) { 62 System.out.println(\u0026#34;Pressed Switch, Now turning off fan\u0026#34;); 63 state = Boolean.FALSE; 64 } else { 65 System.out.println(\u0026#34;Pressed Switch, Now turning on fan\u0026#34;); 66 state = Boolean.TRUE; 67 } 68 } 69} 70 71class PressSwitchLight extends PressSwitch { 72 73 boolean state; 74 75 @Override 76 public void toggle() { 77 if (state) { 78 System.out.println(\u0026#34;Pressed Switch, Now turning off light\u0026#34;); 79 state = Boolean.FALSE; 80 } else { 81 System.out.println(\u0026#34;Pressed Switch, Now turning on light\u0026#34;); 82 state = Boolean.TRUE; 83 } 84 } 85} Output:\n1Pulled Switch, Now turning on fan 2Pressed Switch, Now turning on light UML Diagram of problematic code, you can see that heirarchy exists.\n7. Decorator Pattern Decorator design pattern is used to add the functionality by wrapping another class around the core class without modifying the core class. Disadvantage of decorator pattern is that it uses a lot of similar kind of objects.\n1package com.demo.project62.decorator; 2 3import java.math.BigDecimal; 4 5import lombok.AllArgsConstructor; 6 7public class Main { 8 9 public static void main(String[] args) { 10 Pizza pizza = new ThickCrustPizza(); 11 System.out.println(\u0026#34;Pizza: \u0026#34; + pizza.getDescription()); 12 System.out.println(\u0026#34;Cost: \u0026#34; + pizza.getCost()); 13 14 Cheese cheese = new Cheese(pizza); 15 System.out.println(\u0026#34;Pizza: \u0026#34; + cheese.getDescription()); 16 System.out.println(\u0026#34;Cost: \u0026#34; + cheese.getCost()); 17 18 Cheese doubleCheese = new Cheese(cheese); 19 System.out.println(\u0026#34;Pizza: \u0026#34; + doubleCheese.getDescription()); 20 System.out.println(\u0026#34;Cost: \u0026#34; + doubleCheese.getCost()); 21 } 22 23} 24 25interface Pizza { 26 public String getDescription(); 27 public BigDecimal getCost(); 28} 29 30class ThickCrustPizza implements Pizza { 31 32 @Override 33 public String getDescription() { 34 return \u0026#34;Thick Crust Pizza\u0026#34;; 35 } 36 37 @Override 38 public BigDecimal getCost() { 39 return new BigDecimal(10.00); 40 } 41} 42 43@AllArgsConstructor 44class PizzaToppingDecorator implements Pizza { 45 46 Pizza pizza; 47 48 @Override 49 public String getDescription() { 50 return pizza.getDescription(); 51 } 52 53 @Override 54 public BigDecimal getCost() { 55 return pizza.getCost(); 56 } 57} 58 59class Cheese extends PizzaToppingDecorator { 60 61 public Cheese(Pizza pizza) { 62 super(pizza); 63 } 64 65 @Override 66 public BigDecimal getCost() { 67 return (new BigDecimal(2.00).add(pizza.getCost())); 68 } 69 70 @Override 71 public String getDescription() { 72 return pizza.getDescription() + \u0026#34; + Cheese\u0026#34;; 73 } 74} Output:\n1Pizza: Thick Crust Pizza 2Cost: 10 3Pizza: Thick Crust Pizza + Cheese 4Cost: 12 5Pizza: Thick Crust Pizza + Cheese + Cheese 6Cost: 14 UML of Decorator Pattern\nBehavioral Design Patterns Behavioral patterns help design classes with better interaction between objects and provide lose coupling.\n1. Template Pattern Template Pattern used to create a method stub and deferring some of the steps of implementation to the subclasses. Template method defines the steps to execute an algorithm and it can provide default implementation that might be common for all or some of the subclasses.\n1package com.demo.project62.template; 2 3public class Main { 4 5 public static void main(String[] args) { 6 HouseTemplate houseType = new WoodenHouse(); 7 houseType.buildHouse(); 8 System.out.println(\u0026#34;-------------------------\u0026#34;); 9 houseType = new GlassHouse(); 10 houseType.buildHouse(); 11 } 12} 13 14class GlassHouse extends HouseTemplate { 15 16 @Override 17 public void buildWalls() { 18 System.out.println(\u0026#34;Building Glass Walls\u0026#34;); 19 } 20 21 @Override 22 public void buildPillars() { 23 System.out.println(\u0026#34;Building Pillars with glass coating\u0026#34;); 24 } 25} 26 27class WoodenHouse extends HouseTemplate { 28 29 @Override 30 public void buildWalls() { 31 System.out.println(\u0026#34;Building Wooden Walls\u0026#34;); 32 } 33 34 @Override 35 public void buildPillars() { 36 System.out.println(\u0026#34;Building Pillars with Wood coating\u0026#34;); 37 } 38 39} 40 41 42abstract class HouseTemplate { 43 44 //template method, final so subclasses can\u0026#39;t override 45 public final void buildHouse() { 46 buildFoundation(); 47 buildPillars(); 48 buildWalls(); 49 buildWindows(); 50 System.out.println(\u0026#34;House is built.\u0026#34;); 51 } 52 53 //default implementation 54 private void buildWindows() { 55 System.out.println(\u0026#34;Building Glass Windows\u0026#34;); 56 } 57 58 //methods to be implemented by subclasses 59 public abstract void buildWalls(); 60 61 public abstract void buildPillars(); 62 63 private void buildFoundation() { 64 System.out.println(\u0026#34;Building foundation with cement,iron rodsand sand\u0026#34;); 65 } 66} Output:\n1Building foundation with cement,iron rodsand sand 2Building Pillars with Wood coating 3Building Wooden Walls 4Building Glass Windows 5House is built. 6------------------------- 7Building foundation with cement,iron rodsand sand 8Building Pillars with glass coating 9Building Glass Walls 10Building Glass Windows 11House is built. 2. Mediator Pattern Mediator pattern is used to provide a centralized communication medium between different objects.\n1package com.demo.project62.mediator; 2 3import java.util.ArrayList; 4import java.util.List; 5 6import lombok.AllArgsConstructor; 7 8interface ChatMediator { 9 10 public void sendMessage(String msg, User user); 11 12 void addUser(User user); 13} 14 15public class Main { 16 17 public static void main(String[] args) { 18 ChatMediator mediator = new ChatMediatorImpl(); 19 User user1 = new User(mediator, \u0026#34;Raj\u0026#34;); 20 User user2 = new User(mediator, \u0026#34;Jacob\u0026#34;); 21 User user3 = new User(mediator, \u0026#34;Henry\u0026#34;); 22 User user4 = new User(mediator, \u0026#34;Stan\u0026#34;); 23 mediator.addUser(user1); 24 mediator.addUser(user2); 25 mediator.addUser(user3); 26 mediator.addUser(user4); 27 user1.send(\u0026#34;Hi All\u0026#34;); 28 29 } 30} 31 32class ChatMediatorImpl implements ChatMediator { 33 34 private List\u0026lt;User\u0026gt; users = new ArrayList\u0026lt;\u0026gt;(); 35 36 @Override 37 public void addUser(User user) { 38 this.users.add(user); 39 } 40 41 @Override 42 public void sendMessage(String msg, User user) { 43 for (User u : this.users) { 44 if (u != user) { 45 u.receive(msg); 46 } 47 } 48 } 49} 50 51@AllArgsConstructor 52class User { 53 54 private ChatMediator mediator; 55 private String name; 56 57 public void send(String msg) { 58 System.out.println(this.name + \u0026#34;: Sending Message=\u0026#34; + msg); 59 mediator.sendMessage(msg, this); 60 } 61 62 public void receive(String msg) { 63 System.out.println(this.name + \u0026#34;: Received Message:\u0026#34; + msg); 64 } 65} Output:\n1Raj: Sending Message=Hi All 2Jacob: Received Message:Hi All 3Henry: Received Message:Hi All 4Stan: Received Message:Hi All 3. Chain of Responsibility Pattern Chain of responsibility pattern is used when a request from client is passed to a chain of objects to process them.\n1package com.demo.project62.chainofresponsibility; 2 3interface DispenseChain { 4 5 void setNextChain(DispenseChain nextChain); 6 7 void dispense(int amount); 8} 9 10public class Main { 11 12 public static void main(String[] args) { 13 ATMDispenseChain atmDispenser = new ATMDispenseChain(); 14 int amount = 530; 15 if (amount % 10 != 0) { 16 System.out.println(\u0026#34;Amount should be in multiple of10s.\u0026#34;); 17 } else { 18 atmDispenser.c1.dispense(amount); 19 } 20 } 21} 22 23class ATMDispenseChain { 24 25 public DispenseChain c1; 26 27 public ATMDispenseChain() { 28 29 DispenseChain c1 = new Dollar50Dispenser(); 30 DispenseChain c2 = new Dollar20Dispenser(); 31 DispenseChain c3 = new Dollar10Dispenser(); 32 33 this.c1 = c1; 34 c1.setNextChain(c2); 35 c2.setNextChain(c3); 36 } 37 38} 39 40 41class Dollar10Dispenser implements DispenseChain { 42 43 private DispenseChain chain; 44 45 @Override 46 public void setNextChain(DispenseChain nextChain) { 47 this.chain = nextChain; 48 } 49 50 @Override 51 public void dispense(int amount) { 52 if (amount \u0026gt;= 10) { 53 int num = amount / 10; 54 int remainder = amount % 10; 55 System.out.println(\u0026#34;Dispensing \u0026#34; + num + \u0026#34; 10$ note\u0026#34;); 56 if (remainder != 0) { 57 this.chain.dispense(remainder); 58 } 59 } else { 60 this.chain.dispense(amount); 61 } 62 } 63} 64 65class Dollar20Dispenser implements DispenseChain { 66 67 private DispenseChain chain; 68 69 @Override 70 public void setNextChain(DispenseChain nextChain) { 71 this.chain = nextChain; 72 } 73 74 @Override 75 public void dispense(int amount) { 76 if (amount \u0026gt;= 20) { 77 int num = amount / 20; 78 int remainder = amount % 20; 79 System.out.println(\u0026#34;Dispensing \u0026#34; + num + \u0026#34; 20$ note\u0026#34;); 80 if (remainder != 0) { 81 this.chain.dispense(remainder); 82 } 83 } else { 84 this.chain.dispense(amount); 85 } 86 } 87} 88 89class Dollar50Dispenser implements DispenseChain { 90 91 private DispenseChain chain; 92 93 @Override 94 public void setNextChain(DispenseChain nextChain) { 95 this.chain = nextChain; 96 } 97 98 @Override 99 public void dispense(int amount) { 100 if (amount \u0026gt;= 50) { 101 int num = amount / 50; 102 int remainder = amount % 50; 103 System.out.println(\u0026#34;Dispensing \u0026#34; + num + \u0026#34; 50$ note\u0026#34;); 104 if (remainder != 0) { 105 this.chain.dispense(remainder); 106 } 107 } else { 108 this.chain.dispense(amount); 109 } 110 } 111} Output:\n1Dispensing 10 50$ note 2Dispensing 1 20$ note 3Dispensing 1 10$ note 4. Observer Pattern Observer design pattern is used when we want to get notified about state changes of a object. An Observer watches the Subject here and any changes on Subject are notified to the Observer.\n1package com.demo.project62.observer; 2 3import java.util.ArrayList; 4import java.util.List; 5 6interface Observer { 7 public void notify(String tick); 8} 9 10interface Subject { 11 public void registerObserver(Observer observer); 12 13 public void notifyObservers(String tick); 14} 15 16public class Main { 17 18 public static void main(String[] args) { 19 Feed feed = new Feed(); 20 feed.registerObserver(new AppleStockObserver()); 21 feed.registerObserver(new GoogleStockObserver()); 22 feed.notifyObservers(\u0026#34;APPL: 162.33\u0026#34;); 23 feed.notifyObservers(\u0026#34;GOOGL: 1031.22\u0026#34;); 24 } 25} 26 27class AppleStockObserver implements Observer { 28 @Override 29 public void notify(String tick) { 30 if (tick != null \u0026amp;\u0026amp; tick.contains(\u0026#34;APPL\u0026#34;)) { 31 System.out.println(\u0026#34;Apple Stock Price: \u0026#34; + tick); 32 } 33 } 34} 35 36class GoogleStockObserver implements Observer { 37 @Override 38 public void notify(String tick) { 39 if (tick != null \u0026amp;\u0026amp; tick.contains(\u0026#34;GOOGL\u0026#34;)) { 40 System.out.println(\u0026#34;Google Stock Price: \u0026#34; + tick); 41 } 42 } 43} 44 45class Feed implements Subject { 46 List\u0026lt;Observer\u0026gt; observerLst = new ArrayList\u0026lt;\u0026gt;(); 47 48 @Override 49 public void registerObserver(Observer observer) { 50 observerLst.add(observer); 51 } 52 53 @Override 54 public void notifyObservers(String tick) { 55 observerLst.forEach(e -\u0026gt; e.notify(tick)); 56 } 57} Output:\n1Apple Stock Price: APPL: 162.33 2Google Stock Price: GOOGL: 1031.22 5. Strategy Pattern Strategy pattern is used when we have multiple algorithm for a specific task and client decides the actual implementation to be used at runtime. This is also known as Policy Pattern.\n1package com.demo.project62.stategy; 2 3interface PaymentStrategy { 4 5 void pay(int amount); 6} 7 8public class Main { 9 10 public static void main(String[] args) { 11 new ShoppingCart().pay(new CreditCardStrategy(), 10); 12 new ShoppingCart().pay(new PaypalStrategy(), 10); 13 } 14} 15 16class CreditCardStrategy implements PaymentStrategy { 17 18 @Override 19 public void pay(int amount) { 20 System.out.println(\u0026#34;Paid by credit card: \u0026#34; + amount); 21 } 22 23} 24 25class PaypalStrategy implements PaymentStrategy { 26 27 @Override 28 public void pay(int amount) { 29 System.out.println(\u0026#34;Paid by paypal: \u0026#34; + amount); 30 } 31 32} 33 34class ShoppingCart { 35 36 public void pay(PaymentStrategy paymentMethod, Integer amount) { 37 paymentMethod.pay(amount); 38 } 39} Output:\n1Paid by creditcard: 10 2Paid by paypall: 10 6. Command Pattern Command pattern is used when request is wrapped and passed to invoker which then inturn invokes the encapsulated command. Here Command is our command interface, Stock class is our request. BuyStock and SellStock implementing Order interface which does the actual command processing.\n1package com.demo.project62.command; 2 3import java.util.ArrayList; 4import java.util.List; 5 6import lombok.AllArgsConstructor; 7 8interface Command { 9 void execute(); 10} 11 12public class Main { 13 14 public static void main(String[] args) { 15 16 Stock stock1 = new Stock(\u0026#34;GOOGL\u0026#34;, 10); 17 Stock stock2 = new Stock(\u0026#34;IBM\u0026#34;, 20); 18 19 BuyStock buyStockCmd = new BuyStock(stock1); 20 SellStock sellStockCmd = new SellStock(stock2); 21 22 Broker broker = new Broker(); 23 broker.takeOrder(buyStockCmd); 24 broker.takeOrder(sellStockCmd); 25 26 broker.placeOrders(); 27 28 } 29} 30 31@AllArgsConstructor 32class Stock { 33 34 private String name; 35 private int quantity; 36 37 public void buy() { 38 System.out.println(\u0026#34;Stock [ Name: \u0026#34; + name + \u0026#34;, Quantity: \u0026#34; + quantity + \u0026#34; ] bought\u0026#34;); 39 } 40 41 public void sell() { 42 System.out.println(\u0026#34;Stock [ Name: \u0026#34; + name + \u0026#34;, Quantity: \u0026#34; + quantity + \u0026#34; ] sold\u0026#34;); 43 } 44} 45 46@AllArgsConstructor 47class BuyStock implements Command { 48 private Stock stock; 49 50 public void execute() { 51 stock.buy(); 52 } 53} 54 55@AllArgsConstructor 56class SellStock implements Command { 57 private Stock stock; 58 59 public void execute() { 60 stock.sell(); 61 } 62} 63 64class Broker { 65 private List\u0026lt;Command\u0026gt; cmdLst = new ArrayList\u0026lt;Command\u0026gt;(); 66 67 public void takeOrder(Command cmd) { 68 cmdLst.add(cmd); 69 } 70 71 public void placeOrders() { 72 for (Command cmd : cmdLst) { 73 cmd.execute(); 74 } 75 cmdLst.clear(); 76 } 77} Output:\n1Stock [ Name: GOOGL, Quantity: 10 ] bought 2Stock [ Name: IBM, Quantity: 20 ] sold 7. State Pattern State pattern is used when object changes its behaviour based on internal state. You avoid writing the conditional if-else logic to determine the type of action to be taken based on state of object. Notice that GameContext also implements State along with StartState,StopState classes.\n1package com.demo.project62.state; 2 3import lombok.AllArgsConstructor; 4import lombok.Data; 5import lombok.NoArgsConstructor; 6 7interface State { 8 public void doAction(); 9} 10 11public class Main { 12 public static void main(String[] args) { 13 GameContext game = new GameContext(); 14 15 StartState startState = new StartState(); 16 StopState stopState = new StopState(); 17 18 game.setState(startState); 19 game.doAction(); 20 21 game.setState(stopState); 22 game.doAction(); 23 } 24 25} 26 27class StartState implements State { 28 29 public void doAction() { 30 System.out.println(\u0026#34;Roll the dice!\u0026#34;); 31 } 32} 33 34class StopState implements State { 35 36 public void doAction() { 37 System.out.println(\u0026#34;Game Over!\u0026#34;); 38 } 39} 40 41@AllArgsConstructor 42@NoArgsConstructor 43@Data 44class GameContext implements State { 45 private State state; 46 47 @Override 48 public void doAction() { 49 this.state.doAction(); 50 } 51} Output:\n1Roll the dice! 2Game Over! 8. Visitor Pattern Visitor pattern is used to add methods to different types of classes without altering those classes. Here we have moved the tax calculation outside each item.\n1package com.demo.project62.visitor; 2 3import lombok.AllArgsConstructor; 4import lombok.Data; 5 6interface Visitable { 7 public double accept(Visitor visitor); 8} 9 10interface Visitor { 11 public double visit(Liquor item); 12 13 public double visit(Grocery item); 14} 15 16public class Main { 17 public static void main(String[] args) { 18 19 Visitor taxCalculator = new TaxVisitor(); 20 Liquor liquor = new Liquor(\u0026#34;Black Dog\u0026#34;, 12.00d); 21 System.out.println(\u0026#34;Price of liquor: \u0026#34; + liquor.accept(taxCalculator)); 22 23 Grocery grocery = new Grocery(\u0026#34;Potato Chips\u0026#34;, 12.00d); 24 System.out.println(\u0026#34;Price of grocery: \u0026#34; + grocery.accept(taxCalculator)); 25 26 } 27} 28 29@AllArgsConstructor 30@Data 31class Liquor implements Visitable { 32 String name; 33 double price; 34 35 @Override 36 public double accept(Visitor visitor) { 37 return visitor.visit(this); 38 } 39} 40 41@AllArgsConstructor 42@Data 43class Grocery implements Visitable { 44 String name; 45 double price; 46 47 @Override 48 public double accept(Visitor visitor) { 49 return visitor.visit(this); 50 } 51} 52 53class TaxVisitor implements Visitor { 54 55 @Override 56 public double visit(Liquor item) { 57 return item.price * .30 + item.price; 58 } 59 60 @Override 61 public double visit(Grocery item) { 62 return item.price * .10 + item.price; 63 } 64} Output:\n1Price of liquor: 15.6 2Price of grocery: 13.2 9. Interpreter Pattern Interpreter pattern provides a way to evaluate language grammar or expression.\n1package com.demo.project62.interpreter; 2 3import lombok.AllArgsConstructor; 4import lombok.Data; 5 6interface Expression { 7 String interpret(InterpreterContext ctx); 8} 9 10public class Main { 11 public static void main(String[] args) { 12 String input = \u0026#34;30 in binary\u0026#34;; 13 if (input.contains(\u0026#34;binary\u0026#34;)) { 14 int val = Integer.parseInt(input.substring(0, input.indexOf(\u0026#34; \u0026#34;))); 15 System.out.println(new IntToBinaryExpression(val).interpret(new InterpreterContext())); 16 } 17 18 input = \u0026#34;30 in hexadecimal\u0026#34;; 19 if (input.contains(\u0026#34;hexadecimal\u0026#34;)) { 20 int val = Integer.parseInt(input.substring(0, input.indexOf(\u0026#34; \u0026#34;))); 21 System.out.println(new IntToHexExpression(val).interpret(new InterpreterContext())); 22 } 23 } 24 25} 26 27class InterpreterContext { 28 public String getBinaryFormat(int val) { 29 return Integer.toBinaryString(val); 30 } 31 32 public String getHexFormat(int val) { 33 return Integer.toHexString(val); 34 } 35} 36 37@Data 38@AllArgsConstructor 39class IntToBinaryExpression implements Expression { 40 41 int val; 42 43 @Override 44 public String interpret(InterpreterContext ctx) { 45 return ctx.getBinaryFormat(val); 46 } 47} 48 49@Data 50@AllArgsConstructor 51class IntToHexExpression implements Expression { 52 53 int val; 54 55 @Override 56 public String interpret(InterpreterContext ctx) { 57 return ctx.getHexFormat(val); 58 } 59} Output:\n111110 21e 10. Iterator Pattern Iterator pattern is used to provide standard way to traverse through group of objects. In the example below we provide 2 types of iterators over the fruit collection, we could have let the user write his own iterator but if there are many clients using the iterator then it would be difficult to maintain. Notice that FruitIterator is private and inner class, this hides the implementation details from the client. Logic of iteration is internal to the collection.\n1package com.demo.project62.iterator; 2 3import java.util.ArrayList; 4import java.util.Collections; 5import java.util.Comparator; 6import java.util.Iterator; 7import java.util.List; 8 9import lombok.AllArgsConstructor; 10import lombok.Data; 11 12interface FruitCollection { 13 public Iterator getIterator(String type); 14} 15 16public class Main { 17 public static void main(String[] args) { 18 19 FruitCollectionImpl collection = new FruitCollectionImpl(); 20 21 for (Iterator iter = collection.getIterator(\u0026#34;COLOR\u0026#34;); iter.hasNext(); ) { 22 Fruit fruit = (Fruit) iter.next(); 23 System.out.println(fruit); 24 } 25 System.out.println(\u0026#34;-------------------------------\u0026#34;); 26 for (Iterator iter = collection.getIterator(\u0026#34;TYPE\u0026#34;); iter.hasNext(); ) { 27 Fruit fruit = (Fruit) iter.next(); 28 System.out.println(fruit); 29 } 30 } 31} 32 33@AllArgsConstructor 34@Data 35class Fruit { 36 String type; 37 String color; 38} 39 40class FruitCollectionImpl implements FruitCollection { 41 42 List\u0026lt;Fruit\u0026gt; fruits; 43 44 FruitCollectionImpl() { 45 fruits = new ArrayList\u0026lt;\u0026gt;(); 46 fruits.add(new Fruit(\u0026#34;Banana\u0026#34;, \u0026#34;Green\u0026#34;)); 47 fruits.add(new Fruit(\u0026#34;Apple\u0026#34;, \u0026#34;Green\u0026#34;)); 48 fruits.add(new Fruit(\u0026#34;Banana\u0026#34;, \u0026#34;Yellow\u0026#34;)); 49 fruits.add(new Fruit(\u0026#34;Cherry\u0026#34;, \u0026#34;Red\u0026#34;)); 50 fruits.add(new Fruit(\u0026#34;Apple\u0026#34;, \u0026#34;Red\u0026#34;)); 51 } 52 53 @Override 54 public Iterator getIterator(String type) { 55 if (type.equals(\u0026#34;COLOR\u0026#34;)) { 56 return new FruitIterator(\u0026#34;COLOR\u0026#34;); 57 } else { 58 return new FruitIterator(\u0026#34;TYPE\u0026#34;); 59 } 60 } 61 62 private class FruitIterator implements Iterator { 63 int index; 64 List\u0026lt;Fruit\u0026gt; sortedFruits = new ArrayList\u0026lt;\u0026gt;(fruits); 65 66 FruitIterator(String iteratorType) { 67 if (iteratorType.equals(\u0026#34;COLOR\u0026#34;)) { 68 Collections.sort(sortedFruits, Comparator.comparing(Fruit::getColor)); 69 } else { 70 Collections.sort(sortedFruits, Comparator.comparing(Fruit::getType)); 71 } 72 } 73 74 @Override 75 public boolean hasNext() { 76 if (index \u0026lt; sortedFruits.size()) { 77 return true; 78 } 79 return false; 80 } 81 82 @Override 83 public Object next() { 84 if (this.hasNext()) { 85 return sortedFruits.get(index++); 86 } 87 return null; 88 } 89 } 90 91} Output:\n1Fruit(type=Banana, color=Green) 2Fruit(type=Apple, color=Green) 3Fruit(type=Cherry, color=Red) 4Fruit(type=Apple, color=Red) 5Fruit(type=Banana, color=Yellow) 6------------------------------- 7Fruit(type=Apple, color=Green) 8Fruit(type=Apple, color=Red) 9Fruit(type=Banana, color=Green) 10Fruit(type=Banana, color=Yellow) 11Fruit(type=Cherry, color=Red) 11. Memento Pattern Memento pattern is used to restore state of an object to a previous state.\nMemento pattern involves three classes.\nOriginator: The core class which holds a state. This state will need to be reverted to previous states. Think of this as your text editor text data. Memento: The class has all the same attributes as Originator class and is used to hold values that will be restored back to the Originator class. Think of this as a temporary variable. Each time you click on save a memento is created and added to the list so that it can be reverted later. CareTaker - This class takes ownership of creating and restoring memento. In the example below you can create a Originator object and change its state many times, only when you call the CareTaker.save method a memento gets created so that an undo operation later on can revert to that state. The list mementoList is private so only caretaker has access to the memento objects ensuring integrity of data. Take special care if the attribute is immutable in the undoState method.\n1package com.demo.project62.memento; 2 3import java.util.ArrayList; 4import java.util.List; 5 6import lombok.AllArgsConstructor; 7import lombok.Data; 8import lombok.NoArgsConstructor; 9import lombok.RequiredArgsConstructor; 10 11public class Main { 12 13 public static void main(String[] args) { 14 15 Originator originator = new Originator(); 16 CareTaker careTaker = new CareTaker(originator); 17 careTaker.save(); 18 19 originator.setState(\u0026#34;State #1\u0026#34;); 20 originator.setState(\u0026#34;State #2\u0026#34;); 21 careTaker.save(); 22 23 originator.setState(\u0026#34;State #3\u0026#34;); 24 careTaker.save(); 25 26 originator.setState(\u0026#34;State #4\u0026#34;); 27 System.out.println(\u0026#34;Current State: \u0026#34; + originator.getState()); 28 29 careTaker.undo(); 30 System.out.println(\u0026#34;Current State: \u0026#34; + originator.getState()); 31 32 careTaker.undo(); 33 System.out.println(\u0026#34;Current State: \u0026#34; + originator.getState()); 34 35 careTaker.undo(); 36 careTaker.undo(); 37 careTaker.undo(); 38 System.out.println(\u0026#34;Current State: \u0026#34; + originator.getState()); 39 } 40} 41 42@Data 43@AllArgsConstructor 44class Memento { 45 private String state; 46} 47 48@Data 49@AllArgsConstructor 50@NoArgsConstructor 51class Originator { 52 private String state; 53 54 public Memento saveState() { 55 return new Memento(this.state); 56 } 57 58 public void undoState(Memento memento) { 59 this.state = memento.getState(); 60 } 61 62} 63 64@RequiredArgsConstructor 65class CareTaker { 66 final Originator origin; 67 private List\u0026lt;Memento\u0026gt; mementoList = new ArrayList\u0026lt;Memento\u0026gt;(); 68 69 public void save() { 70 if (origin.getState() != null) { 71 mementoList.add(origin.saveState()); 72 } 73 } 74 75 public void undo() { 76 if (!mementoList.isEmpty()) { 77 origin.undoState(mementoList.get(mementoList.size() - 1)); 78 mementoList.remove(mementoList.size() - 1); 79 } 80 } 81} Output:\n1Current State: State #4 2Current State: State #3 3Current State: State #2 4Current State: State #2 Differences 1. Difference between bridge pattern and adapter pattern Bridge pattern is built upfront you break things at design time to make changes so that functionality can be added without tight coupling, adapter pattern works after code is already designed like legacy code.\n2. Difference between mediator pattern and observer pattern In observer, many objects are interested in the state change of one object. They are not interested in each other. So the relation is one to many. In mediator, many objects are interested to communicate many other objects. Here the relation is many to many.\n3. Difference between chain of responsibility and command pattern In chain of responsibility pattern, the request is passed to potential receivers, whereas the command pattern uses a command object that encapsulates a request.\n4. Difference between adapter pattern and decorator pattern Adapter pattern only adapts functionality, decorator adds more functionality.\n5. Difference between adapter pattern and facade pattern Adapter pattern just links two incompatible interfaces. A facade is used when one wants an easier or simpler interface to work with.\n","link":"https://gitorko.github.io/post/design-patterns/","section":"post","tags":["design-pattern"],"title":"Design Patterns"},{"body":"","link":"https://gitorko.github.io/categories/java/","section":"categories","tags":null,"title":"Java"},{"body":"","link":"https://gitorko.github.io/tags/xenon/","section":"tags","tags":null,"title":"xenon"},{"body":"Simple rest service using VMWare Xenon Framework. We will deploy multi-node instance of the rest service and explore the xenon UI.\nXenon Xenon is a framework for writing small REST-based services. When you write a rest service in other frameworks like spring you have to pick a data store like mongo db to persist your data, you have to maintain separate instances of mongo db to ensure replication works. You have to then deploy your rest service on distributed environment using docker swarm and ensure high availability of your service. Xenon framework does all this for you with just a single library. Here we will see how to create a simple rest service using xenon and then see how we can achieve asynchronous call,distributed node deployment, replication, synchronization, ordering, and consistency of data across those nodes. We will see how we can scale the application etc.\nCreate a simple maven project. If you are using vscode ctrl+shift+p 'Maven: Generate from maven Archetype' and select a folder, click on 'maven-archetype-quickstart' and enter the project details. You can also run the command and enter 'groupId': com.demo.xenon \u0026amp; 'artifactId': myxenon\n1$ mvn archetype:generate -DarchetypeArtifactId=\u0026#34;maven-archetype-quickstart\u0026#34; -DarchetypeGroupId=\u0026#34;org.apache.maven.archetypes\u0026#34; Add the xenon dependency to your pom.xml \u0026amp; update the plugins. The 'xenon-common' is the only core library you need, but to visualize things we have added 'xenon-ui'\n1\u0026lt;dependencies\u0026gt; 2 \u0026lt;dependency\u0026gt; 3 \u0026lt;groupId\u0026gt;com.vmware.xenon\u0026lt;/groupId\u0026gt; 4 \u0026lt;artifactId\u0026gt;xenon-common\u0026lt;/artifactId\u0026gt; 5 \u0026lt;version\u0026gt;1.4.0\u0026lt;/version\u0026gt; 6 \u0026lt;/dependency\u0026gt; 7 \u0026lt;dependency\u0026gt; 8 \u0026lt;groupId\u0026gt;com.vmware.xenon\u0026lt;/groupId\u0026gt; 9 \u0026lt;artifactId\u0026gt;xenon-ui\u0026lt;/artifactId\u0026gt; 10 \u0026lt;version\u0026gt;1.4.0\u0026lt;/version\u0026gt; 11 \u0026lt;/dependency\u0026gt; 12\u0026lt;/dependencies\u0026gt; 13 14\u0026lt;build\u0026gt; 15 \u0026lt;plugins\u0026gt; 16 \u0026lt;plugin\u0026gt; 17 \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; 18 \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; 19 \u0026lt;version\u0026gt;3.7.0\u0026lt;/version\u0026gt; 20 \u0026lt;configuration\u0026gt; 21 \u0026lt;source\u0026gt;1.8\u0026lt;/source\u0026gt; 22 \u0026lt;target\u0026gt;1.8\u0026lt;/target\u0026gt; 23 \u0026lt;/configuration\u0026gt; 24 \u0026lt;/plugin\u0026gt; 25 \u0026lt;plugin\u0026gt; 26 \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; 27 \u0026lt;artifactId\u0026gt;maven-assembly-plugin\u0026lt;/artifactId\u0026gt; 28 \u0026lt;version\u0026gt;2.4.1\u0026lt;/version\u0026gt; 29 \u0026lt;configuration\u0026gt; 30 \u0026lt;descriptorRefs\u0026gt; 31 \u0026lt;descriptorRef\u0026gt;jar-with-dependencies\u0026lt;/descriptorRef\u0026gt; 32 \u0026lt;/descriptorRefs\u0026gt; 33 \u0026lt;archive\u0026gt; 34 \u0026lt;manifest\u0026gt; 35 \u0026lt;mainClass\u0026gt;com.demo.xenon.App\u0026lt;/mainClass\u0026gt; 36 \u0026lt;/manifest\u0026gt; 37 \u0026lt;/archive\u0026gt; 38 \u0026lt;/configuration\u0026gt; 39 \u0026lt;executions\u0026gt; 40 \u0026lt;execution\u0026gt; 41 \u0026lt;id\u0026gt;make-assembly\u0026lt;/id\u0026gt; 42 \u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt; 43 \u0026lt;goals\u0026gt; 44 \u0026lt;goal\u0026gt;single\u0026lt;/goal\u0026gt; 45 \u0026lt;/goals\u0026gt; 46 \u0026lt;/execution\u0026gt; 47 \u0026lt;/executions\u0026gt; 48 \u0026lt;/plugin\u0026gt; 49 \u0026lt;plugin\u0026gt; 50 \u0026lt;groupId\u0026gt;org.codehaus.mojo\u0026lt;/groupId\u0026gt; 51 \u0026lt;artifactId\u0026gt;exec-maven-plugin\u0026lt;/artifactId\u0026gt; 52 \u0026lt;version\u0026gt;1.6.0\u0026lt;/version\u0026gt; 53 \u0026lt;configuration\u0026gt; 54 \u0026lt;mainClass\u0026gt;com.demo.xenon.App\u0026lt;/mainClass\u0026gt; 55 \u0026lt;/configuration\u0026gt; 56 \u0026lt;/plugin\u0026gt; 57 \u0026lt;/plugins\u0026gt; 58\u0026lt;/build\u0026gt; Modify your App.java, Your App class extends the ServiceHost class. If you want you nodes to have specific name modify 'defaultArgs.id'. Note the 'defaultArgs.sandbox' path, this is where the data files of the data store will reside. On windows it will be 'C:/tmp/xenondb'.\n1package com.demo.xenon; 2 3import java.nio.file.Paths; 4import java.util.UUID; 5 6import com.vmware.xenon.common.ServiceHost; 7import com.vmware.xenon.services.common.RootNamespaceService; 8import com.vmware.xenon.ui.UiService; 9 10public class App extends ServiceHost { 11 public static void main(String[] args) throws Throwable { 12 App appHost = new App(); 13 Arguments defaultArgs = new Arguments(); 14 defaultArgs.id = \u0026#34;host:\u0026#34; + UUID.randomUUID(); 15 defaultArgs.sandbox = Paths.get(\u0026#34;/tmp/xenondb\u0026#34;); 16 appHost.initialize(args, defaultArgs); 17 appHost.start(); 18 Runtime.getRuntime().addShutdownHook(new Thread(appHost::stop)); 19 } 20 21 @Override 22 public ServiceHost start() throws Throwable { 23 super.start(); 24 startDefaultCoreServicesSynchronously(); 25 super.startService(new RootNamespaceService()); 26 super.startService(new UiService()); 27 return this; 28 } 29} Build the project and execute the code. Note: Do not try the approach mvn exec:exec as this will detach the java process on ctrl+c and you will have to kill the java process manually.\n1$ mvn clean install 2$ mvn exec:java Your xenon server should now be up. You should view http://localhost:8000/core/ui/default\nYou just hosted the xenon server. You have not yet written a rest service. At this point you already get 13 core services which are transactions,resource-groups,roles,local-query-tasks,credentials,sync-tasks,graph-queries,users,user-groups,node-groups,tenants,processes,query-tasks. The custom services card at the bottom shows a count of 0. Now lets write our first xenon rest service.\nCreate a new class BookStoreService.java\n1package com.demo.xenon; 2 3import com.vmware.xenon.common.Operation; 4import com.vmware.xenon.common.ServiceDocument; 5import com.vmware.xenon.common.ServiceDocumentDescription.PropertyUsageOption; 6import com.vmware.xenon.common.StatefulService; 7import com.vmware.xenon.common.Utils; 8 9public class BookStoreService extends StatefulService { 10 11 public static final String FACTORY_LINK = \u0026#34;/myservice/books\u0026#34;; 12 13 public static class Book extends ServiceDocument { 14 15 @UsageOption(option = PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL) 16 @UsageOption(option = PropertyUsageOption.REQUIRED) 17 public String bookName; 18 19 @UsageOption(option = PropertyUsageOption.AUTO_MERGE_IF_NOT_NULL) 20 @UsageOption(option = PropertyUsageOption.REQUIRED) 21 public Double bookPrice; 22 23 } 24 25 public BookStoreService() { 26 super(Book.class); 27 toggleOption(ServiceOption.PERSISTENCE, true); 28 toggleOption(ServiceOption.REPLICATION, true); 29 toggleOption(ServiceOption.INSTRUMENTATION, true); 30 toggleOption(ServiceOption.OWNER_SELECTION, true); 31 } 32 33 @Override 34 public void handleCreate(Operation startPost) { 35 Book book = getBody(startPost); 36 Utils.validateState(getStateDescription(), book); 37 startPost.complete(); 38 } 39 40 @Override 41 public void handlePut(Operation put) { 42 Book book = getBody(put); 43 Utils.validateState(getStateDescription(), book); 44 setState(put, book); 45 put.complete(); 46 } 47 48 @Override 49 public void handlePatch(Operation patch) { 50 Book bookState = getState(patch); 51 Book book = getBody(patch); 52 Utils.mergeWithState(getStateDescription(), bookState, book); 53 patch.setBody(bookState); 54 patch.complete(); 55 } 56} Add this line to the App.java start method \u0026amp; Run the program\n1super.startFactory(new BookStoreService()); 1$ mvn exec:java You can now create a book.\n1curl -X POST -H \u0026#39;Content-Type: application/json\u0026#39; -i http://localhost:8000/myservice/books --data \u0026#39;{ 2bookName: \u0026#34;book1\u0026#34;, 3bookPrice: 2.0 4}\u0026#39; 5 6curl -X GET -H \u0026#39;Content-Type: application/json\u0026#39; -i http://localhost:8000/myservice/books 7 8curl -X GET -H \u0026#39;Content-Type: application/json\u0026#39; -i http://localhost:8000/myservice/books/b5533c1dd2d595c557181891d2dc0 Response:\n1{ 2 \u0026#34;documentLinks\u0026#34;: [ 3 \u0026#34;/myservice/books/b5533c1dd2d595c557181891d2dc0\u0026#34; 4 ], 5 \u0026#34;documentCount\u0026#34;: 1, 6 \u0026#34;queryTimeMicros\u0026#34;: 17999, 7 \u0026#34;documentVersion\u0026#34;: 0, 8 \u0026#34;documentUpdateTimeMicros\u0026#34;: 0, 9 \u0026#34;documentExpirationTimeMicros\u0026#34;: 0, 10 \u0026#34;documentOwner\u0026#34;: \u0026#34;host:e413831a-3247-4dfb-aecf-24d319591a84\u0026#34; 11} 12 13{ 14 \u0026#34;bookName\u0026#34;: \u0026#34;book1\u0026#34;, 15 \u0026#34;bookPrice\u0026#34;: 2.0, 16 \u0026#34;documentVersion\u0026#34;: 0, 17 \u0026#34;documentEpoch\u0026#34;: 0, 18 \u0026#34;documentKind\u0026#34;: \u0026#34;com:demo:xenon:BookStoreService:Book\u0026#34;, 19 \u0026#34;documentSelfLink\u0026#34;: \u0026#34;/myservice/books/b5533c1dd2d595c557181891d2dc0\u0026#34;, 20 \u0026#34;documentUpdateTimeMicros\u0026#34;: 1532181069064001, 21 \u0026#34;documentUpdateAction\u0026#34;: \u0026#34;POST\u0026#34;, 22 \u0026#34;documentExpirationTimeMicros\u0026#34;: 0, 23 \u0026#34;documentOwner\u0026#34;: \u0026#34;host:e413831a-3247-4dfb-aecf-24d319591a84\u0026#34; 24} Owner Selection Now lets assume you have 1 million book entries, will the data be replicated across all nodes? The data replication will be shared among the nodes that have ServiceOption.OWNER_SELECTION enabled. By enabling this you are telling the service that this node will take ownership of storing the data. So if there are 3 nodes in the poll then each node will store 1/3 of the 1 million records in the data store, if one of the node goes down then rebalancing happens and now the 2 nodes each have 1/2 of the 1 million records. When you request hits a server which doesnt have that data stored locally the request then gets forwarded to the node which is the owner of that data. You can have few nodes within the pool with ServiceOption.OWNER_SELECTION disabled they will internally forward the requests to the OWNER nodes.\nMutlinode Multi node capability in xenon provides high availability \u0026amp; scalability in terms of storage \u0026amp; request processing.\nStateful Service vs Stateless Service What we wrote above is a stateful rest service. A stateful service invovles data that needs persistence. An example of a stateless rest service would be a proxy service.\nReplication factor \u0026amp; Quorum The replication factor tells xenon how many nodes the stateful service needs to be replicated over. Default is all. Quroum tells xenon on how many nodes the persist operation should be successful before considering something as persisted. If you have defined quorum of 3 nodes and 1 node fails then all future write requests to will fail as there arent enough members to validate the quorum. Default is majority quorum [n/2+1] where n is replication factor. On a 3 node with replication factor all, quorum is [3/2+1] = 2 which means 2 nodes have to agree for a write to be committed.\nServiceOption Description PERSISTENCE persists data REPLICATION replicates data across nodes INSTRUMENTATION provides stats about service OWNER_SELECTION takes ownership of storing data PropertyUsageOption Annotation Description ID id field AUTO_MERGE_IF_NOT_NULL helper method will merge current state with state supplied in body in case of updates OPTIONAL not optional REQUIRED mandatory field SERVICE_USE used internally Now let us deploy our service in a distributed environment. Delete the test folder as we wont be covering it here. Run the command\n1$ mvn clean install 2 3$ cd target; 4 5$ java -jar myxenon-1.0-SNAPSHOT-jar-with-dependencies.jar This should start the single node instance of your book store rest service.\nNow lets add 2 more nodes to the quorum. All the 3 nodes (\u0026quot;Service Host\u0026quot;) will form what is called a node group. Replication happens within this node group.\n1$ java -jar myxenon-1.0-SNAPSHOT-jar-with-dependencies.jar --port=8001 --peerNodes=http://localhost:8000 2$ java -jar myxenon-1.0-SNAPSHOT-jar-with-dependencies.jar --port=8002 --peerNodes=http://localhost:8000 It will take a few seconds for the nodes to synchronize/converge, the nodes use gossip to detect changes and identify new members in group.. Note: The node name should be unique in the quorum. There must be minimum 3 nodes. You should be able to see all 3 nodes in the UI. You can try shutting down the primary node and see if data is still accessible. A node group identifies which node is the owner of the data and forwards request to the owner to retrieve that.\nYou can also add a node to a group after its started, you can do this by invoking a rest call (JoinPeerRequest). For now we will use the option of adding node to node group at startup time by providing --peerNodes. Such an ability to join a node group will be very useful in IOT based devices.\n1curl -X GET -H \u0026#39;Content-Type: application/json\u0026#39; -i http://localhost:8001/myservice/books/e948dec6a69bdd3f57182b45a6740 Clicking on the http://localhost:8000/core/ui/default/#/main/service/id__myservice_books should show up more details on the record. You can edit/delete records from the UI as well.\nYou can also query for your data in the query tab.\nReferences Xenon\nXenon Github\n","link":"https://gitorko.github.io/post/xenon-rest-service-framework/","section":"post","tags":["xenon"],"title":"Xenon Rest Service Framework"},{"body":"","link":"https://gitorko.github.io/tags/index/","section":"tags","tags":null,"title":"index"}]